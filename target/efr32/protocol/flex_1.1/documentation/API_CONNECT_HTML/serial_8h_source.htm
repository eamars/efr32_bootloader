<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Silicon Labs Connect API Reference: For the EZR32 and EFR32 SoC Platforms</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
</head>
<body>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td><img src="SiliconLabsLogo_Black.jpg" style="padding: 10px;width:40%;height:40%;" /></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Silicon Labs Connect API Reference: For the EZR32 and EFR32 SoC Platforms
   &#160;<span id="projectnumber">Silicon Labs 1.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.2 -->
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('serial_8h_source.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">serial.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="serial_8h.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#ifndef __HAL_SERIAL_H__</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __HAL_SERIAL_H__</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">//[[</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">// Include ember.h to get EmberMessageBuffer definition.</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">// Why is this necessary for ZIP but not for ZNet?  In fact, including it in</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">// ZNet breaks things.  I can&#39;t figure out how to untangle the</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">// dependencies, but I&#39;m thinking this is not the right place to include</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">// this header.  Since it&#39;s breaking things for other people, I&#39;ll just</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">// apply the band aid and worry about it later. -- ryan</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">//]]</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">// If only EmberMessageBuffer is needed, ember-types.h should suffice. </span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">// Some znet targets also now need this, so I&#39;m removing the restriction below. -- Vignesh.</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">// #if defined(EMBER_STACK_IP) || defined(EMBER_STACK_CONNECT) || defined(EMBER_STACK_WASP)</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">  #include &quot;<a class="code" href="ember-types_8h.htm" title="Ember Connect data type definitions.">stack/include/ember-types.h</a>&quot;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">// #endif</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#ifdef CORTEXM3_EFM32_MICRO</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #include &quot;em_usart.h&quot;</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="comment">// Connect uses a different header, the ifndef check can be removed once</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="comment">// they&#39;re unified.</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">  #ifndef EMBER_STACK_CONNECT</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor"></span><span class="preprocessor">    #include &quot;plugin/serial/com.h&quot;</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">  #endif</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">//[[</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">// Crude method of mashing together com and serial layers before all the drivers</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">// are properly ported over into ember world. NT 2014-09-16</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">//]]</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">#ifndef CORTEXM3_EFM32_MICRO</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor"></span><span class="comment">// EM_NUM_SERIAL_PORTS is inherited from the micro specifc micro.h</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">#if (EM_NUM_SERIAL_PORTS == 1)</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define FOR_EACH_PORT(cast,prefix,suffix)  \</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor">    cast(prefix##0##suffix)</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#elif (EM_NUM_SERIAL_PORTS == 2)</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define FOR_EACH_PORT(cast,prefix,suffix)  \</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">    cast(prefix##0##suffix),                 \</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor">    cast(prefix##1##suffix)</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#elif (EM_NUM_SERIAL_PORTS == 3)</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define FOR_EACH_PORT(cast,prefix,suffix)  \</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">    cast(prefix##0##suffix),            \</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">    cast(prefix##1##suffix),            \</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">    cast(prefix##2##suffix)</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#elif (EM_NUM_SERIAL_PORTS == 4)</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define FOR_EACH_PORT(cast,prefix,suffix)  \</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">    cast(prefix##0##suffix),            \</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">    cast(prefix##1##suffix),            \</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">    cast(prefix##2##suffix),            \</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">    cast(prefix##3##suffix),</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#elif (EM_NUM_SERIAL_PORTS == 5)</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define FOR_EACH_PORT(cast,prefix,suffix)  \</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">    cast(prefix##0##suffix),            \</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">    cast(prefix##1##suffix),            \</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">    cast(prefix##2##suffix),            \</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">    cast(prefix##3##suffix),            \</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">    cast(prefix##4##suffix),</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #error unsupported number of serial ports</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif //CORTEXM3_EFM32_MICRO</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="code" href="group__serial.htm#ga44fab93c5555efea947b6e78d28405a4">   99</a></span>&#160;<span class="preprocessor">#define EMBER_SERIAL_UNUSED 0</span></div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="code" href="group__serial.htm#gaa8305e0960f14a47b6f6e5e68e00b433">  100</a></span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define EMBER_SERIAL_FIFO   1</span></div>
<div class="line"><a name="l00101"></a><span class="lineno"><a class="code" href="group__serial.htm#gac4245c7ba24addf61a174d4684d560e9">  101</a></span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define EMBER_SERIAL_BUFFER 2</span></div>
<div class="line"><a name="l00102"></a><span class="lineno"><a class="code" href="group__serial.htm#ga5fb0daf83349cf27be1a371776296ff7">  102</a></span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define EMBER_SERIAL_LOWLEVEL 3</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor">#ifndef DOXYGEN_SHOULD_SKIP_THIS</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">// The following tests for setting of an invalid mode</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">#ifdef EMBER_SERIAL0_MODE</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if (EMBER_SERIAL0_MODE != EMBER_SERIAL_FIFO)   &amp;&amp; \</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor">    (EMBER_SERIAL0_MODE != EMBER_SERIAL_BUFFER) &amp;&amp; \</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">    (EMBER_SERIAL0_MODE != EMBER_SERIAL_LOWLEVEL) &amp;&amp; \</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor">    (EMBER_SERIAL0_MODE != EMBER_SERIAL_UNUSED)</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #error Invalid Serial 0 Mode</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define EMBER_SERIAL0_MODE EMBER_SERIAL_UNUSED</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#ifdef EMBER_SERIAL1_MODE</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if (EMBER_SERIAL1_MODE != EMBER_SERIAL_FIFO)   &amp;&amp; \</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="preprocessor">    (EMBER_SERIAL1_MODE != EMBER_SERIAL_BUFFER) &amp;&amp; \</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">    (EMBER_SERIAL1_MODE != EMBER_SERIAL_LOWLEVEL) &amp;&amp; \</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor">    (EMBER_SERIAL1_MODE != EMBER_SERIAL_UNUSED)</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #error Invalid Serial 1 Mode</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define EMBER_SERIAL1_MODE EMBER_SERIAL_UNUSED</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#ifdef EMBER_SERIAL2_MODE</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if (EMBER_SERIAL2_MODE != EMBER_SERIAL_FIFO)   &amp;&amp; \</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="preprocessor">    (EMBER_SERIAL2_MODE != EMBER_SERIAL_BUFFER) &amp;&amp; \</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="preprocessor">    (EMBER_SERIAL2_MODE != EMBER_SERIAL_LOWLEVEL) &amp;&amp; \</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor">    (EMBER_SERIAL2_MODE != EMBER_SERIAL_UNUSED)</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #error Invalid Serial 2 Mode</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define EMBER_SERIAL2_MODE EMBER_SERIAL_UNUSED</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#ifdef EMBER_SERIAL3_MODE</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if (EMBER_SERIAL3_MODE != EMBER_SERIAL_FIFO)   &amp;&amp; \</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">    (EMBER_SERIAL3_MODE != EMBER_SERIAL_BUFFER) &amp;&amp; \</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor">    (EMBER_SERIAL3_MODE != EMBER_SERIAL_LOWLEVEL) &amp;&amp; \</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor">    (EMBER_SERIAL3_MODE != EMBER_SERIAL_UNUSED)</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #error Invalid Serial 3 Mode</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define EMBER_SERIAL3_MODE EMBER_SERIAL_UNUSED</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#ifdef EMBER_SERIAL4_MODE</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if (EMBER_SERIAL4_MODE != EMBER_SERIAL_FIFO)   &amp;&amp; \</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="preprocessor">    (EMBER_SERIAL4_MODE != EMBER_SERIAL_BUFFER) &amp;&amp; \</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="preprocessor">    (EMBER_SERIAL4_MODE != EMBER_SERIAL_LOWLEVEL) &amp;&amp; \</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="preprocessor">    (EMBER_SERIAL4_MODE != EMBER_SERIAL_UNUSED)</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #error Invalid Serial 4 Mode</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define EMBER_SERIAL4_MODE EMBER_SERIAL_UNUSED</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">// Determine if FIFO and/or Buffer modes are being used, so those sections of</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">//  code may be disabled if not</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="preprocessor">#if (EMBER_SERIAL0_MODE == EMBER_SERIAL_FIFO) || \</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="preprocessor">    (EMBER_SERIAL1_MODE == EMBER_SERIAL_FIFO) || \</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="preprocessor">    (EMBER_SERIAL2_MODE == EMBER_SERIAL_FIFO) || \</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="preprocessor">    (EMBER_SERIAL3_MODE == EMBER_SERIAL_FIFO) || \</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="preprocessor">    (EMBER_SERIAL4_MODE == EMBER_SERIAL_FIFO)</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define EM_ENABLE_SERIAL_FIFO</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if (EMBER_SERIAL0_MODE == EMBER_SERIAL_BUFFER) || \</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="preprocessor">    (EMBER_SERIAL1_MODE == EMBER_SERIAL_BUFFER) || \</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="preprocessor">    (EMBER_SERIAL2_MODE == EMBER_SERIAL_BUFFER) || \</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="preprocessor">    (EMBER_SERIAL3_MODE == EMBER_SERIAL_BUFFER) || \</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="preprocessor">    (EMBER_SERIAL4_MODE == EMBER_SERIAL_BUFFER)</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define EM_ENABLE_SERIAL_BUFFER</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span>{</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  uint16_t head;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  uint16_t tail;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  <span class="keyword">volatile</span> uint16_t used;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  uint8_t fifo[];</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;} EmSerialFifoQueue;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span>{</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  uint8_t length;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  EmberMessageBuffer buffer;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  uint8_t startIndex;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;} EmSerialBufferQueueEntry;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span>{</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  uint8_t head;        </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  uint8_t tail;        </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  <span class="keyword">volatile</span> uint8_t used;        </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <span class="keyword">volatile</span> uint8_t dead;        </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  EmberMessageBuffer currentBuffer;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  uint8_t *nextByte;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  uint8_t *lastByte;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  EmSerialBufferQueueEntry fifo[];</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;} EmSerialBufferQueue;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor">#ifndef CORTEXM3_EFM32_MICRO</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  <span class="keyword">extern</span> <span class="keywordtype">void</span> *emSerialTxQueues[EM_NUM_SERIAL_PORTS];</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  <span class="keyword">extern</span> EmSerialFifoQueue *emSerialRxQueues[EM_NUM_SERIAL_PORTS];</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  <span class="keyword">extern</span> uint16_t PGM emSerialTxQueueMasks[EM_NUM_SERIAL_PORTS];</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  <span class="keyword">extern</span> uint16_t PGM emSerialTxQueueSizes[EM_NUM_SERIAL_PORTS];</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  <span class="keyword">extern</span> uint16_t PGM emSerialRxQueueSizes[EM_NUM_SERIAL_PORTS];</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;  <span class="keyword">extern</span> uint8_t emSerialRxError[EM_NUM_SERIAL_PORTS];</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  <span class="keyword">extern</span> uint16_t emSerialRxErrorIndex[EM_NUM_SERIAL_PORTS];</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  <span class="keyword">extern</span> uint8_t PGM emSerialPortModes[EM_NUM_SERIAL_PORTS];</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  <span class="keyword">extern</span> uint16_t PGM emSerialTxQueueWraps[EM_NUM_SERIAL_PORTS];</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  <span class="keyword">extern</span> uint16_t PGM emSerialRxQueueWraps[EM_NUM_SERIAL_PORTS];</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="preprocessor">#endif // CORTEXM3_EFM32_MICRO</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="preprocessor">#ifdef EZSP_UART</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="preprocessor"></span>  <span class="keywordtype">void</span> emCallCounterHandler(<a class="code" href="group__ember__types.htm#ga9f972a77387b604c47eda6a63188aa3b" title="Defines the events reported to the application by the ::emberCounterHandler().">EmberCounterType</a> type, uint8_t data);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="preprocessor">  #define HANDLE_ASH_ERROR(type) emCallCounterHandler(type, 0)</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define HANDLE_ASH_ERROR(type)</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="preprocessor">#endif //DOXYGEN_SHOULD_SKIP_THIS</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="preprocessor">#undef  FIFO_ENQUEUE // Avoid possible warning, replace other definition</span></div>
<div class="line"><a name="l00289"></a><span class="lineno"><a class="code" href="group__serial.htm#ga950bcbeecd3f4118871b596bd2e51a36">  289</a></span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define FIFO_ENQUEUE(queue,data,size)               \</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="preprocessor">  do {                                              \</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="preprocessor">    (queue)-&gt;fifo[(queue)-&gt;head] = (data);          \</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="preprocessor">    (queue)-&gt;head = (((queue)-&gt;head + 1) % (size)); \</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="preprocessor">    (queue)-&gt;used++;                                \</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="preprocessor">  } while(0)</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="preprocessor"></span>  </div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="preprocessor">#undef  FIFO_DEQUEUE // Avoid possible warning, replace other definition</span></div>
<div class="line"><a name="l00304"></a><span class="lineno"><a class="code" href="group__serial.htm#gaa9ed21755e12d502f03e0fa08618618c">  304</a></span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define FIFO_DEQUEUE(queue,size)                    \</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="preprocessor">  (queue)-&gt;fifo[(queue)-&gt;tail];                     \</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="preprocessor">  (queue)-&gt;tail = (((queue)-&gt;tail + 1) % (size));   \</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="preprocessor">  (queue)-&gt;used--</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="preprocessor"></span>  </div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="preprocessor">#ifdef DOXYGEN_SHOULD_SKIP_THIS</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00317"></a><span class="lineno"><a class="code" href="group__serial.htm#ga79e9d2305515318a1ae0ab5aaffd6fcb">  317</a></span>&#160;<span class="keyword">enum</span> <a class="code" href="group__serial.htm#ga79e9d2305515318a1ae0ab5aaffd6fcb" title="Assign numerical values for variables that hold Baud Rate parameters.">SerialBaudRate</a></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #ifndef DEFINE_BAUD</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define DEFINE_BAUD(num) BAUD_##num</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #endif</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #ifdef CORTEXM3_EFM32_MICRO</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="preprocessor"></span>    <span class="keyword">typedef</span> uint32_t <a class="code" href="group__serial.htm#ga79e9d2305515318a1ae0ab5aaffd6fcb" title="Assign numerical values for variables that hold Baud Rate parameters.">SerialBaudRate</a>;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="preprocessor">  #else</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="preprocessor"></span>    <span class="keyword">typedef</span> uint8_t <a class="code" href="group__serial.htm#ga79e9d2305515318a1ae0ab5aaffd6fcb" title="Assign numerical values for variables that hold Baud Rate parameters.">SerialBaudRate</a>;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="preprocessor">  #endif</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="preprocessor"></span><span class="keyword">enum</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="preprocessor">#endif //DOXYGEN_SHOULD_SKIP_THIS</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#ifdef CORTEXM3_EFM32_MICRO</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="preprocessor"></span>{ </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(300) = 300,  <span class="comment">// BAUD_300</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(600) = 600,  <span class="comment">// BAUD_600</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(900) = 900,  <span class="comment">// etc...</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(1200) = 1200,</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(2400) = 2400,</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(4800) = 4800,</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(9600) = 9600,</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(14400) = 14400,</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(19200) = 19200,</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(28800) = 28800,</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(38400) = 38400,</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(50000) = 50000,</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(57600) = 57600,</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(76800) = 76800,</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(100000) = 100000,</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(115200) = 115200</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;};</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="preprocessor">#else //CORTEXM3_EFM32_MICRO</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="preprocessor"></span>{ </div>
<div class="line"><a name="l00350"></a><span class="lineno"><a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">  350</a></span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(300) = 0,  <span class="comment">// BAUD_300</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(600) = 1,  <span class="comment">// BAUD_600</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(900) = 2,  <span class="comment">// etc...</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(1200) = 3,</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(2400) = 4,</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(4800) = 5,</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(9600) = 6,</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(14400) = 7,</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(19200) = 8,</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(28800) = 9,</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(38400) = 10,</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(50000) = 11,</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(57600) = 12,</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(76800) = 13,</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(100000) = 14,</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(115200) = 15,</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(230400) = 16,   <span class="comment">/*&lt;! define higher baud rates for the EM2XX and EM3XX */</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(460800) = 17,   <span class="comment">/*&lt;! Note: receiving data at baud rates &gt; 115200 */</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  <a class="code" href="group__serial.htm#gga79e9d2305515318a1ae0ab5aaffd6fcbaddd7d1b8d46d2e29d36ba073b1ea8dcd">DEFINE_BAUD</a>(CUSTOM) = 18    <span class="comment">/*&lt;! may not be reliable due to interrupt latency */</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;};</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="preprocessor">#endif //CORTEXM3_EFM32_MICRO</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="preprocessor">#ifdef  CORTEXM3_EFM32_MICRO</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;  <span class="keyword">typedef</span> USART_Parity_TypeDef <a class="code" href="group__serial.htm#ga2c48912c12fd98a4f4faffbc7f20a9f6" title="CORTEXM3_EFM32_MICRO.">SerialParity</a>;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="preprocessor">  #define PARITY_NONE usartNoParity</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define PARITY_ODD  usartOddParity</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define PARITY_EVEN usartEvenParity</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#ifdef DOXYGEN_SHOULD_SKIP_THIS</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00387"></a><span class="lineno"><a class="code" href="group__serial.htm#ga2c48912c12fd98a4f4faffbc7f20a9f6">  387</a></span>&#160;<span class="keyword">enum</span> <a class="code" href="group__serial.htm#ga2c48912c12fd98a4f4faffbc7f20a9f6" title="CORTEXM3_EFM32_MICRO.">SerialParity</a></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #ifndef DEFINE_PARITY</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define DEFINE_PARITY(val) PARITY_##val</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #endif</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="preprocessor"></span>  <span class="keyword">typedef</span> uint8_t <a class="code" href="group__serial.htm#ga2c48912c12fd98a4f4faffbc7f20a9f6" title="CORTEXM3_EFM32_MICRO.">SerialParity</a>;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="keyword">enum</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="preprocessor">#endif //DOXYGEN_SHOULD_SKIP_THIS</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="preprocessor"></span>{</div>
<div class="line"><a name="l00396"></a><span class="lineno"><a class="code" href="group__serial.htm#gga2c48912c12fd98a4f4faffbc7f20a9f6a9569a17323e2dd2a5bb1db6a96621815">  396</a></span>&#160;  <a class="code" href="group__serial.htm#gga2c48912c12fd98a4f4faffbc7f20a9f6a9569a17323e2dd2a5bb1db6a96621815">DEFINE_PARITY</a>(NONE) = 0,  <span class="comment">// PARITY_NONE</span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;  <a class="code" href="group__serial.htm#gga2c48912c12fd98a4f4faffbc7f20a9f6a9569a17323e2dd2a5bb1db6a96621815">DEFINE_PARITY</a>(ODD) = 1,   <span class="comment">// PARITY_ODD</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;  <a class="code" href="group__serial.htm#gga2c48912c12fd98a4f4faffbc7f20a9f6a9569a17323e2dd2a5bb1db6a96621815">DEFINE_PARITY</a>(EVEN) = 2   <span class="comment">// PARITY_EVEN</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;};</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="preprocessor">#endif//CORTEXM3_EFM32_MICRO</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<a class="code" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> <a class="code" href="group__serial.htm#gaab61a51a0303d086e456010e087d9e3e" title="Initializes the UART to the given settings (same parameters as ::emberSerialInit() )...">halInternalUartInit</a>(uint8_t port, </div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                                <a class="code" href="group__serial.htm#ga79e9d2305515318a1ae0ab5aaffd6fcb" title="Assign numerical values for variables that hold Baud Rate parameters.">SerialBaudRate</a> rate,</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                                <a class="code" href="group__serial.htm#ga2c48912c12fd98a4f4faffbc7f20a9f6" title="CORTEXM3_EFM32_MICRO.">SerialParity</a> parity,</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                uint8_t stopBits);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__serial.htm#ga7ac65cff3fc25dd920ddf870f0128f54" title="This function is typically called by halPowerDown() and it is responsible for performing all the work...">halInternalPowerDownUart</a>(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__serial.htm#gaa23c94239635acd17fd1ca42c3e20dea" title="This function is typically called by halPowerUp() and it is responsible for performing all the work i...">halInternalPowerUpUart</a>(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__serial.htm#ga57cd95148c6b9421d1084bf27c3133ec" title="Called by serial code whenever anything is queued for transmission to start any interrupt-driven tran...">halInternalStartUartTx</a>(uint8_t port);</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__serial.htm#gab07f42ec9a362d2729585b91ef38dc41" title="Called by serial code to stop any interrupt-driven serial transmission currently in progress...">halInternalStopUartTx</a>(uint8_t port);</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<a class="code" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> <a class="code" href="group__serial.htm#ga3706baabfda05b7856f71295294ea0a4" title="Directly writes a byte to the UART for transmission, regardless of anything currently queued for tran...">halInternalForceWriteUartData</a>(uint8_t port, uint8_t *data, uint8_t length);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<a class="code" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> <a class="code" href="group__serial.htm#ga731dd7236b357ae604368029cfe3492a" title="Directly reads a byte from the UART for reception, regardless of anything currently queued for recept...">halInternalForceReadUartByte</a>(uint8_t port, uint8_t *dataByte);</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__serial.htm#ga3524b7efe60c7a79938bc14f2bd7e5ca" title="Blocks until the UART has finished transmitting any data in its hardware registers.">halInternalWaitUartTxComplete</a>(uint8_t port);</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="preprocessor">#if (EMBER_SERIAL1_MODE == EMBER_SERIAL_FIFO) &amp;&amp;          \</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="preprocessor">    ( defined(EMBER_SERIAL1_XONXOFF) ||                   \</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="preprocessor">    (defined(XAP2B) &amp;&amp; defined(EMBER_SERIAL1_RTSCTS) ) ) </span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="preprocessor"></span><span class="keywordtype">void</span> <a class="code" href="group__serial.htm#gaa980a0d0e1c49f0f043a1f5dd48efa4d" title="This function is used in FIFO mode when flow control is enabled. It is called from emberSerialReadByt...">halInternalUartFlowControl</a>(uint8_t port);</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00504"></a><span class="lineno"><a class="code" href="group__serial.htm#gaa980a0d0e1c49f0f043a1f5dd48efa4d">  504</a></span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define halInternalUartFlowControl(port) do {} while(false)</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="preprocessor">#if defined(CORTEXM3)</span></div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="preprocessor"></span><span class="keywordtype">void</span> <a class="code" href="group__serial.htm#ga005ec617ad0592a9bf174f578387ade2" title="This function exists only in software UART (SOFTUART) mode on the EM3xx. This function is called by :...">halInternalUartRxPump</a>(uint8_t port);</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00517"></a><span class="lineno"><a class="code" href="group__serial.htm#ga005ec617ad0592a9bf174f578387ade2">  517</a></span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define halInternalUartRxPump(port) do {} while(false)</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__serial.htm#ga5e9274cfa859ea19f66592117742ceef" title="This function is typically called by halInternalPowerUpBoard() and it is responsible for performing a...">halInternalRestartUart</a>(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="group__serial.htm#ga2184eb97de15b6738e5ca11b40decdf1" title="Checks to see if the host is allowed to send serial data to the ncp - i.e., it is not being held off ...">halInternalUartFlowControlRxIsEnabled</a>(uint8_t port);</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="comment">// define the old name for backwards compatibility</span></div>
<div class="line"><a name="l00534"></a><span class="lineno"><a class="code" href="group__serial.htm#ga4475715bcb768aba26c89a5c677b9e68">  534</a></span>&#160;<span class="preprocessor">#define halInternalUart1FlowControlRxIsEnabled() halInternalUartFlowControlRxIsEnabled(1)</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="preprocessor">#ifdef CORTEXM3_EFM32_MICRO</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define halInternalUartXonRefreshDone(port) !(COM_InternalRxIsPaused((COM_Port_t) port))</span></div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="preprocessor"></span><span class="keywordtype">bool</span> <a class="code" href="group__serial.htm#gaffe915169918aa8359b63972126c56f0" title="When Xon/Xoff flow control is used, returns true if the host is not being held off and XON refreshing...">halInternalUartXonRefreshDone</a>(uint8_t port);</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00545"></a><span class="lineno"><a class="code" href="group__serial.htm#gac70ec510e77ca4a7efc984471eac879a">  545</a></span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define halInternalUart1XonRefreshDone() halInternalUartXonRefreshDone(1)</span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="preprocessor">#ifdef CORTEXM3_EFM32_MICRO</span></div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define halInternalUartTxIsIdle(port) COM_InternalTxIsIdle((COM_Port_t) port)</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="preprocessor"></span><span class="keywordtype">bool</span> <a class="code" href="group__serial.htm#gaf0dee46577b66b28822d8a0d0f9c39f8" title="Returns true if the uart transmitter is idle, including the transmit shift register.">halInternalUartTxIsIdle</a>(uint8_t port);</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;<span class="preprocessor"></span><span class="comment">// define the old name for backwards compatibility</span></div>
<div class="line"><a name="l00557"></a><span class="lineno"><a class="code" href="group__serial.htm#ga25a98a82cdeddf2f892d0232b864d790">  557</a></span>&#160;<span class="preprocessor">#define halInternalUart1TxIsIdle() halInternalUartTxIsIdle(1)</span></div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="group__serial.htm#gab994f4b392102158f3632d6fe5e0e4ca" title="Testing function implemented by the upper layer. Determines whether the next packet should be dropped...">serialDropPacket</a>(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__serial.htm#ga278383057324400921c0d3ec8f9319f2" title="When new serial transmission is started and bufferQueue-&gt;nextByte is equal to NULL, this can be called to set up nextByte and lastByte for the next message.">emSerialBufferNextMessageIsr</a>(EmSerialBufferQueue *q);</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__serial.htm#ga83a1e3e5c2b2967c543ab533641408ed" title="When a serial transmission is in progress and bufferQueue-&gt;nextByte has been sent and incremented lea...">emSerialBufferNextBlockIsr</a>(EmSerialBufferQueue *q, uint8_t port);</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;<span class="preprocessor">#if defined(CORTEXM3_EFM32_MICRO)</span></div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="preprocessor"></span>  <span class="comment">// Connect is not currently ready to support VUART on EFR32.</span></div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="preprocessor">  #if defined(EMBER_STACK_CONNECT)</span></div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="preprocessor"></span>    <span class="comment">// This stub should be removed when Connect is ready.</span></div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="preprocessor">    #define halStackReceiveVuartMessage(data, length) </span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #else</span></div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="preprocessor"></span><span class="preprocessor">    #define halStackReceiveVuartMessage(data, length) COM_InternalReceiveData(COM_VCP, data, length)</span></div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #endif</span></div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="preprocessor"></span><span class="keywordtype">void</span> <a class="code" href="group__serial.htm#gaaa462705765e53133edf705e12e8cfad" title="When using a debug build with virtual UART support, this API is called by the stack when virtual UART...">halStackReceiveVuartMessage</a>(uint8_t* data, uint8_t length);</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;<span class="preprocessor">#if defined(EMBER_STACK_CONNECT)</span></div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="preprocessor"></span>  <span class="comment">// This stub should be removed when Connect is ready.</span></div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="preprocessor">  #define emDebugReceiveData()</span></div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__serial.htm#ga8d2d93d79500c2f106b09e0ac7b49c79">halHostFlushBuffers</a>(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;uint16_t <a class="code" href="group__serial.htm#gabff9b5c70adebfe64b6d0116d9a155bf">halHostEnqueueTx</a>(<span class="keyword">const</span> uint8_t *data, uint16_t length);</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__serial.htm#ga456af71802cd14910d2c4084b2bf27b1">halHostFlushTx</a>(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;<span class="comment">// &#39;data&#39; points to the next &#39;length&#39; bytes of input.</span></div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;uint16_t <a class="code" href="group__serial.htm#ga32d84751c1d7b33d771378e4732023c6">serialCopyFromRx</a>(<span class="keyword">const</span> uint8_t *data, uint16_t length);</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;<span class="comment">// tell the upper layer to load serial data</span></div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__serial.htm#gafcfc22a24cfcc5893d2eb2ed97c4fd82">emLoadSerialTx</a>(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="preprocessor">#endif //__HAL_SERIAL_H__</span></div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<hr size="1">
<table border="0" cellspacing="0" cellpadding="0" width=100%>
<tr>
<td><address><small>
Silicon Labs Connect API Reference: For the EZR32 and EFR32 SoC Platforms. Silicon Labs 1.0.
</small></address>
</td>
<td align="right">
<address><small>
</small></address>
</td>
</tr>
</table>
</body>
</html>
