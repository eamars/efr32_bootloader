<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Silicon Labs Connect API Reference: For the EZR32 and EFR32 SoC Platforms</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
</head>
<body>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td><img src="SiliconLabsLogo_Black.jpg" style="padding: 10px;width:40%;height:40%;" /></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Silicon Labs Connect API Reference: For the EZR32 and EFR32 SoC Platforms
   &#160;<span id="projectnumber">Silicon Labs 1.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.2 -->
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__network__management.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a>  </div>
  <div class="headertitle">
<div class="title">Network Management</div>  </div>
<div class="ingroups"><a class="el" href="group__silabs__connect__stack.htm">Silicon Labs Connect Stack API Reference</a></div></div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga99928ccfa7e0c85a052bf61598311fda"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#ga99928ccfa7e0c85a052bf61598311fda">EMBER_MAC_MAX_APP_BEACON_PAYLOAD_LENGTH</a></td></tr>
<tr class="separator:ga99928ccfa7e0c85a052bf61598311fda"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Handlers</h2></td></tr>
<tr class="memitem:ga983d3380bcc653ca78600b42a8f563e9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#ga983d3380bcc653ca78600b42a8f563e9">emberIncomingBeaconHandler</a> (<a class="el" href="group__ember__types.htm#ga5d4c51573517c485740b1a0cc43427cf">EmberPanId</a> panId, <a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a> nodeId, uint8_t payloadLength, uint8_t *payload)</td></tr>
<tr class="separator:ga983d3380bcc653ca78600b42a8f563e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6345e24e1ca5e85186d0d57ce9e895ef"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#ga6345e24e1ca5e85186d0d57ce9e895ef">emberActiveScanCompleteHandler</a> (void)</td></tr>
<tr class="separator:ga6345e24e1ca5e85186d0d57ce9e895ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3615026ecd463642981520892e37c0b2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#ga3615026ecd463642981520892e37c0b2">emberEnergyScanCompleteHandler</a> (int8_t mean, int8_t min, int8_t max, uint16_t variance)</td></tr>
<tr class="separator:ga3615026ecd463642981520892e37c0b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0e01421443eb0e734a8e6094cd0c93e7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#ga0e01421443eb0e734a8e6094cd0c93e7">emberFrequencyHoppingStartClientCompleteHandler</a> (<a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> status)</td></tr>
<tr class="separator:ga0e01421443eb0e734a8e6094cd0c93e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
APIs</h2></td></tr>
<tr class="memitem:ga988e7038cd4c1bfac8a5c17e58c1da69"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#ga988e7038cd4c1bfac8a5c17e58c1da69">emberInit</a> (void)</td></tr>
<tr class="separator:ga988e7038cd4c1bfac8a5c17e58c1da69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaf3d7cad7b0f03d28eea981561db64d8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#gaaf3d7cad7b0f03d28eea981561db64d8">emberTick</a> (void)</td></tr>
<tr class="separator:gaaf3d7cad7b0f03d28eea981561db64d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga47f3cf943b5e9890fa016d871943c705"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#ga47f3cf943b5e9890fa016d871943c705">emberNetworkInit</a> (void)</td></tr>
<tr class="separator:ga47f3cf943b5e9890fa016d871943c705"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafd6899106271d0dfa805795d9807ce6b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#gafd6899106271d0dfa805795d9807ce6b">emberStartActiveScan</a> (uint8_t channel)</td></tr>
<tr class="separator:gafd6899106271d0dfa805795d9807ce6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga46a0030294cb9dfa511500b58843dbe3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#ga46a0030294cb9dfa511500b58843dbe3">emberStartEnergyScan</a> (uint8_t channel, uint8_t samples)</td></tr>
<tr class="separator:ga46a0030294cb9dfa511500b58843dbe3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1509d5a36bbb315f8d3d6d9becf31723"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#ga1509d5a36bbb315f8d3d6d9becf31723">emberSetApplicationBeaconPayload</a> (uint8_t payloadLength, uint8_t *payload)</td></tr>
<tr class="separator:ga1509d5a36bbb315f8d3d6d9becf31723"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf3465df55d552f0c751f338c7c57fc03"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#gaf3465df55d552f0c751f338c7c57fc03">emberFormNetwork</a> (<a class="el" href="structEmberNetworkParameters.htm">EmberNetworkParameters</a> *parameters)</td></tr>
<tr class="separator:gaf3465df55d552f0c751f338c7c57fc03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga261299d4f87e26f7ed76c9e8297f9bde"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#ga261299d4f87e26f7ed76c9e8297f9bde">emberJoinNetworkExtended</a> (<a class="el" href="group__ember__types.htm#ga32518ff17fd5b898204c3e131077a1ac">EmberNodeType</a> nodeType, <a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a> nodeId, <a class="el" href="structEmberNetworkParameters.htm">EmberNetworkParameters</a> *parameters)</td></tr>
<tr class="separator:ga261299d4f87e26f7ed76c9e8297f9bde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa87bbe048e8e1c8adeb89c9962305f96"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#gaa87bbe048e8e1c8adeb89c9962305f96">emberJoinNetwork</a> (<a class="el" href="group__ember__types.htm#ga32518ff17fd5b898204c3e131077a1ac">EmberNodeType</a> nodeType, <a class="el" href="structEmberNetworkParameters.htm">EmberNetworkParameters</a> *parameters)</td></tr>
<tr class="separator:gaa87bbe048e8e1c8adeb89c9962305f96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa92704e81f6767f4c389b07c075e58b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#gaa92704e81f6767f4c389b07c075e58b7">emberPermitJoining</a> (uint8_t duration)</td></tr>
<tr class="separator:gaa92704e81f6767f4c389b07c075e58b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf8bbf94c1a141948a2385316fe8caec1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#gaf8bbf94c1a141948a2385316fe8caec1">emberJoinCommissioned</a> (<a class="el" href="group__ember__types.htm#ga32518ff17fd5b898204c3e131077a1ac">EmberNodeType</a> nodeType, <a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a> nodeId, <a class="el" href="structEmberNetworkParameters.htm">EmberNetworkParameters</a> *parameters)</td></tr>
<tr class="separator:gaf8bbf94c1a141948a2385316fe8caec1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga71a5273859c2c1e828a829d83c1472b6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#ga71a5273859c2c1e828a829d83c1472b6">emberSetAuxiliaryAddressFilteringEntry</a> (<a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a> nodeId, uint8_t entryIndex)</td></tr>
<tr class="separator:ga71a5273859c2c1e828a829d83c1472b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e3608189fb1b85cccf6f728f1e2d444"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#ga1e3608189fb1b85cccf6f728f1e2d444">emberGetAuxiliaryAddressFilteringEntry</a> (uint8_t entryIndex)</td></tr>
<tr class="separator:ga1e3608189fb1b85cccf6f728f1e2d444"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0a01eed7a76d32aa5fcd023146799683"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#ga0a01eed7a76d32aa5fcd023146799683">emberResetNetworkState</a> (void)</td></tr>
<tr class="separator:ga0a01eed7a76d32aa5fcd023146799683"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga174735aa021b0bfaeb0efe46db1cd51b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#ga174735aa021b0bfaeb0efe46db1cd51b">emberFrequencyHoppingStartServer</a> (void)</td></tr>
<tr class="separator:ga174735aa021b0bfaeb0efe46db1cd51b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4d0017a8a72ae58583a522af59025757"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#ga4d0017a8a72ae58583a522af59025757">emberFrequencyHoppingStartClient</a> (<a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a> serverNodeId, <a class="el" href="group__ember__types.htm#ga5d4c51573517c485740b1a0cc43427cf">EmberPanId</a> serverPanId)</td></tr>
<tr class="separator:ga4d0017a8a72ae58583a522af59025757"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa23285027d07a4bdf469d05b934eb4d3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#gaa23285027d07a4bdf469d05b934eb4d3">emberFrequencyHoppingStop</a> (void)</td></tr>
<tr class="separator:gaa23285027d07a4bdf469d05b934eb4d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaca2353735db1ea99e8955f5d12023bad"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__management.htm#gaca2353735db1ea99e8955f5d12023bad">EMBER_MAX_AUXILIARY_ADDRESS_FILTERING_TABLE_LENGTH</a></td></tr>
<tr class="separator:gaca2353735db1ea99e8955f5d12023bad"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Ember Connect API for finding, forming, joining, and leaving Connect networks. </p>
<p>See <a class="el" href="network-management_8h.htm">network-management.h</a> for source code. </p>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a class="anchor" id="ga99928ccfa7e0c85a052bf61598311fda"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define EMBER_MAC_MAX_APP_BEACON_PAYLOAD_LENGTH</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The maximum length in bytes of the application beacon payload. </p>

<p>Definition at line <a class="el" href="network-management_8h_source.htm#l00022">22</a> of file <a class="el" href="network-management_8h_source.htm">network-management.h</a>.</p>

</div>
</div>
<a class="anchor" id="gaca2353735db1ea99e8955f5d12023bad"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define EMBER_MAX_AUXILIARY_ADDRESS_FILTERING_TABLE_LENGTH</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The maximum number of entries the auxiliary address filtering table can hold. </p>

<p>Definition at line <a class="el" href="network-management_8h_source.htm#l00298">298</a> of file <a class="el" href="network-management_8h_source.htm">network-management.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga983d3380bcc653ca78600b42a8f563e9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberIncomingBeaconHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga5d4c51573517c485740b1a0cc43427cf">EmberPanId</a>&#160;</td>
          <td class="paramname"><em>panId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a>&#160;</td>
          <td class="paramname"><em>nodeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>payloadLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>payload</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This stack handler is invoked if a beacon is received during the scanning procedure, if this was initiated by the application with the <a class="el" href="group__network__management.htm#gafd6899106271d0dfa805795d9807ce6b" title="This function will start an active scan. EMBER_SUCCESS signals that the scan successfully started...">emberStartActiveScan</a> stack APIs. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">panId</td><td>The source pan ID of the received beacon.</td></tr>
    <tr><td class="paramname">nodeId</td><td>The source node ID of the received beacon.</td></tr>
    <tr><td class="paramname">payloadLength</td><td>The length in bytes of the application beacon payload of the received beacon.</td></tr>
    <tr><td class="paramname">payload</td><td>A pointer to the application beacon payload of the received beacon. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga6345e24e1ca5e85186d0d57ce9e895ef"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberActiveScanCompleteHandler </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This stack handler is invoked after the application has called the <a class="el" href="group__network__management.htm#gafd6899106271d0dfa805795d9807ce6b" title="This function will start an active scan. EMBER_SUCCESS signals that the scan successfully started...">emberStartActiveScan</a> stack API to inform the application that the scanning procedure has completed. </p>

</div>
</div>
<a class="anchor" id="ga3615026ecd463642981520892e37c0b2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberEnergyScanCompleteHandler </td>
          <td>(</td>
          <td class="paramtype">int8_t&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t&#160;</td>
          <td class="paramname"><em>max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>variance</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This stack handler is invoked after the application has called the <a class="el" href="group__network__management.htm#ga46a0030294cb9dfa511500b58843dbe3" title="This function will kick off an energy scan. EMBER_SUCCESS signals that the scan successfully started...">emberStartEnergyScan</a> stack API to inform the application that the energy scan procedure has completed and to provide statistics. </p>
<p>params mean The average energy detected. params min The minimum energy detected. params max The maximum energy detected. params variance The variance of the energy detected. </p>

</div>
</div>
<a class="anchor" id="ga0e01421443eb0e734a8e6094cd0c93e7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberFrequencyHoppingStartClientCompleteHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td>
          <td class="paramname"><em>status</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This stack handler is invoked after the application has called the <a class="el" href="group__network__management.htm#ga4d0017a8a72ae58583a522af59025757" title="An API to start operating as frequency hopping client and synchronize with the specified server...">emberFrequencyHoppingStartClient</a> stack API to inform the application that the synchronization process with the server has completed. Once the client is synched to a server, it may seamlessly perform the resynchronization process if needed. Sleepy devices in particular periodically perform the resynchronization process. If the client fails a resynchronization process, it will inform the application by invoking the <a class="el" href="group__stack__info.htm#gaac4a45063264fe1b8de41b02f6c3570f" title="A callback invoked when the status of the stack changes.">emberStackStatusHandler</a> handler with EMBER_MAC_SYNC_TIMEOUT status. When this occurs, the client will be no longer synched to the server. </p>
<p>params status An <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating whether the synchronization process with the server was completed successfully or the reason of failure. </p>

</div>
</div>
<a class="anchor" id="ga988e7038cd4c1bfac8a5c17e58c1da69"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> emberInit </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes the radio and the Ember stack. </p>
<p>Device configuration functions must be called before <a class="el" href="group__network__management.htm#ga988e7038cd4c1bfac8a5c17e58c1da69" title="Initializes the radio and the Ember stack.">emberInit()</a> is called.</p>
<dl class="section note"><dt>Note</dt><dd>The application must check the return value of this function. If the initialization fails, normal messaging functions will not be available. Some failure modes are not fatal, but the application must follow certain procedures to permit recovery. Ignoring the return code will result in unpredictable radio and API behavior. (In particular, problems with association will occur.)</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating successful initialization or the reason for failure. </dd></dl>

</div>
</div>
<a class="anchor" id="gaaf3d7cad7b0f03d28eea981561db64d8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberTick </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A periodic tick routine that should be called: </p>
<ul>
<li>in the application's main event loop,</li>
<li>as soon as possible after any radio interrupts, and</li>
<li>after <a class="el" href="group__network__management.htm#ga988e7038cd4c1bfac8a5c17e58c1da69" title="Initializes the radio and the Ember stack.">emberInit()</a>. </li>
</ul>

</div>
</div>
<a class="anchor" id="ga47f3cf943b5e9890fa016d871943c705"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> emberNetworkInit </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Resume network operation after a reboot. </p>
<p>It is required that this be called on boot prior to ANY network operations. This will initialize the networking system and attempt to resume the previous network identity and configuration. If the node was not previously joined, this routine should still be called.</p>
<p>If the node was previously joined to a network it will retain its original type (e.g. coordinator, router, end device, etc.)</p>
<p><a class="el" href="group__status__codes.htm#gaf57eb51e5e4bbe3c83d9eb89c412806a" title="The node has not joined a network.">EMBER_NOT_JOINED</a> is returned if the node is not part of a network.</p>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value that indicates one of the following:<ul>
<li>successful initialization,</li>
<li><a class="el" href="group__status__codes.htm#gaf57eb51e5e4bbe3c83d9eb89c412806a" title="The node has not joined a network.">EMBER_NOT_JOINED</a> if the node is not part of a network, or</li>
<li>the reason for failure. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gafd6899106271d0dfa805795d9807ce6b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> emberStartActiveScan </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function will start an active scan. <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> signals that the scan successfully started. Note that while a scan can be initiated while the node is currently joined to a network, the node will generally be unable to communicate with its PAN during the scan period, so care should be taken when performing scans of any significant duration while presently joined to an existing PAN. Upon receiving a beacon, the <a class="el" href="group__network__management.htm#ga983d3380bcc653ca78600b42a8f563e9" title="This stack handler is invoked if a beacon is received during the scanning procedure, if this was initiated by the application with the emberStartActiveScan stack APIs.">emberIncomingBeaconHandler</a> stack handler shall be called. At the end of the scanning procedure the <a class="el" href="group__network__management.htm#ga6345e24e1ca5e85186d0d57ce9e895ef" title="This stack handler is invoked after the application has called the emberStartActiveScan stack API to ...">emberActiveScanCompleteHandler</a> stack handler shall be called. </p>
<p>Possible error responses and their meanings:</p>
<ul>
<li><a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a>, the node is currently frequency hopping.</li>
<li><a class="el" href="group__status__codes.htm#ga98020573a58567e05175edee487d7488" title="The MAC can&#39;t complete this task because it is scanning.">EMBER_MAC_SCANNING</a>, we are already scanning.</li>
<li><a class="el" href="group__status__codes.htm#ga033b46b66aaa068567b32d6b63a23f69" title="An unsupported channel setting was specified.">EMBER_PHY_INVALID_CHANNEL</a>, the specified channel is not a valid channel on the current platform.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channel</td><td>The channel to scan. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga46a0030294cb9dfa511500b58843dbe3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> emberStartEnergyScan </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>samples</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function will kick off an energy scan. <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> signals that the scan successfully started. Note that while a scan can be initiated while the node is currently joined to a network, the node will generally be unable to communicate with its PAN during the scan period, so care should be taken when performing scans of any significant duration while presently joined to an existing PAN. At the end of the scanning procedure the <a class="el" href="group__network__management.htm#ga3615026ecd463642981520892e37c0b2" title="This stack handler is invoked after the application has called the emberStartEnergyScan stack API to ...">emberEnergyScanCompleteHandler</a> stack handler shall be called. </p>
<p>Possible error responses and their meanings:</p>
<ul>
<li><a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a>, the samples parameter is invalid or the node is currently frequency hopping.</li>
<li><a class="el" href="group__status__codes.htm#ga98020573a58567e05175edee487d7488" title="The MAC can&#39;t complete this task because it is scanning.">EMBER_MAC_SCANNING</a>, we are already scanning.</li>
<li><a class="el" href="group__status__codes.htm#ga033b46b66aaa068567b32d6b63a23f69" title="An unsupported channel setting was specified.">EMBER_PHY_INVALID_CHANNEL</a>, the specified channel is not a valid channel on the current platform.</li>
<li><a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a>, the stack doesn't have enough memory at the moment to perform the requested scan.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channel</td><td>The channel to scan.</td></tr>
    <tr><td class="paramname">samples</td><td>The number of energy samples to be produced. Each sample is performed averaging the detected energy over 8 symbols time (the actual length depends on the selected PHY configuration). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga1509d5a36bbb315f8d3d6d9becf31723"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> emberSetApplicationBeaconPayload </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>payloadLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>payload</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This API allows the application to set the application portion of the beacon payload. This is by default set to the empty string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">payloadLength</td><td>The length in bytes of the application beacon payload to be set. This value can not exceed <a class="el" href="group__network__management.htm#ga99928ccfa7e0c85a052bf61598311fda" title="The maximum length in bytes of the application beacon payload.">EMBER_MAC_MAX_APP_BEACON_PAYLOAD_LENGTH</a>.</td></tr>
    <tr><td class="paramname">payload</td><td>A pointer to the application beacon payload to be set.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the application beacon payload was successfully set, otherwise an <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating the reason of failure. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf3465df55d552f0c751f338c7c57fc03"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> emberFormNetwork </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberNetworkParameters.htm">EmberNetworkParameters</a> *&#160;</td>
          <td class="paramname"><em>parameters</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Forms a new network by becoming the coordinator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">parameters</td><td>An <a class="el" href="structEmberNetworkParameters.htm" title="Holds network parameters.">EmberNetworkParameters</a> value that specifies the network parameters of the network to be formed.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value that indicates either the successful formation of the new network, or the reason that the network formation failed. </dd></dl>

</div>
</div>
<a class="anchor" id="ga261299d4f87e26f7ed76c9e8297f9bde"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> emberJoinNetworkExtended </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga32518ff17fd5b898204c3e131077a1ac">EmberNodeType</a>&#160;</td>
          <td class="paramname"><em>nodeType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a>&#160;</td>
          <td class="paramname"><em>nodeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberNetworkParameters.htm">EmberNetworkParameters</a> *&#160;</td>
          <td class="paramname"><em>parameters</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Causes the stack to associate with the network using the specified network parameters. It can take several seconds for the stack to associate with the local network. Do not send messages until a call to the <a class="el" href="group__stack__info.htm#gaac4a45063264fe1b8de41b02f6c3570f" title="A callback invoked when the status of the stack changes.">emberStackStatusHandler()</a> callback informs you that the stack is up. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">nodeType</td><td>Specification of the role that this node will have in the network. This role can be <a class="el" href="group__ember__types.htm#gga32518ff17fd5b898204c3e131077a1aca0a2ec7ed8a79468a3dc9b54bea3a48aa">EMBER_STAR_RANGE_EXTENDER</a>, <a class="el" href="group__ember__types.htm#gga32518ff17fd5b898204c3e131077a1aca6daecc08ab5e3a4de806fbbd2c5efdb1">EMBER_STAR_END_DEVICE</a> or <a class="el" href="group__ember__types.htm#gga32518ff17fd5b898204c3e131077a1aca0eaebd6852e29c190f39206d7125025c">EMBER_STAR_SLEEPY_END_DEVICE</a>. If the node is frequency hopping, the role can not be <a class="el" href="group__ember__types.htm#gga32518ff17fd5b898204c3e131077a1aca0a2ec7ed8a79468a3dc9b54bea3a48aa">EMBER_STAR_RANGE_EXTENDER</a>.</td></tr>
    <tr><td class="paramname">nodeId</td><td>An <a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce" title="802.15.4 node ID.">EmberNodeId</a> value indicating the short ID the node intends to use for addressing purposes. If this value is <a class="el" href="group__ember__types.htm#gaab5d18192499c30084dc11d1931bfeac" title="A distinguished network ID that will never be assigned to any node. Used to indicate the absence of a...">EMBER_NULL_NODE_ID</a> the network coordinator will allocate a new short address. Addresses should be allocated by the coordinator unless there is a specific need to join a network with a specific ID. If a specific ID is used, uniqueness should be guaranteed across the entire network by the application, via some out of band means.</td></tr>
    <tr><td class="paramname">parameters</td><td>An <a class="el" href="structEmberNetworkParameters.htm" title="Holds network parameters.">EmberNetworkParameters</a> value that specifies the network parameters of the network with which the node should associate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value that indicates either:<ul>
<li>that the association process began successfully, or</li>
<li>the reason for failure. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gaa87bbe048e8e1c8adeb89c9962305f96"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> emberJoinNetwork </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga32518ff17fd5b898204c3e131077a1ac">EmberNodeType</a>&#160;</td>
          <td class="paramname"><em>nodeType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberNetworkParameters.htm">EmberNetworkParameters</a> *&#160;</td>
          <td class="paramname"><em>parameters</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Causes the stack to associate with the network using the specified network parameters. The network ID shall be assigned by the network coordinator. It can take several seconds for the stack to associate with the local network. Do not send messages until a call to the <a class="el" href="group__stack__info.htm#gaac4a45063264fe1b8de41b02f6c3570f" title="A callback invoked when the status of the stack changes.">emberStackStatusHandler()</a> callback informs you that the stack is up. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">nodeType</td><td>Specification of the role that this node will have in the network. This role can be <a class="el" href="group__ember__types.htm#gga32518ff17fd5b898204c3e131077a1aca0a2ec7ed8a79468a3dc9b54bea3a48aa">EMBER_STAR_RANGE_EXTENDER</a>, <a class="el" href="group__ember__types.htm#gga32518ff17fd5b898204c3e131077a1aca6daecc08ab5e3a4de806fbbd2c5efdb1">EMBER_STAR_END_DEVICE</a> or <a class="el" href="group__ember__types.htm#gga32518ff17fd5b898204c3e131077a1aca0eaebd6852e29c190f39206d7125025c">EMBER_STAR_SLEEPY_END_DEVICE</a>. If the node is frequency hopping, the role can not be <a class="el" href="group__ember__types.htm#gga32518ff17fd5b898204c3e131077a1aca0a2ec7ed8a79468a3dc9b54bea3a48aa">EMBER_STAR_RANGE_EXTENDER</a>.</td></tr>
    <tr><td class="paramname">parameters</td><td>An <a class="el" href="structEmberNetworkParameters.htm" title="Holds network parameters.">EmberNetworkParameters</a> value that specifies the network parameters of the network with which the node should associate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value that indicates either:<ul>
<li>that the association process began successfully, or</li>
<li>the reason for failure. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gaa92704e81f6767f4c389b07c075e58b7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> emberPermitJoining </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>duration</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tells the stack to allow other nodes to join the network with this node as their parent. Joining is initially disabled by default. This function may only be called after the node is part of a network and the stack is up. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">duration</td><td>A value of 0x00 disables joining. A value of 0xFF enables joining indefinitely. Any other value enables joining for that number of seconds.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the permit joining was successfully set, otherwise an <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating the reason of failure. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf8bbf94c1a141948a2385316fe8caec1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> emberJoinCommissioned </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga32518ff17fd5b898204c3e131077a1ac">EmberNodeType</a>&#160;</td>
          <td class="paramname"><em>nodeType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a>&#160;</td>
          <td class="paramname"><em>nodeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberNetworkParameters.htm">EmberNetworkParameters</a> *&#160;</td>
          <td class="paramname"><em>parameters</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Causes the stack to go up with the passed network parameters without performing any over-the-air message exchange. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">nodeType</td><td>Specifies the role that this node will have in the network. The only device types allowed in the commissioning API are <a class="el" href="group__ember__types.htm#gga32518ff17fd5b898204c3e131077a1aca3fa9b71dee0ccb04481b5f82e02df6e1">EMBER_DIRECT_DEVICE</a> and <a class="el" href="group__ember__types.htm#gga32518ff17fd5b898204c3e131077a1aca7d3a606b69f1d358020d64ef5a6bc5c3">EMBER_MAC_MODE_DEVICE</a>.</td></tr>
    <tr><td class="paramname">nodeId</td><td>An <a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce" title="802.15.4 node ID.">EmberNodeId</a> value that specifies the short ID the node shall have. The passed node ID must be a valid short address (any value other than <a class="el" href="group__ember__types.htm#gaab5d18192499c30084dc11d1931bfeac" title="A distinguished network ID that will never be assigned to any node. Used to indicate the absence of a...">EMBER_NULL_NODE_ID</a> or <a class="el" href="group__ember__types.htm#gaead827acd39e0bbba3d6e6090c6d83f8">EMBER_BROADCAST_ADDRESS</a>).</td></tr>
    <tr><td class="paramname">parameters</td><td>An <a class="el" href="structEmberNetworkParameters.htm" title="Holds network parameters.">EmberNetworkParameters</a> value that specifies the network parameters of the network the node should participate in.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value that indicates either:<ul>
<li>that the node successfully commissioned the passed network parameters</li>
<li>the reason for failure. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga71a5273859c2c1e828a829d83c1472b6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> emberSetAuxiliaryAddressFilteringEntry </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a>&#160;</td>
          <td class="paramname"><em>nodeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>entryIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets an entry in the auxiliary address filtering table at a given address. Nodes of <a class="el" href="group__ember__types.htm#gga32518ff17fd5b898204c3e131077a1aca3fa9b71dee0ccb04481b5f82e02df6e1">EMBER_DIRECT_DEVICE</a> device type can receive incoming messages destined to any of the node IDs in the auxiliary address filtering table (while also receiving messages destined to actual node ID). If the passed node ID is <a class="el" href="group__ember__types.htm#gaab5d18192499c30084dc11d1931bfeac" title="A distinguished network ID that will never be assigned to any node. Used to indicate the absence of a...">EMBER_NULL_NODE_ID</a>, the entry shall be cleared. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">nodeId</td><td>An <a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce" title="802.15.4 node ID.">EmberNodeId</a> value to be added to the auxiliary address filtering table at the passed entry index.</td></tr>
    <tr><td class="paramname">entryIndex</td><td>The index of the auxiliary address filtering table entry to be set.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if auxiliary address filtering table entry was successfully set. An <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> if the passed entry index is invalid. </dd></dl>

</div>
</div>
<a class="anchor" id="ga1e3608189fb1b85cccf6f728f1e2d444"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a> emberGetAuxiliaryAddressFilteringEntry </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>entryIndex</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Retrieves the content of the auxiliary address filtering table at a given address. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">entryIndex</td><td>The index in the auxiliary address filtering table entry to be retrieved.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce" title="802.15.4 node ID.">EmberNodeId</a> value of <a class="el" href="group__ember__types.htm#gaab5d18192499c30084dc11d1931bfeac" title="A distinguished network ID that will never be assigned to any node. Used to indicate the absence of a...">EMBER_NULL_NODE_ID</a> if the passed entry index is invalid or if the passed entry index refers to an unused entry. Otherwise it returns the content of the auxiliary address filtering table entry corresponding to be passed entry index. </dd></dl>

</div>
</div>
<a class="anchor" id="ga0a01eed7a76d32aa5fcd023146799683"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberResetNetworkState </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Forgets the current network and reverts to a network status of <a class="el" href="group__ember__types.htm#gga46491008c24c4c89c2b6c8d28d20b88aa3585607b74367c19bf415df95b4e6a59">EMBER_NO_NETWORK</a>. </p>

</div>
</div>
<a class="anchor" id="ga174735aa021b0bfaeb0efe46db1cd51b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> emberFrequencyHoppingStartServer </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>An API to start operating as frequency hopping server. This API can only be invoked when the node is joined to a network. </p>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the node successfully initiated frequency hopping server operations. An <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> if the node is not currently joined to a network or if the node is already performing frequency hopping. </dd></dl>

</div>
</div>
<a class="anchor" id="ga4d0017a8a72ae58583a522af59025757"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> emberFrequencyHoppingStartClient </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a>&#160;</td>
          <td class="paramname"><em>serverNodeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga5d4c51573517c485740b1a0cc43427cf">EmberPanId</a>&#160;</td>
          <td class="paramname"><em>serverPanId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>An API to start operating as frequency hopping client and synchronize with the specified server. This API can be invoked on nodes that are already joined to a network and nodes that are not joined to a network yet. If the node is already performing frequency hopping, this API shall return <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a>. If this API returns <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a>, the <a class="el" href="group__network__management.htm#ga0e01421443eb0e734a8e6094cd0c93e7" title="This stack handler is invoked after the application has called the emberFrequencyHoppingStartClient s...">emberFrequencyHoppingStartClientCompleteHandler</a> will be invoked asynchronously to inform the application whether the node successfully synchronized with the specified server or to inform the application of the reason of failure. Once the client is synched to a server, it may seamlessly perform the resynchronization process if needed. Sleepy devices in particular periodically perform the resynchronization process. If the client fails a resynchronization process, it will inform the application by invoking the <a class="el" href="group__stack__info.htm#gaac4a45063264fe1b8de41b02f6c3570f" title="A callback invoked when the status of the stack changes.">emberStackStatusHandler</a> handler with EMBER_MAC_SYNC_TIMEOUT status. When this occurs, the client will be no longer synched to the server. The application may elect to attempt a new synchronization process by invoking this API again. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">serverNodeId</td><td>An <a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce" title="802.15.4 node ID.">EmberNodeId</a> value indicating the node ID of the server to synchronize with.</td></tr>
    <tr><td class="paramname">serverPanId</td><td>An <a class="el" href="group__ember__types.htm#ga5d4c51573517c485740b1a0cc43427cf" title="802.15.4 PAN ID.">EmberPanId</a> value indicating the PAN ID of the server to synchronize with. Note that this parameter is meaningful only if the node is not currently joined to any network.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> indicating that the node successfully initiated the synchronization process with the server, otherwise an <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating the reason of failure. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa23285027d07a4bdf469d05b934eb4d3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> emberFrequencyHoppingStop </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>An API to stop frequency hopping. This API can only be invoked when the node is frequency hopping. </p>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> indicating that the node successfully stopped frequency hopping. An <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> if the node is not currently frequency hopping. </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<hr size="1">
<table border="0" cellspacing="0" cellpadding="0" width=100%>
<tr>
<td><address><small>
Silicon Labs Connect API Reference: For the EZR32 and EFR32 SoC Platforms. Silicon Labs 1.0.
</small></address>
</td>
<td align="right">
<address><small>
</small></address>
</td>
</tr>
</table>
</body>
</html>
