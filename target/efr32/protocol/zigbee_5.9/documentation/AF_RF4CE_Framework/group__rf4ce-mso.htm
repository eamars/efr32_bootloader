<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Application Framework API Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
</head>
<body>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td><img src="SiliconLabsLogo_Black.jpg" style="padding: 10px;width:40%;height:40%;" /></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Application Framework API Reference
   &#160;<span id="projectnumber">Ember ZigBee RF4CE Application Framework</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.2 -->
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__rf4ce-mso.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">RF4CE Multiple System Operators Profile</div>  </div>
<div class="ingroups"><a class="el" href="group__rf4ce__framework.htm">Ember ZigBee RF4CE API Reference</a></div></div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:gab0bc492232dde49da551682899a907aa"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce-mso.htm#gab0bc492232dde49da551682899a907aa">EMBER_AF_PLUGIN_RF4CE_MSO_IS_RECIPIENT</a></td></tr>
<tr class="separator:gab0bc492232dde49da551682899a907aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gad32e3fa2b54db78a5e42e5f84aad73cc"><td class="memItemLeft" align="right" valign="top">EmberStatus&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce-mso.htm#gad32e3fa2b54db78a5e42e5f84aad73cc">emberAfRf4ceMsoBind</a> (void)</td></tr>
<tr class="separator:gad32e3fa2b54db78a5e42e5f84aad73cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga410a5dec150e3ab91ee5b015f724e800"><td class="memItemLeft" align="right" valign="top">EmberStatus&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce-mso.htm#ga410a5dec150e3ab91ee5b015f724e800">emberAfRf4ceMsoWatchdogKick</a> (uint16_t validationWatchdogTimeMs)</td></tr>
<tr class="separator:ga410a5dec150e3ab91ee5b015f724e800"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8e47dbcc55e2686978dbddaabaedb235"><td class="memItemLeft" align="right" valign="top">EmberStatus&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce-mso.htm#ga8e47dbcc55e2686978dbddaabaedb235">emberAfRf4ceMsoValidate</a> (void)</td></tr>
<tr class="separator:ga8e47dbcc55e2686978dbddaabaedb235"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6b7597be15c7900fa5ba3cff45d1519"><td class="memItemLeft" align="right" valign="top">EmberStatus&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce-mso.htm#gac6b7597be15c7900fa5ba3cff45d1519">emberAfRf4ceMsoTerminateValidation</a> (void)</td></tr>
<tr class="separator:gac6b7597be15c7900fa5ba3cff45d1519"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga997c001574b83ae07d7ada7e440ec192"><td class="memItemLeft" align="right" valign="top">EmberStatus&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce-mso.htm#ga997c001574b83ae07d7ada7e440ec192">emberAfRf4ceMsoAbortValidation</a> (bool fullAbort)</td></tr>
<tr class="separator:ga997c001574b83ae07d7ada7e440ec192"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4ececd68cebf17cff1e474e1d7bd8bfb"><td class="memItemLeft" align="right" valign="top">EmberStatus&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce-mso.htm#ga4ececd68cebf17cff1e474e1d7bd8bfb">emberAfRf4ceMsoUserControlPress</a> (uint8_t pairingIndex, <a class="el" href="rf4ce-mso-types_8h.htm#a9450d2bba238da0822db3c640fd6e3da">EmberAfRf4ceMsoKeyCode</a> rcCommandCode, const uint8_t *rcCommandPayload, uint8_t rcCommandPayloadLength, bool atomic)</td></tr>
<tr class="separator:ga4ececd68cebf17cff1e474e1d7bd8bfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaf30e9691f2a7628b7b2170fb6ead836"><td class="memItemLeft" align="right" valign="top">EmberStatus&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce-mso.htm#gaaf30e9691f2a7628b7b2170fb6ead836">emberAfRf4ceMsoUserControlRelease</a> (uint8_t pairingIndex, <a class="el" href="rf4ce-mso-types_8h.htm#a9450d2bba238da0822db3c640fd6e3da">EmberAfRf4ceMsoKeyCode</a> rcCommandCode)</td></tr>
<tr class="separator:gaaf30e9691f2a7628b7b2170fb6ead836"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab18ff4952f4b08870866f524b2516dab"><td class="memItemLeft" align="right" valign="top">EmberStatus&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce-mso.htm#gab18ff4952f4b08870866f524b2516dab">emberAfRf4ceMsoSetAttributeRequest</a> (uint8_t pairingIndex, <a class="el" href="rf4ce-mso-types_8h.htm#ac5c569b3a3e4a82b35d39687fc08f020">EmberAfRf4ceMsoAttributeId</a> attributeId, uint8_t index, uint8_t valueLen, const uint8_t *value)</td></tr>
<tr class="separator:gab18ff4952f4b08870866f524b2516dab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf6c54ccb378c929c502b33450bf5560c"><td class="memItemLeft" align="right" valign="top">EmberStatus&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce-mso.htm#gaf6c54ccb378c929c502b33450bf5560c">emberAfRf4ceMsoGetAttributeRequest</a> (uint8_t pairingIndex, <a class="el" href="rf4ce-mso-types_8h.htm#ac5c569b3a3e4a82b35d39687fc08f020">EmberAfRf4ceMsoAttributeId</a> attributeId, uint8_t index, uint8_t valueLen)</td></tr>
<tr class="separator:gaf6c54ccb378c929c502b33450bf5560c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1d115554d1c8f33bfc75f1f0c188b5b8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce-mso.htm#ga1d115554d1c8f33bfc75f1f0c188b5b8">emberAfRf4ceMsoIrRfDatabaseEntryUseDefault</a> (const <a class="el" href="structEmberAfRf4ceMsoIrRfDatabaseEntry.htm">EmberAfRf4ceMsoIrRfDatabaseEntry</a> *entry)</td></tr>
<tr class="separator:ga1d115554d1c8f33bfc75f1f0c188b5b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadd826daa35300c98e60643626be631d9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce-mso.htm#gadd826daa35300c98e60643626be631d9">emberAfRf4ceMsoIrRfDatabaseEntryHasRfPressedDescriptor</a> (const <a class="el" href="structEmberAfRf4ceMsoIrRfDatabaseEntry.htm">EmberAfRf4ceMsoIrRfDatabaseEntry</a> *entry)</td></tr>
<tr class="separator:gadd826daa35300c98e60643626be631d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga59d567b81dd6579afd11fe65dfc728c1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce-mso.htm#ga59d567b81dd6579afd11fe65dfc728c1">emberAfRf4ceMsoIrRfDatabaseEntryHasRfRepeatedDescriptor</a> (const <a class="el" href="structEmberAfRf4ceMsoIrRfDatabaseEntry.htm">EmberAfRf4ceMsoIrRfDatabaseEntry</a> *entry)</td></tr>
<tr class="separator:ga59d567b81dd6579afd11fe65dfc728c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3eb10b1819aba144c5d65a86d96255fc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce-mso.htm#ga3eb10b1819aba144c5d65a86d96255fc">emberAfRf4ceMsoIrRfDatabaseEntryHasRfReleasedDescriptor</a> (const <a class="el" href="structEmberAfRf4ceMsoIrRfDatabaseEntry.htm">EmberAfRf4ceMsoIrRfDatabaseEntry</a> *entry)</td></tr>
<tr class="separator:ga3eb10b1819aba144c5d65a86d96255fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacee201433446947049244ab8d11280db"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce-mso.htm#gacee201433446947049244ab8d11280db">emberAfRf4ceMsoIrRfDatabaseEntryGetMinimumNumberOfTransmissions</a> (const <a class="el" href="structEmberAfRf4ceMsoIrRfDatabaseRfDescriptor.htm">EmberAfRf4ceMsoIrRfDatabaseRfDescriptor</a> *rfDescriptor)</td></tr>
<tr class="separator:gacee201433446947049244ab8d11280db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga830d837e26c3151fa8b1d77323a8e0be"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce-mso.htm#ga830d837e26c3151fa8b1d77323a8e0be">emberAfRf4ceMsoIrRfDatabaseEntryShouldTransmitUntilRelease</a> (const <a class="el" href="structEmberAfRf4ceMsoIrRfDatabaseRfDescriptor.htm">EmberAfRf4ceMsoIrRfDatabaseRfDescriptor</a> *rfDescriptor)</td></tr>
<tr class="separator:ga830d837e26c3151fa8b1d77323a8e0be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5c0ea6f77e721376e73deede865fdb43"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce-mso.htm#ga5c0ea6f77e721376e73deede865fdb43">emberAfRf4ceMsoIrRfDatabaseEntryHasIrDescriptor</a> (const <a class="el" href="structEmberAfRf4ceMsoIrRfDatabaseEntry.htm">EmberAfRf4ceMsoIrRfDatabaseEntry</a> *entry)</td></tr>
<tr class="separator:ga5c0ea6f77e721376e73deede865fdb43"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>The RF4CE Multiple System Operators (MSO) plugin implements the MSO profile. The profile uses the simple user control procedure from the ZigBee Remote Control (ZRC) profile with a more robust discovery, pairing, and validating procedure for binding devices. The plugin manages these procedures for both originators and recipients.</p>
<p>This plugin supports originators and recipients. Originators send action messages to recipients after binding with them. Unlike ZRC, originators must be controllers. Recipients must be targets, as in ZRC. Both controllers and targets must start general network operations before beginning MSO-specific operations. Network operations should be started by calling <a class="el" href="group__rf4ce-profile.htm#ga8273f29ea6ef5a79f0da3e64f9b0afbd" title="Start the RF4CE network operations.">emberAfRf4ceStart</a> in the <a class="el" href="group__rf4ce-profile.htm">RF4CE Profile Support</a> plugin.</p>
<p>Once network operations have started, controllers can initiate the binding procedure by calling <a class="el" href="group__rf4ce-mso.htm#gad32e3fa2b54db78a5e42e5f84aad73cc" title="Initiate the binding procedure.">emberAfRf4ceMsoBind</a>. The plugin will perform discovery for matching targets in range. Potential targets are ranked according to an algorithm described in the MSO specification. If one or more potential targets are identified, the plugin will attempt to pair with the highest-ranked target. Once the temporary pairing is established, the validation procedure begins. Validation is implementation-specific, but may be as simple as a button press on the target or a more involved challenge- response mechanism between target and originator. Only if validation is successful are the controller and target considered bound. If any step fails, the plugin will restart the binding procedure using the target that has the next-highest rank. At the conclusion of the binding procedure, the plugin will call <a class="el" href="group__rf4ce-mso-callbacks.htm#gaadff7225b25f8a97f79c20c4903c8c49" title="Binding Complete.">emberAfPluginRf4ceMsoBindingCompleteCallback</a> to indicate whether binding completed successfully with a target and, if so, which pairing index has been assigned to that target.</p>
<p>The plugin manages discovery and pairing for targets on behalf of the device. If pairing completes successfully, the plugin will call <a class="el" href="group__rf4ce-mso-callbacks.htm#ga29fa687370b6211733f12e9edd0236f5" title="Start Validation.">emberAfPluginRf4ceMsoStartValidationCallback</a> so that the device can begin the implementation-specific validation procedure. During validation, the application must periodically call <a class="el" href="group__rf4ce-mso.htm#ga410a5dec150e3ab91ee5b015f724e800" title="Kick the watchdog.">emberAfRf4ceMsoWatchdogKick</a> to prevent a validation timeout. Once the application determines the controller has validated successfully, it should call <a class="el" href="group__rf4ce-mso.htm#ga8e47dbcc55e2686978dbddaabaedb235" title="Validate a controller.">emberAfRf4ceMsoValidate</a>. If the controller fails validation, the application may instead call <a class="el" href="group__rf4ce-mso.htm#gac6b7597be15c7900fa5ba3cff45d1519" title="Terminate the validation procedure.">emberAfRf4ceMsoTerminateValidation</a> or <a class="el" href="group__rf4ce-mso.htm#ga997c001574b83ae07d7ada7e440ec192" title="Abort the validation procedure.">emberAfRf4ceMsoAbortValidation</a>. Once binding completes, the plugin will call <a class="el" href="group__rf4ce-mso-callbacks.htm#gaadff7225b25f8a97f79c20c4903c8c49" title="Binding Complete.">emberAfPluginRf4ceMsoBindingCompleteCallback</a> to indicate whether binding completed successfully with a controller and, if so, which pairing index has been assigned to that controller.</p>
<p>Following a successful discovery and pairing, controllers may send user control messages to targets by calling <a class="el" href="group__rf4ce-mso.htm#ga4ececd68cebf17cff1e474e1d7bd8bfb" title="Send indications of user control presses and repeats to a pairing index.">emberAfRf4ceMsoUserControlPress</a>. In response, the plugin will transmit a user control press message to the indicated target with the HDMI-CEC command code and payload. If the press is atomic, the plugin performs no additional processing. Otherwise, the plugin will repeatedly transmit user control repeat messages at fixed intervals until <a class="el" href="group__rf4ce-mso.htm#gaaf30e9691f2a7628b7b2170fb6ead836" title="Send indications of user control release to a pairing index.">emberAfRf4ceMsoUserControlRelease</a> is called. The interval at which user control repeat messages are transmitted is configurable in the plugin options.</p>
<p>For targets, the plugin will keep track of incoming user control messages. Each time a user control press command is received, the plugin will call <a class="el" href="group__rf4ce-mso-callbacks.htm#gaa4de6034a26de7f01cf29e38856c4631" title="User Control.">emberAfPluginRf4ceMsoUserControlCallback</a> with its HDMI-CEC command code and payload. The plugin will then wait for a fixed duration for a corresponding user control repeat or release messages. If a user control repeat message is received within the timeout, the plugin will reset its timer and wait for the next message. If a user control repeat message is not received within the timeout or if a user control release is received, the plugin will call <a class="el" href="group__rf4ce-mso-callbacks.htm#gaa4de6034a26de7f01cf29e38856c4631" title="User Control.">emberAfPluginRf4ceMsoUserControlCallback</a> with an indication that the user control has stopped. The timeout for receiving repeat messages is configurable in the plugin options. Note that the plugin will not call <a class="el" href="group__rf4ce-mso-callbacks.htm#gaa4de6034a26de7f01cf29e38856c4631" title="User Control.">emberAfPluginRf4ceMsoUserControlCallback</a> for repeat messages that follow a press message.</p>
<p>The plugin is capable of keeping track of a fixed number of simultaneous incoming and outgoing user control messages. The limits are configurable in the plugin options.</p>
<p>This plugin manages the state of the receiver by calling <a class="el" href="group__rf4ce-profile.htm#gab5ce4aceb169618beb9d7c0b4b2760bb" title="Enable or disable the receiver for the given profile.">emberAfRf4ceRxEnable</a> using <a class="el" href="rf4ce-profile-types_8h.htm#a3b0333ab61ac480d936d7fa3d862df98a0662510c606d95121aeeb514d83cca0e">EMBER_AF_RF4CE_PROFILE_MSO</a> as the profile id. If the application also wishes to manage the receiver, it should do so using <a class="el" href="rf4ce-profile-types_8h.htm#a3b0333ab61ac480d936d7fa3d862df98ae6abea877d013ee547116399d7ecc9f3">EMBER_AF_RF4CE_PROFILE_WILDCARD</a> as the profile id or by calling <a class="el" href="group__rf4ce-profile.htm#ga1ef759d8fcf407c0035f651ec3f66c09" title="Set the power-saving parameters.">emberAfRf4ceSetPowerSavingParameters</a>.</p>
<p>This plugin utilizes the discovery, pairing, sending and receiving, and power-saving functionality provided by the <a class="el" href="group__rf4ce-profile.htm">RF4CE Profile Support</a> plugin. Support for the optional IR-RF database feature is provided by the <a class="el" href="group__rf4ce-mso-ir-rf-database-originator.htm">RF4CE Multiple System Operators IR-RF Database Originator</a> and <a class="el" href="group__rf4ce-mso-ir-rf-database-recipient.htm">RF4CE Multiple System Operators IR-RF Database Recipient</a> plugins. </p>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a class="anchor" id="gab0bc492232dde49da551682899a907aa"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define EMBER_AF_PLUGIN_RF4CE_MSO_IS_RECIPIENT</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set if the RF4CE Profile plugin was configured as a target. </p>

<p>Definition at line <a class="el" href="rf4ce-mso_8h_source.htm#l00103">103</a> of file <a class="el" href="rf4ce-mso_8h_source.htm">rf4ce-mso.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="gad32e3fa2b54db78a5e42e5f84aad73cc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EmberStatus emberAfRf4ceMsoBind </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initiate the binding procedure. </p>
<p>The plugin begins the binding procedure by searching for and ranking potential targets with which to pair. If one or more targets is identified, the plugin will create a temporary pairing with the highest-ranked target. Once the temporary pairing completes, the application should perform the required validation procedure. During this time, the plugin will periodically query the target for the validation status. If validation completes successfully, the plugin will notify the application by calling <a class="el" href="group__rf4ce-mso-callbacks.htm#gaadff7225b25f8a97f79c20c4903c8c49" title="Binding Complete.">emberAfPluginRf4ceMsoBindingCompleteCallback</a>. If the temporary pairing fails or if validation fails, the plugin will attempt to bind to the target with the next-highest rank. If the plugin fails to bind with any target, it will call <a class="el" href="group__rf4ce-mso-callbacks.htm#gaadff7225b25f8a97f79c20c4903c8c49" title="Binding Complete.">emberAfPluginRf4ceMsoBindingCompleteCallback</a> with an error.</p>
<p>This function is only applicable to target devices.</p>
<dl class="section return"><dt>Returns</dt><dd>An ::EmberStatus value that indicates the success or failure of the command. </dd></dl>

</div>
</div>
<a class="anchor" id="ga410a5dec150e3ab91ee5b015f724e800"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EmberStatus emberAfRf4ceMsoWatchdogKick </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>validationWatchdogTimeMs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Kick the watchdog. </p>
<p>If the plugin was configured with a non-zero initial watchdog time, this function must be called during validation to prevent the watchdog timer from expiring and triggering a TIMEOUT failure. The first call should occur within the initial watchdog time of the call to <a class="el" href="group__rf4ce-mso-callbacks.htm#ga29fa687370b6211733f12e9edd0236f5" title="Start Validation.">emberAfPluginRf4ceMsoStartValidationCallback</a>. To avoid further TIMEOUTs, each call to this function must either be followed either by a subsequent call within the provided timeout or by a call to <a class="el" href="group__rf4ce-mso.htm#ga8e47dbcc55e2686978dbddaabaedb235" title="Validate a controller.">emberAfRf4ceMsoValidate</a>, <a class="el" href="group__rf4ce-mso.htm#gac6b7597be15c7900fa5ba3cff45d1519" title="Terminate the validation procedure.">emberAfRf4ceMsoTerminateValidation</a>, or <a class="el" href="group__rf4ce-mso.htm#ga997c001574b83ae07d7ada7e440ec192" title="Abort the validation procedure.">emberAfRf4ceMsoAbortValidation</a>.</p>
<p>This function is only applicable to target devices.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">validationWatchdogTimeMs</td><td>The time in milliseconds to reset the watchdog timer or zero to disable the watchdog timer.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An ::EmberStatus value that indicates the success or failure of the command. </dd></dl>

</div>
</div>
<a class="anchor" id="ga8e47dbcc55e2686978dbddaabaedb235"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EmberStatus emberAfRf4ceMsoValidate </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validate a controller. </p>
<p>This function can be called to indicate the validation procedure completed successfully. It should be called if the controller has performed the required validation procedure satisfactorily.</p>
<p>This function is only applicable to target devices.</p>
<dl class="section return"><dt>Returns</dt><dd>An ::EmberStatus value that indicates the success or failure of the command. </dd></dl>

</div>
</div>
<a class="anchor" id="gac6b7597be15c7900fa5ba3cff45d1519"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EmberStatus emberAfRf4ceMsoTerminateValidation </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Terminate the validation procedure. </p>
<p>This function can be called to terminate the validation procedure. It should be called if the controller fails validation.</p>
<p>This function is only applicable to target devices.</p>
<dl class="section return"><dt>Returns</dt><dd>An ::EmberStatus value that indicates the success or failure of the command. </dd></dl>

</div>
</div>
<a class="anchor" id="ga997c001574b83ae07d7ada7e440ec192"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EmberStatus emberAfRf4ceMsoAbortValidation </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>fullAbort</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Abort the validation procedure. </p>
<p>This function can be called to abort the validation procedure. It should be called in response to a controller sending the Abort or FullAbort keys during validation.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fullAbort</td><td>true if the controller should not attempt to validate with other controllers or false if the controller should attempt to validate with other controller.</td></tr>
  </table>
  </dd>
</dl>
<p>This function is only applicable to target devices.</p>
<dl class="section return"><dt>Returns</dt><dd>An ::EmberStatus value that indicates the success or failure of the command. </dd></dl>

</div>
</div>
<a class="anchor" id="ga4ececd68cebf17cff1e474e1d7bd8bfb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EmberStatus emberAfRf4ceMsoUserControlPress </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>pairingIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="rf4ce-mso-types_8h.htm#a9450d2bba238da0822db3c640fd6e3da">EmberAfRf4ceMsoKeyCode</a>&#160;</td>
          <td class="paramname"><em>rcCommandCode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>rcCommandPayload</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>rcCommandPayloadLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>atomic</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send indications of user control presses and repeats to a pairing index. </p>
<p>This function can be called when a user control has been pressed and an indication of this should be sent to a remote node. If the user control should be repeated, the plugin will automatically send user control repeat messages at fixed intervals according to the plugin configuration. Every call to this function for a repeatable user control should be followed by a call to <a class="el" href="group__rf4ce-mso.htm#gaaf30e9691f2a7628b7b2170fb6ead836" title="Send indications of user control release to a pairing index.">emberAfRf4ceMsoUserControlRelease</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pairingIndex</td><td>The pairing index to which to send user control messages. </td></tr>
    <tr><td class="paramname">rcCommandCode</td><td>The RC command code of the user control. </td></tr>
    <tr><td class="paramname">rcCommandPayload</td><td>The optional RC command payload of the user control. </td></tr>
    <tr><td class="paramname">rcCommandPayloadLength</td><td>The length of the optional RC command payload of the user control. </td></tr>
    <tr><td class="paramname">atomic</td><td>true if the user control is atomic or false if it should repeat.</td></tr>
  </table>
  </dd>
</dl>
<p>This function is only applicable to controller devices.</p>
<dl class="section return"><dt>Returns</dt><dd>An ::EmberStatus value that indicates the success or failure of the command. </dd></dl>

</div>
</div>
<a class="anchor" id="gaaf30e9691f2a7628b7b2170fb6ead836"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EmberStatus emberAfRf4ceMsoUserControlRelease </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>pairingIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="rf4ce-mso-types_8h.htm#a9450d2bba238da0822db3c640fd6e3da">EmberAfRf4ceMsoKeyCode</a>&#160;</td>
          <td class="paramname"><em>rcCommandCode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send indications of user control release to a pairing index. </p>
<p>This function can be called when a user control has been released and an indication of this should be sent to a remote node.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pairingIndex</td><td>The pairing index to which to send user control messages. </td></tr>
    <tr><td class="paramname">rcCommandCode</td><td>The RC command code of the user control.</td></tr>
  </table>
  </dd>
</dl>
<p>This function is only applicable to controller devices.</p>
<dl class="section return"><dt>Returns</dt><dd>An ::EmberStatus value that indicates the success or failure of the command. </dd></dl>

</div>
</div>
<a class="anchor" id="gab18ff4952f4b08870866f524b2516dab"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EmberStatus emberAfRf4ceMsoSetAttributeRequest </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>pairingIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="rf4ce-mso-types_8h.htm#ac5c569b3a3e4a82b35d39687fc08f020">EmberAfRf4ceMsoAttributeId</a>&#160;</td>
          <td class="paramname"><em>attributeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>valueLen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set an attribute on a remote node. </p>
<p>This function can be called to set an attribute on a remote node. After sending the request, the plugin will automatically idle for a fixed duration as required by the MSO specification and then wait a configurable duration for the response from the target. The plugin will call ::emberAfPluginRf4ceMsoSetAttributeResponseCallback when the response is received or if a timeout occurs.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pairingIndex</td><td>The pairing index on which to set the attribute. </td></tr>
    <tr><td class="paramname">attributeId</td><td>The attribute id to set.. </td></tr>
    <tr><td class="paramname">index</td><td>The index of the element for vector attributes. </td></tr>
    <tr><td class="paramname">valueLen</td><td>The length of the value to set. </td></tr>
    <tr><td class="paramname">value</td><td>The value to set.</td></tr>
  </table>
  </dd>
</dl>
<p>This function is only applicable to controller devices.</p>
<dl class="section return"><dt>Returns</dt><dd>An ::EmberStatus value that indicates the success or failure of the command. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf6c54ccb378c929c502b33450bf5560c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EmberStatus emberAfRf4ceMsoGetAttributeRequest </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>pairingIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="rf4ce-mso-types_8h.htm#ac5c569b3a3e4a82b35d39687fc08f020">EmberAfRf4ceMsoAttributeId</a>&#160;</td>
          <td class="paramname"><em>attributeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>valueLen</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get an attribute on a remote node. </p>
<p>This function can be called to get an attribute on a remote node. After sending the request, the plugin will automatically idle for a fixed duration as required by the MSO specification and then wait a configurable duration for the response from the target. The plugin will call ::emberAfPluginRf4ceMsoGetAttributeResponseCallback when the response is received or if a timeout occurs.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pairingIndex</td><td>The pairing index on which to get the attribute. </td></tr>
    <tr><td class="paramname">attributeId</td><td>The attribute id to get. </td></tr>
    <tr><td class="paramname">index</td><td>The index of the element for vector attributes. </td></tr>
    <tr><td class="paramname">valueLen</td><td>The length of the value to get.</td></tr>
  </table>
  </dd>
</dl>
<p>This function is only applicable to controller devices.</p>
<dl class="section return"><dt>Returns</dt><dd>An ::EmberStatus value that indicates the success or failure of the command. </dd></dl>

</div>
</div>
<a class="anchor" id="ga1d115554d1c8f33bfc75f1f0c188b5b8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberAfRf4ceMsoIrRfDatabaseEntryUseDefault </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structEmberAfRf4ceMsoIrRfDatabaseEntry.htm">EmberAfRf4ceMsoIrRfDatabaseEntry</a> *&#160;</td>
          <td class="paramname"><em>entry</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine if the IR-RF database entry is the default. </p>
<p>Implemented as a macro for efficiency.</p>
<dl class="section return"><dt>Returns</dt><dd>true if the IR-RF database table entry is the default or false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="gadd826daa35300c98e60643626be631d9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberAfRf4ceMsoIrRfDatabaseEntryHasRfPressedDescriptor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structEmberAfRf4ceMsoIrRfDatabaseEntry.htm">EmberAfRf4ceMsoIrRfDatabaseEntry</a> *&#160;</td>
          <td class="paramname"><em>entry</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine if the IR-RF database entry has an RF pressed descriptor. </p>
<p>Implemented as a macro for efficiency.</p>
<dl class="section return"><dt>Returns</dt><dd>true if the IR-RF database table entry has an RF pressed descriptor or false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="ga59d567b81dd6579afd11fe65dfc728c1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberAfRf4ceMsoIrRfDatabaseEntryHasRfRepeatedDescriptor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structEmberAfRf4ceMsoIrRfDatabaseEntry.htm">EmberAfRf4ceMsoIrRfDatabaseEntry</a> *&#160;</td>
          <td class="paramname"><em>entry</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine if the IR-RF database entry has an RF repeated descriptor. </p>
<p>Implemented as a macro for efficiency.</p>
<dl class="section return"><dt>Returns</dt><dd>true if the IR-RF database table entry has an RF repeated descriptor or false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="ga3eb10b1819aba144c5d65a86d96255fc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberAfRf4ceMsoIrRfDatabaseEntryHasRfReleasedDescriptor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structEmberAfRf4ceMsoIrRfDatabaseEntry.htm">EmberAfRf4ceMsoIrRfDatabaseEntry</a> *&#160;</td>
          <td class="paramname"><em>entry</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine if the IR-RF database entry has an RF released descriptor. </p>
<p>Implemented as a macro for efficiency.</p>
<dl class="section return"><dt>Returns</dt><dd>true if the IR-RF database table entry has an RF released descriptor or false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="gacee201433446947049244ab8d11280db"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t emberAfRf4ceMsoIrRfDatabaseEntryGetMinimumNumberOfTransmissions </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structEmberAfRf4ceMsoIrRfDatabaseRfDescriptor.htm">EmberAfRf4ceMsoIrRfDatabaseRfDescriptor</a> *&#160;</td>
          <td class="paramname"><em>rfDescriptor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the minimum number of transmissions for a key code from its RF RF descriptor. </p>
<p>Implemented as a macro for efficiency.</p>
<dl class="section return"><dt>Returns</dt><dd>The minimum number of transmissions. </dd></dl>

</div>
</div>
<a class="anchor" id="ga830d837e26c3151fa8b1d77323a8e0be"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberAfRf4ceMsoIrRfDatabaseEntryShouldTransmitUntilRelease </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structEmberAfRf4ceMsoIrRfDatabaseRfDescriptor.htm">EmberAfRf4ceMsoIrRfDatabaseRfDescriptor</a> *&#160;</td>
          <td class="paramname"><em>rfDescriptor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine if a key code should continue being transmitted after the minimum number of transmissions have taken place when the key is kept pressed. </p>
<p>Implemented as a macro for efficiency.</p>
<dl class="section return"><dt>Returns</dt><dd>true if the key code should continue being transmitted after the minimum number of transmissions have taken place or false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="ga5c0ea6f77e721376e73deede865fdb43"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberAfRf4ceMsoIrRfDatabaseEntryHasIrDescriptor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structEmberAfRf4ceMsoIrRfDatabaseEntry.htm">EmberAfRf4ceMsoIrRfDatabaseEntry</a> *&#160;</td>
          <td class="paramname"><em>entry</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine if the IR-RF database entry has an IR descriptor. </p>
<p>Implemented as a macro for efficiency.</p>
<dl class="section return"><dt>Returns</dt><dd>true if the IR-RF database table entry has an IR descriptor or false otherwise. </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<hr size="1">
<table border="0" cellspacing="0" cellpadding="0" width=100%>
<tr>
<td><address><small>
Application Framework API Reference. Ember ZigBee RF4CE Application Framework.
</small></address>
</td>
<td align="right">
<address><small>
</small></address>
</td>
</tr>
</table>
</body>
</html>
