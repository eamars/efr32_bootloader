<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Ember ZigBee RF4CE API Reference: For the EM35x SoC Platform</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
</head>
<body>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td><img src="SiliconLabsLogo_Black.jpg" style="padding: 10px;width:40%;height:40%;" /></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Ember ZigBee RF4CE API Reference: For the EM35x SoC Platform
   &#160;<span id="projectnumber">EmberZNet 5.9.2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.2 -->
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__mfglib.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Manufacturing and Functional Test Library</div>  </div>
<div class="ingroups"><a class="el" href="group__ember__rf4ce.htm">Ember ZigBee RF4CE Stack API Reference</a></div></div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga37ed17af9a5087b1cd1cf43d5bcf4cc7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__mfglib.htm#ga37ed17af9a5087b1cd1cf43d5bcf4cc7">mfglibStart</a> (void(*mfglibRxCallback)(uint8_t *packet, uint8_t linkQuality, int8_t rssi))</td></tr>
<tr class="separator:ga37ed17af9a5087b1cd1cf43d5bcf4cc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9f8862cbcc8ae5c807f95876ed1a5440"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__mfglib.htm#ga9f8862cbcc8ae5c807f95876ed1a5440">mfglibEnd</a> (void)</td></tr>
<tr class="separator:ga9f8862cbcc8ae5c807f95876ed1a5440"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga452440d510a7f807add100192d28398f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__mfglib.htm#ga452440d510a7f807add100192d28398f">mfglibStartTone</a> (void)</td></tr>
<tr class="separator:ga452440d510a7f807add100192d28398f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga01614e57f52b7b06bbbee75e50a8be50"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__mfglib.htm#ga01614e57f52b7b06bbbee75e50a8be50">mfglibStopTone</a> (void)</td></tr>
<tr class="separator:ga01614e57f52b7b06bbbee75e50a8be50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1357b9e9294375cbb19ff701c4564ad6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__mfglib.htm#ga1357b9e9294375cbb19ff701c4564ad6">mfglibStartStream</a> (void)</td></tr>
<tr class="separator:ga1357b9e9294375cbb19ff701c4564ad6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8cb47aa883904af821530f28f0633017"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__mfglib.htm#ga8cb47aa883904af821530f28f0633017">mfglibStopStream</a> (void)</td></tr>
<tr class="separator:ga8cb47aa883904af821530f28f0633017"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab2c32e19ffaf7e83768d5a2279439be9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__mfglib.htm#gab2c32e19ffaf7e83768d5a2279439be9">mfglibSendPacket</a> (uint8_t *packet, uint16_t repeat)</td></tr>
<tr class="separator:gab2c32e19ffaf7e83768d5a2279439be9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafe1b83e94986df0e03add5e6daa0bf48"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__mfglib.htm#gafe1b83e94986df0e03add5e6daa0bf48">mfglibSetChannel</a> (uint8_t chan)</td></tr>
<tr class="separator:gafe1b83e94986df0e03add5e6daa0bf48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga16e7dcacb6f9fed3569a772a75f7d0de"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__mfglib.htm#ga16e7dcacb6f9fed3569a772a75f7d0de">mfglibGetChannel</a> (void)</td></tr>
<tr class="separator:ga16e7dcacb6f9fed3569a772a75f7d0de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga909404f9052990fc6c4195e4ac287b0e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__mfglib.htm#ga909404f9052990fc6c4195e4ac287b0e">mfglibSetPower</a> (uint16_t txPowerMode, int8_t power)</td></tr>
<tr class="separator:ga909404f9052990fc6c4195e4ac287b0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa15a1873e1ebc359f94a967da9e9145c"><td class="memItemLeft" align="right" valign="top">int8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__mfglib.htm#gaa15a1873e1ebc359f94a967da9e9145c">mfglibGetPower</a> (void)</td></tr>
<tr class="separator:gaa15a1873e1ebc359f94a967da9e9145c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9769d9a690869fcfc2817bb72774d308"><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__mfglib.htm#ga9769d9a690869fcfc2817bb72774d308">mfglibSetOptions</a> (uint8_t options)</td></tr>
<tr class="separator:ga9769d9a690869fcfc2817bb72774d308"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4d5b7a3c04be9702db1d79d672856de2"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__mfglib.htm#ga4d5b7a3c04be9702db1d79d672856de2">mfglibGetOptions</a> (void)</td></tr>
<tr class="separator:ga4d5b7a3c04be9702db1d79d672856de2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaedc66be569930d5b47e5a24e479efde5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__mfglib.htm#gaedc66be569930d5b47e5a24e479efde5">mfglibSetSynOffset</a> (int8_t synOffset)</td></tr>
<tr class="separator:gaedc66be569930d5b47e5a24e479efde5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga78a27153fdf98c3097f023493d554c4d"><td class="memItemLeft" align="right" valign="top">int8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__mfglib.htm#ga78a27153fdf98c3097f023493d554c4d">mfglibGetSynOffset</a> (void)</td></tr>
<tr class="separator:ga78a27153fdf98c3097f023493d554c4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga544de4dfb7771246405f25f428ff22b1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__mfglib.htm#ga544de4dfb7771246405f25f428ff22b1">mfglibTestContModCal</a> (uint8_t channel, uint32_t duration)</td></tr>
<tr class="separator:ga544de4dfb7771246405f25f428ff22b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>This is a manufacturing and functional test library for testing and verifying the RF component of products at manufacture time. </p>
<p>See <a class="el" href="mfglib_8h.htm">mfglib.h</a> for source code.</p>
<p>Developers can optionally include this library in their application code. The goal is that in most cases, this will eliminate the need for developers to load multiple images into their hardware at manufacturing time.</p>
<p>This library can optionally be compiled into the developer's production code and run at manufacturing time. Any interface to the library is handled by the application.</p>
<p>This library cannot assist in hardware start up.</p>
<p>Many functions in this file return an <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value. See <a class="el" href="error-def_8h.htm" title="Return-code definitions for EmberZNet stack API functions.">error-def.h</a> for definitions of all <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> return values. </p>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga37ed17af9a5087b1cd1cf43d5bcf4cc7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> mfglibStart </td>
          <td>(</td>
          <td class="paramtype">void(*)(uint8_t *packet, uint8_t linkQuality, int8_t rssi)&#160;</td>
          <td class="paramname"><em>mfglibRxCallback</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Activates use of mfglib test routines and enables the radio receiver to report packets it receives to the caller-specified ::mfglibRxCallback() routine. </p>
<p>It is legal to pass in a NULL. These packets will not be passed up with a CRC failure. The first byte of the packet in the callback is the length. All other functions will return an error until <a class="el" href="group__mfglib.htm#ga37ed17af9a5087b1cd1cf43d5bcf4cc7" title="Activates use of mfglib test routines and enables the radio receiver to report packets it receives to...">mfglibStart()</a> has been called.</p>
<dl class="section user"><dt>Application Usage:</dt><dd>Use this function to enter test mode.</dd></dl>
<p>Note: This function should only be called shortly after initialization and prior to forming or joining a network.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mfglibRxCallback</td><td>Function pointer to callback routine invoked whenever a valid packet is received. emberTick() must be called routinely for this callback to function correctly.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following:<ul>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the mfg test mode has been enabled.</li>
<li><a class="el" href="group__status__codes.htm#ga84817b6311c9b401707f01c16920eebc" title="The generic &quot;fatal error&quot; message.">EMBER_ERR_FATAL</a> if the mfg test mode is not available. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga9f8862cbcc8ae5c807f95876ed1a5440"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> mfglibEnd </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Deactivates use of <a class="el" href="group__mfglib.htm">Manufacturing and Functional Test Library</a> test routines. </p>
<p>This restores the hardware to the state it was in prior to <a class="el" href="group__mfglib.htm#ga37ed17af9a5087b1cd1cf43d5bcf4cc7" title="Activates use of mfglib test routines and enables the radio receiver to report packets it receives to...">mfglibStart()</a> and stops receiving packets started by <a class="el" href="group__mfglib.htm#ga37ed17af9a5087b1cd1cf43d5bcf4cc7" title="Activates use of mfglib test routines and enables the radio receiver to report packets it receives to...">mfglibStart()</a> at the same time.</p>
<dl class="section user"><dt>Application Usage:</dt><dd>Use this function to exit the mfg test mode.</dd></dl>
<p>Note: It may be desirable to also reboot after use of manufacturing mode to ensure all application state is properly re-initialized.</p>
<dl class="section return"><dt>Returns</dt><dd>One of the following:<ul>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the mfg test mode has been exited.</li>
<li><a class="el" href="group__status__codes.htm#ga84817b6311c9b401707f01c16920eebc" title="The generic &quot;fatal error&quot; message.">EMBER_ERR_FATAL</a> if the mfg test mode cannot be exited. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga452440d510a7f807add100192d28398f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> mfglibStartTone </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Starts transmitting the tone feature of the radio. </p>
<p>In this mode, the radio will transmit an unmodulated tone on the currently set channel and power level. Upon successful return, the tone will be transmitting. To stop transmitting a tone, the application must call <a class="el" href="group__mfglib.htm#ga01614e57f52b7b06bbbee75e50a8be50" title="Stops transmitting a tone started by mfglibStartTone().">mfglibStopTone()</a>, allowing it the flexibility to determine its own criteria for tone duration, such as time, event, and so on.</p>
<dl class="section user"><dt>Application Usage:</dt><dd>Use this function to transmit a tone.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following:<ul>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the transmit tone has started.</li>
<li><a class="el" href="group__status__codes.htm#ga84817b6311c9b401707f01c16920eebc" title="The generic &quot;fatal error&quot; message.">EMBER_ERR_FATAL</a> if the tone cannot be started. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga01614e57f52b7b06bbbee75e50a8be50"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> mfglibStopTone </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Stops transmitting a tone started by <a class="el" href="group__mfglib.htm#ga452440d510a7f807add100192d28398f" title="Starts transmitting the tone feature of the radio.">mfglibStartTone()</a>. </p>
<dl class="section user"><dt>Application Usage:</dt><dd>Use this function to stop transmitting a tone.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following:<ul>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the transmit tone has stopped.</li>
<li><a class="el" href="group__status__codes.htm#ga84817b6311c9b401707f01c16920eebc" title="The generic &quot;fatal error&quot; message.">EMBER_ERR_FATAL</a> if the tone cannot be stopped. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga1357b9e9294375cbb19ff701c4564ad6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> mfglibStartStream </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Starts transmitting a random stream of characters. This is so that the radio modulation can be measured. </p>
<dl class="section user"><dt>Application Usage:</dt><dd>Use this function to enable the measurement of radio modulation.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following:<ul>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the transmit stream has started.</li>
<li><a class="el" href="group__status__codes.htm#ga84817b6311c9b401707f01c16920eebc" title="The generic &quot;fatal error&quot; message.">EMBER_ERR_FATAL</a> if the stream cannot be started. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga8cb47aa883904af821530f28f0633017"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> mfglibStopStream </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Stops transmitting a random stream of characters started by <a class="el" href="group__mfglib.htm#ga1357b9e9294375cbb19ff701c4564ad6" title="Starts transmitting a random stream of characters. This is so that the radio modulation can be measur...">mfglibStartStream()</a>. </p>
<dl class="section user"><dt>Application Usage:</dt><dd>Use this function to end the measurement of radio modulation.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following:<ul>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the transmit stream has stopped.</li>
<li><a class="el" href="group__status__codes.htm#ga84817b6311c9b401707f01c16920eebc" title="The generic &quot;fatal error&quot; message.">EMBER_ERR_FATAL</a> if the stream cannot be stopped. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gab2c32e19ffaf7e83768d5a2279439be9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> mfglibSendPacket </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>packet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>repeat</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sends a single packet, (repeat + 1) times. </p>
<dl class="section user"><dt>Application Usage:</dt><dd>Use this function to send raw data. Note that <em>packet</em> array must be word-aligned (begin at even address), such that <em>((((uint16_t)packet) &amp; 1) == 0)</em> holds true. (This is generally done by either declaring <em>packet</em> as a local variable or putting it in a global declaration immediately following the declaration of an uint16_t.)</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">packet</td><td>Packet to be sent. First byte of the packet is always the length byte, whose value does not include itself but does include the 16-bit CRC in the length calculation. The CRC gets appended automatically by the radio as it transmits the packet, so the host does not need to provide this as part of packetContents. The total length of packet contents (Length Byte+1) going out the radio should not be &gt;128 or &lt;6 bytes. Note that the packet array should not include the CRC, as this appended by the radio automatically.</td></tr>
    <tr><td class="paramname">repeat</td><td>Number of times to repeat sending the packet after having been sent once. A value of 0 means send once and don't repeat.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following:<ul>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the packet was sent.</li>
<li><a class="el" href="group__status__codes.htm#ga84817b6311c9b401707f01c16920eebc" title="The generic &quot;fatal error&quot; message.">EMBER_ERR_FATAL</a> if the mfg test mode is not available or TONE or STREAM test is running. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gafe1b83e94986df0e03add5e6daa0bf48"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> mfglibSetChannel </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>chan</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Selects the radio channel. The channel range is from 11 to 26. </p>
<p>Customers can set any valid channel they want. Calibration occurs if this is the first time after power up.</p>
<dl class="section user"><dt>Application Usage:</dt><dd>Use this function to change channels.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">chan</td><td>Valid values depend upon the radio used.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following:<ul>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the channel has been set.</li>
<li><a class="el" href="group__status__codes.htm#ga033b46b66aaa068567b32d6b63a23f69" title="An unsupported channel setting was specified.">EMBER_PHY_INVALID_CHANNEL</a> if the channel requested is invalid.</li>
<li><a class="el" href="group__status__codes.htm#ga84817b6311c9b401707f01c16920eebc" title="The generic &quot;fatal error&quot; message.">EMBER_ERR_FATAL</a> if the mfg test mode is not available or TONE or STREAM test is running. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga16e7dcacb6f9fed3569a772a75f7d0de"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t mfglibGetChannel </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the current radio channel, as previously set via <a class="el" href="group__mfglib.htm#gafe1b83e94986df0e03add5e6daa0bf48" title="Selects the radio channel. The channel range is from 11 to 26.">mfglibSetChannel()</a>. </p>
<dl class="section user"><dt>Application Usage:</dt><dd>Use this function to get current channel.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Current channel. </dd></dl>

</div>
</div>
<a class="anchor" id="ga909404f9052990fc6c4195e4ac287b0e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> mfglibSetPower </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>txPowerMode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t&#160;</td>
          <td class="paramname"><em>power</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>First select the transmit power mode, and then include a method for selecting the radio transmit power. </p>
<p>Valid power settings depend upon the specific radio in use. Ember radios have discrete power settings, and then requested power is rounded to a valid power setting. The actual power output is available to the caller via <a class="el" href="group__mfglib.htm#gaa15a1873e1ebc359f94a967da9e9145c" title="returns the current radio power setting as previously set via mfglibSetPower().">mfglibGetPower()</a>.</p>
<dl class="section user"><dt>Application Usage:</dt><dd>Use this function to adjust the transmit power.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">txPowerMode</td><td>boost mode or external PA.</td></tr>
    <tr><td class="paramname">power</td><td>Power in units of dBm, which can be negative.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following:<ul>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the power has been set.</li>
<li><a class="el" href="group__status__codes.htm#gabdad474340c6178728756dbeb865ed88" title="An unsupported power setting was specified.">EMBER_PHY_INVALID_POWER</a> if the power requested is invalid.</li>
<li><a class="el" href="group__status__codes.htm#ga84817b6311c9b401707f01c16920eebc" title="The generic &quot;fatal error&quot; message.">EMBER_ERR_FATAL</a> if the mfg test mode is not available or TONE or STREAM test is running. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gaa15a1873e1ebc359f94a967da9e9145c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int8_t mfglibGetPower </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>returns the current radio power setting as previously set via <a class="el" href="group__mfglib.htm#ga909404f9052990fc6c4195e4ac287b0e" title="First select the transmit power mode, and then include a method for selecting the radio transmit powe...">mfglibSetPower()</a>. </p>
<dl class="section user"><dt>Application Usage:</dt><dd>Use this function to get current power setting.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>current power setting. </dd></dl>

</div>
</div>
<a class="anchor" id="ga9769d9a690869fcfc2817bb72774d308"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> mfglibSetOptions </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>options</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets manufacturing library options. </p>
<dl class="section user"><dt>Application Usage:</dt><dd>Use this function to set manufacturing library options.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">options</td><td>bitmask. 0 == non-CSMA transmits, 1 == CSMA transmits</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following:<ul>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the options have been set.</li>
<li><a class="el" href="group__status__codes.htm#ga26be7aa0168f32bbba32155e562cbd12" title="An invalid value was passed as an argument to a function.">EMBER_BAD_ARGUMENT</a> if any options are unavailable.</li>
<li><a class="el" href="group__status__codes.htm#ga84817b6311c9b401707f01c16920eebc" title="The generic &quot;fatal error&quot; message.">EMBER_ERR_FATAL</a> if the mfg test mode is not available or TONE or STREAM test is running. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga4d5b7a3c04be9702db1d79d672856de2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t mfglibGetOptions </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the current manufacturing library options, as previously set via <a class="el" href="group__mfglib.htm#ga9769d9a690869fcfc2817bb72774d308" title="Sets manufacturing library options.">mfglibSetOptions()</a>. </p>
<dl class="section user"><dt>Application Usage:</dt><dd>Use this function to get library options.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Current options based on the current test mode. </dd></dl>

</div>
</div>
<a class="anchor" id="gaedc66be569930d5b47e5a24e479efde5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void mfglibSetSynOffset </td>
          <td>(</td>
          <td class="paramtype">int8_t&#160;</td>
          <td class="paramname"><em>synOffset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set the synth offset in 11.7kHz steps. This function does NOT write the new synth offset to the token, it only changes it in memory. It can be changed as many times as you like, and the setting will be lost when a reset occurs. The value will survive deep sleep, but will not survive a reset, thus it will not take effect in the bootloader. If you would like it to be permanent (and accessible to the bootloader), you must write the TOKEN_MFG_SYNTH_FREQ_OFFSET token using the token API or em3xx_load &ndash;patch. </p>
<dl class="section user"><dt>Application Usage:</dt><dd>Use this function to compensate for tolerances in the crystal oscillator or capacitors. This function does not effect a permanent change; once you have found the offset you want, you must write it to a token using the token API for it to be permanent.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">synOffset</td><td>the number of 11.7kHz steps to offset the carrier frequency (may be negative) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga78a27153fdf98c3097f023493d554c4d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int8_t mfglibGetSynOffset </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get the current synth offset in 11.7kHz steps. see <a class="el" href="group__mfglib.htm#gaedc66be569930d5b47e5a24e479efde5" title="set the synth offset in 11.7kHz steps. This function does NOT write the new synth offset to the token...">mfglibSetSynOffset()</a> for details </p>
<dl class="section return"><dt>Returns</dt><dd>the synth offset in 11.7kHz steps </dd></dl>

</div>
</div>
<a class="anchor" id="ga544de4dfb7771246405f25f428ff22b1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void mfglibTestContModCal </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>duration</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Run mod DAC calibration on the given channel for the given amount of time. </p>
<p>If the duration argument == 0, this test will run forever (until the chip is reset).</p>
<dl class="section user"><dt>Application Usage:</dt><dd>Use this function to run the active transmit part of mod DAC calibration.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channel</td><td>Selects the channel to transmit on.</td></tr>
    <tr><td class="paramname">duration</td><td>Duration in ms, 0 == infinite.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>None. </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<hr size="1">
<table border="0" cellspacing="0" cellpadding="0" width=100%>
<tr>
<td><address><small>
Ember ZigBee RF4CE API Reference: For the EM35x SoC Platform. EmberZNet 5.9.2.0.
</small></address>
</td>
<td align="right">
<address><small>
</small></address>
</td>
</tr>
</table>
</body>
</html>
