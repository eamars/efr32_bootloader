<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Ember ZigBee RF4CE API Reference: For the EM35x SoC Platform</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
</head>
<body>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td><img src="SiliconLabsLogo_Black.jpg" style="padding: 10px;width:40%;height:40%;" /></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Ember ZigBee RF4CE API Reference: For the EM35x SoC Platform
   &#160;<span id="projectnumber">EmberZNet 5.9.2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.2 -->
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__USB__DEVICE.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">USB_DEVICE</div>  </div>
<div class="ingroups"><a class="el" href="group__usb.htm">USB Device Stack Library</a></div></div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structUSBD__Init__TypeDef.htm">USBD_Init_TypeDef</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">USB Device stack initialization structure.  <a href="structUSBD__Init__TypeDef.htm#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structUSBD__Callbacks__TypeDef.htm">USBD_Callbacks_TypeDef</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">USB Device stack callback structure.  <a href="structUSBD__Callbacks__TypeDef.htm#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:gafad47dbaf3af2786eec106d0594b9d4b"><td class="memItemLeft" align="right" valign="top">typedef void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#gafad47dbaf3af2786eec106d0594b9d4b">USBD_UsbResetCb_TypeDef</a> )(void)</td></tr>
<tr class="separator:gafad47dbaf3af2786eec106d0594b9d4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0dc83723a1a28a1b6bea080d36125567"><td class="memItemLeft" align="right" valign="top">typedef void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#ga0dc83723a1a28a1b6bea080d36125567">USBD_SofIntCb_TypeDef</a> )(uint16_t sofNr)</td></tr>
<tr class="separator:ga0dc83723a1a28a1b6bea080d36125567"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6f06aa8508bb655941774d7f688ffb85"><td class="memItemLeft" align="right" valign="top">typedef void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#ga6f06aa8508bb655941774d7f688ffb85">USBD_DeviceStateChangeCb_TypeDef</a> )(<a class="el" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a> oldState, <a class="el" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a> newState)</td></tr>
<tr class="separator:ga6f06aa8508bb655941774d7f688ffb85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaba846e8094973b242a43be1edcfc8451"><td class="memItemLeft" align="right" valign="top">typedef bool(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#gaba846e8094973b242a43be1edcfc8451">USBD_IsSelfPoweredCb_TypeDef</a> )(void)</td></tr>
<tr class="separator:gaba846e8094973b242a43be1edcfc8451"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeab2bf0232b86efd7afb6ad54ae950a6"><td class="memItemLeft" align="right" valign="top">typedef int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#gaeab2bf0232b86efd7afb6ad54ae950a6">USBD_SetupCmdCb_TypeDef</a> )(const <a class="el" href="structUSB__Setup__TypeDef.htm">USB_Setup_TypeDef</a> *setup)</td></tr>
<tr class="separator:gaeab2bf0232b86efd7afb6ad54ae950a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa981b243246dbd611a4ba8bdd042424a"><td class="memItemLeft" align="right" valign="top">typedef struct <br class="typebreak"/>
<a class="el" href="structUSBD__Callbacks__TypeDef.htm">USBD_Callbacks_TypeDef</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#gaa981b243246dbd611a4ba8bdd042424a">USBD_Callbacks_TypeDef</a></td></tr>
<tr class="separator:gaa981b243246dbd611a4ba8bdd042424a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:ga437a2e7bf70740fc715ac9a5c7310a6d"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a> { <br/>
&#160;&#160;<a class="el" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da35ca8b56bdc46ce0dd7c39400796ba7c">USBD_STATE_NONE</a>, 
<br/>
&#160;&#160;<a class="el" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da01e32e620c7692ea767d99bb4120940b">USBD_STATE_ATTACHED</a>, 
<br/>
&#160;&#160;<a class="el" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da47b9228ad86b300416ed28d2c2b7e5d3">USBD_STATE_POWERED</a>, 
<br/>
&#160;&#160;<a class="el" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da978c707d313eb49b70bc62dfae304048">USBD_STATE_DEFAULT</a>, 
<br/>
&#160;&#160;<a class="el" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da8abe2fca377f950a2a9c95316f5246be">USBD_STATE_ADDRESSED</a>, 
<br/>
&#160;&#160;<a class="el" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da44c1920b09ea1062ea4d7ac31a846509">USBD_STATE_CONFIGURED</a>, 
<br/>
&#160;&#160;<a class="el" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da74e1d49afc6b25e202cc9e42f595f4ed">USBD_STATE_SUSPENDED</a>, 
<br/>
&#160;&#160;<a class="el" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6dad588a80fcef0bcb009e0822908b36d29">USBD_STATE_LASTMARKER</a>
<br/>
 }</td></tr>
<tr class="separator:ga437a2e7bf70740fc715ac9a5c7310a6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga325117af9b3a9ad1df068cf3b19dc1ba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#ga325117af9b3a9ad1df068cf3b19dc1ba">USBD_AbortAllTransfers</a> (void)</td></tr>
<tr class="separator:ga325117af9b3a9ad1df068cf3b19dc1ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga83f32dfa4f6a5d010e413967850c52b2"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#ga83f32dfa4f6a5d010e413967850c52b2">USBD_AbortTransfer</a> (int epAddr)</td></tr>
<tr class="separator:ga83f32dfa4f6a5d010e413967850c52b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga71b9264662d74666e4b058984e3346e5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#ga71b9264662d74666e4b058984e3346e5">USBD_Connect</a> (void)</td></tr>
<tr class="separator:ga71b9264662d74666e4b058984e3346e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2d952f8cf9bde552cfd5559ae47e70fc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#ga2d952f8cf9bde552cfd5559ae47e70fc">USBD_Disconnect</a> (void)</td></tr>
<tr class="separator:ga2d952f8cf9bde552cfd5559ae47e70fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9eb41fa7508126bea30d672b777e250f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#ga9eb41fa7508126bea30d672b777e250f">USBD_EpIsBusy</a> (int epAddr)</td></tr>
<tr class="separator:ga9eb41fa7508126bea30d672b777e250f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab4e55bb0aacaa90aab28a79e9b131b0f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#gab4e55bb0aacaa90aab28a79e9b131b0f">USBD_GetUsbState</a> (void)</td></tr>
<tr class="separator:gab4e55bb0aacaa90aab28a79e9b131b0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1796a832b3ff75580451818ae2e64000"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#ga1796a832b3ff75580451818ae2e64000">USBD_GetUsbStateName</a> (<a class="el" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a> state)</td></tr>
<tr class="separator:ga1796a832b3ff75580451818ae2e64000"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0e5f5bd847e7cc1c4c384bb6b7f0ce77"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#ga0e5f5bd847e7cc1c4c384bb6b7f0ce77">USBD_Init</a> (const <a class="el" href="structUSBD__Init__TypeDef.htm">USBD_Init_TypeDef</a> *p)</td></tr>
<tr class="separator:ga0e5f5bd847e7cc1c4c384bb6b7f0ce77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9e0a1cf705301d9e035feff27ea41cda"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#ga9e0a1cf705301d9e035feff27ea41cda">USBD_Read</a> (int epAddr, void *data, int byteCount, <a class="el" href="group__USB__COMMON.htm#ga521fe3060be2a8de6fdd5ee01193958b">USB_XferCompleteCb_TypeDef</a> callback)</td></tr>
<tr class="separator:ga9e0a1cf705301d9e035feff27ea41cda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9fb12718f509c578656e4fc08bc40f69"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#ga9fb12718f509c578656e4fc08bc40f69">USBD_RemoteWakeup</a> (void)</td></tr>
<tr class="separator:ga9fb12718f509c578656e4fc08bc40f69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga958a83c23eaa9fd51672808ac7c3fa65"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#ga958a83c23eaa9fd51672808ac7c3fa65">USBD_SafeToEnterEM2</a> (void)</td></tr>
<tr class="separator:ga958a83c23eaa9fd51672808ac7c3fa65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9bf435e62169bfb3ee0a43ef0e9d009d"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#ga9bf435e62169bfb3ee0a43ef0e9d009d">USBD_StallEp</a> (int epAddr)</td></tr>
<tr class="separator:ga9bf435e62169bfb3ee0a43ef0e9d009d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae26fedf61e90eb1e50ae5d24cd65d0b8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#gae26fedf61e90eb1e50ae5d24cd65d0b8">USBD_Stop</a> (void)</td></tr>
<tr class="separator:gae26fedf61e90eb1e50ae5d24cd65d0b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacb0ed1c21fd4aecfe96060ea87a617a8"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#gacb0ed1c21fd4aecfe96060ea87a617a8">USBD_UnStallEp</a> (int epAddr)</td></tr>
<tr class="separator:gacb0ed1c21fd4aecfe96060ea87a617a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga656c8d2935af97156bc0babdc43c32ee"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#ga656c8d2935af97156bc0babdc43c32ee">USBD_Write</a> (int epAddr, void *data, int byteCount, <a class="el" href="group__USB__COMMON.htm#ga521fe3060be2a8de6fdd5ee01193958b">USB_XferCompleteCb_TypeDef</a> callback)</td></tr>
<tr class="separator:ga656c8d2935af97156bc0babdc43c32ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0e896f37e57c345c199d6e955b946c15"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__USB__DEVICE.htm#ga0e896f37e57c345c199d6e955b946c15">usbSuspendDsr</a> (void)</td></tr>
<tr class="separator:ga0e896f37e57c345c199d6e955b946c15"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>USB DEVICE protocol stack, see <a class="el" href="group__usb.htm">USB Device Stack Library</a> page for detailed documentation. </p>
<p>See <a class="el" href="em__usbd_8c.htm" title="USB protocol stack library, device API.">em_usbd.c</a> for source code.</p>
<h2 class="groupheader">Typedef Documentation</h2>
<a class="anchor" id="gafad47dbaf3af2786eec106d0594b9d4b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef void(* USBD_UsbResetCb_TypeDef)(void)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>USB Reset callback function. </p>
<p>Called whenever USB reset signalling is detected on the USB port. </p>

<p>Definition at line <a class="el" href="em__usb_8h_source.htm#l00576">576</a> of file <a class="el" href="em__usb_8h_source.htm">em_usb.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga0dc83723a1a28a1b6bea080d36125567"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef void(* USBD_SofIntCb_TypeDef)(uint16_t sofNr)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>USB Start Of Frame (SOF) interrupt callback function. </p>
<p>Called at each SOF interrupt (if enabled),</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sofNr</td><td>Current frame number. The value rolls over to 0 after 16383 (0x3FFF). </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="em__usb_8h_source.htm#l00588">588</a> of file <a class="el" href="em__usb_8h_source.htm">em_usb.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga6f06aa8508bb655941774d7f688ffb85"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef void(* USBD_DeviceStateChangeCb_TypeDef)(<a class="el" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a> oldState, <a class="el" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a> newState)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>USB State change callback function. </p>
<p>Called whenever the device change state.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">oldState</td><td>The device USB state just leaved. See <a class="el" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a>.</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">newState</td><td>New (the current) USB device state. See <a class="el" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a>. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="em__usb_8h_source.htm#l00603">603</a> of file <a class="el" href="em__usb_8h_source.htm">em_usb.h</a>.</p>

</div>
</div>
<a class="anchor" id="gaba846e8094973b242a43be1edcfc8451"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef bool(* USBD_IsSelfPoweredCb_TypeDef)(void)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>USB power mode callback function. </p>
<p>Called whenever the device stack needs to query if the device is currently self- or bus-powered. Typically when host has issued an <a class="el" href="group__USB__COMMON.htm#gaeba76c92af8f1a94982ec4cb767452f0">GET_STATUS</a> setup command.</p>
<dl class="section return"><dt>Returns</dt><dd>True if self-powered, false otherwise. </dd></dl>

<p>Definition at line <a class="el" href="em__usb_8h_source.htm#l00617">617</a> of file <a class="el" href="em__usb_8h_source.htm">em_usb.h</a>.</p>

</div>
</div>
<a class="anchor" id="gaeab2bf0232b86efd7afb6ad54ae950a6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef int(* USBD_SetupCmdCb_TypeDef)(const <a class="el" href="structUSB__Setup__TypeDef.htm">USB_Setup_TypeDef</a> *setup)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>USB setup request callback function. </p>
<p>Called on each setup request received from host. This gives the application a possibility to extend or override standard requests, and to implement class or vendor specific requests. Return <a class="el" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a> if the request is handled, return <a class="el" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a551e7a6fbdf7e891b8232818179fa229">USB_STATUS_REQ_ERR</a> if it is an illegal request or return <a class="el" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1ae32e2e8da1dce5b54ea6542adabec3a4">USB_STATUS_REQ_UNHANDLED</a> to pass the request on to the default request handler.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">setup</td><td>Pointer to an USB setup packet. See <a class="el" href="structUSB__Setup__TypeDef.htm">USB_Setup_TypeDef</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An appropriate status/error code. See <a class="el" href="group__USB__COMMON.htm#ga889b575b566a663621c33eebf46272c1">USB_Status_TypeDef</a>. </dd></dl>

<p>Definition at line <a class="el" href="em__usb_8h_source.htm#l00637">637</a> of file <a class="el" href="em__usb_8h_source.htm">em_usb.h</a>.</p>

</div>
</div>
<a class="anchor" id="gaa981b243246dbd611a4ba8bdd042424a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structUSBD__Callbacks__TypeDef.htm">USBD_Callbacks_TypeDef</a>  <a class="el" href="structUSBD__Callbacks__TypeDef.htm">USBD_Callbacks_TypeDef</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>USB Device stack callback structure. </p>
<p>Callback functions used by the device stack to signal events or query status to/from the application. See <a class="el" href="structUSBD__Init__TypeDef.htm">USBD_Init_TypeDef</a>. Assign members to NULL if your application don't need a specific callback. </p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a class="anchor" id="ga437a2e7bf70740fc715ac9a5c7310a6d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>USB device state enumerator. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="gga437a2e7bf70740fc715ac9a5c7310a6da35ca8b56bdc46ce0dd7c39400796ba7c"></a>USBD_STATE_NONE</em>&nbsp;</td><td>
<p>Device state is undefined/unknown. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga437a2e7bf70740fc715ac9a5c7310a6da01e32e620c7692ea767d99bb4120940b"></a>USBD_STATE_ATTACHED</em>&nbsp;</td><td>
<p>Device state is ATTACHED. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga437a2e7bf70740fc715ac9a5c7310a6da47b9228ad86b300416ed28d2c2b7e5d3"></a>USBD_STATE_POWERED</em>&nbsp;</td><td>
<p>Device state is POWERED. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga437a2e7bf70740fc715ac9a5c7310a6da978c707d313eb49b70bc62dfae304048"></a>USBD_STATE_DEFAULT</em>&nbsp;</td><td>
<p>Device state is DEFAULT. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga437a2e7bf70740fc715ac9a5c7310a6da8abe2fca377f950a2a9c95316f5246be"></a>USBD_STATE_ADDRESSED</em>&nbsp;</td><td>
<p>Device state is ADDRESSED. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga437a2e7bf70740fc715ac9a5c7310a6da44c1920b09ea1062ea4d7ac31a846509"></a>USBD_STATE_CONFIGURED</em>&nbsp;</td><td>
<p>Device state is CONFIGURED. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga437a2e7bf70740fc715ac9a5c7310a6da74e1d49afc6b25e202cc9e42f595f4ed"></a>USBD_STATE_SUSPENDED</em>&nbsp;</td><td>
<p>Device state is SUSPENDED. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga437a2e7bf70740fc715ac9a5c7310a6dad588a80fcef0bcb009e0822908b36d29"></a>USBD_STATE_LASTMARKER</em>&nbsp;</td><td>
<p>Device state enum end marker. </p>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="em__usb_8h_source.htm#l00355">355</a> of file <a class="el" href="em__usb_8h_source.htm">em_usb.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga325117af9b3a9ad1df068cf3b19dc1ba"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_AbortAllTransfers </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Abort all pending transfers. </p>
<p>Aborts transfers for all endpoints currently in use. Pending transfers on the default endpoint (EP0) are not aborted. </p>

<p>Definition at line <a class="el" href="em__usbd_8c_source.htm#l00056">56</a> of file <a class="el" href="em__usbd_8c_source.htm">em_usbd.c</a>.</p>

<p>References <a class="el" href="em__usb_8h_source.htm#l00332">USB_STATUS_EP_ABORTED</a>.</p>

</div>
</div>
<a class="anchor" id="ga83f32dfa4f6a5d010e413967850c52b2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int USBD_AbortTransfer </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>epAddr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Abort a pending transfer on a specific endpoint. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">epAddr</td><td>The address of the endpoint to abort. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="em__usbd_8c_source.htm#l00070">70</a> of file <a class="el" href="em__usbd_8c_source.htm">em_usbd.c</a>.</p>

<p>References <a class="el" href="iar_8h_source.htm#l00181">assert</a>, <a class="el" href="platform-common_8h_source.htm#l00218">NULL</a>, <a class="el" href="em__usb_8h_source.htm#l00332">USB_STATUS_EP_ABORTED</a>, <a class="el" href="em__usb_8h_source.htm#l00326">USB_STATUS_OK</a>, <a class="el" href="em__usb_8h_source.htm#l00361">USBD_STATE_ADDRESSED</a>, and <a class="el" href="em__usb_8h_source.htm#l00362">USBD_STATE_CONFIGURED</a>.</p>

</div>
</div>
<a class="anchor" id="ga71b9264662d74666e4b058984e3346e5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_Connect </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Start USB device operation. </p>
<p>Device operation is started by connecting a pullup resistor on the appropriate USB data line. </p>

<p>Definition at line <a class="el" href="em__usbd_8c_source.htm#l00126">126</a> of file <a class="el" href="em__usbd_8c_source.htm">em_usbd.c</a>.</p>

</div>
</div>
<a class="anchor" id="ga2d952f8cf9bde552cfd5559ae47e70fc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_Disconnect </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Stop USB device operation. </p>
<p>Device operation is stopped by disconnecting the pullup resistor from the appropriate USB data line. Often referred to as a "soft" disconnect. </p>

<p>Definition at line <a class="el" href="em__usbd_8c_source.htm#l00141">141</a> of file <a class="el" href="em__usbd_8c_source.htm">em_usbd.c</a>.</p>

<p>References <a class="el" href="em__usb_8h_source.htm#l00363">USBD_STATE_SUSPENDED</a>.</p>

<p>Referenced by <a class="el" href="em__usbd_8c_source.htm#l00323">USBD_Stop()</a>.</p>

</div>
</div>
<a class="anchor" id="ga9eb41fa7508126bea30d672b777e250f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool USBD_EpIsBusy </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>epAddr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an endpoint is busy doing a transfer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">epAddr</td><td>The address of the endpoint to check.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if endpoint is busy, false otherwise. </dd></dl>

<p>Definition at line <a class="el" href="em__usbd_8c_source.htm#l00211">211</a> of file <a class="el" href="em__usbd_8c_source.htm">em_usbd.c</a>.</p>

<p>References <a class="el" href="iar_8h_source.htm#l00181">assert</a>, and <a class="el" href="platform-common_8h_source.htm#l00218">NULL</a>.</p>

</div>
</div>
<a class="anchor" id="gab4e55bb0aacaa90aab28a79e9b131b0f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a> USBD_GetUsbState </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get current USB device state. </p>
<dl class="section return"><dt>Returns</dt><dd>Device USB state. See <a class="el" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a>. </dd></dl>

<p>Definition at line <a class="el" href="em__usbd_8c_source.htm#l00177">177</a> of file <a class="el" href="em__usbd_8c_source.htm">em_usbd.c</a>.</p>

<p>Referenced by <a class="el" href="em__usbd_8c_source.htm#l00668">USBD_Read()</a>, and <a class="el" href="em__usbd_8c_source.htm#l00549">USBD_Write()</a>.</p>

</div>
</div>
<a class="anchor" id="ga1796a832b3ff75580451818ae2e64000"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * USBD_GetUsbStateName </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a>&#160;</td>
          <td class="paramname"><em>state</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a string naming a device USB state. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">state</td><td>Device USB state. See <a class="el" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>State name string pointer. </dd></dl>

<p>Definition at line <a class="el" href="em__usbd_8c_source.htm#l00192">192</a> of file <a class="el" href="em__usbd_8c_source.htm">em_usbd.c</a>.</p>

<p>References <a class="el" href="em__usb_8h_source.htm#l00364">USBD_STATE_LASTMARKER</a>.</p>

</div>
</div>
<a class="anchor" id="ga0e5f5bd847e7cc1c4c384bb6b7f0ce77"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int USBD_Init </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structUSBD__Init__TypeDef.htm">USBD_Init_TypeDef</a> *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes USB device hardware and internal protocol stack data structures, then connects the data-line (D+ or D-) pullup resistor to signal host that enumeration can begin. </p>
<dl class="section note"><dt>Note</dt><dd>You may later use <a class="el" href="group__USB__DEVICE.htm#ga2d952f8cf9bde552cfd5559ae47e70fc">USBD_Disconnect()</a> and <a class="el" href="group__USB__DEVICE.htm#ga71b9264662d74666e4b058984e3346e5">USBD_Connect()</a> to force reenumeration.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">p</td><td>Pointer to device initialization struct. See <a class="el" href="structUSBD__Init__TypeDef.htm">USBD_Init_TypeDef</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a> on success, else an appropriate error code. </dd></dl>

<p>Definition at line <a class="el" href="em__usbd_8c_source.htm#l00347">347</a> of file <a class="el" href="em__usbd_8c_source.htm">em_usbd.c</a>.</p>

<p>References <a class="el" href="iar_8h_source.htm#l00181">assert</a>, <a class="el" href="em__usb_8h_source.htm#l00500">USB_EndpointDescriptor_TypeDef::bEndpointAddress</a>, <a class="el" href="em__usb_8h_source.htm#l00501">USB_EndpointDescriptor_TypeDef::bmAttributes</a>, <a class="el" href="em__usb_8h_source.htm#l00654">USBD_Init_TypeDef::bufferingMultiplier</a>, <a class="el" href="em__usb_8h_source.htm#l00659">USBD_Init_TypeDef::callbacks</a>, <a class="el" href="em__usb_8h_source.htm#l00172">CONFIG_DESC_BM_TRANSFERTYPE</a>, <a class="el" href="em__usb_8h_source.htm#l00651">USBD_Init_TypeDef::configDescriptor</a>, <a class="el" href="em__usb_8h_source.htm#l00650">USBD_Init_TypeDef::deviceDescriptor</a>, <a class="el" href="platform-common_8h_source.htm#l00178">MEMSET</a>, <a class="el" href="platform-common_8h_source.htm#l00218">NULL</a>, <a class="el" href="em__usb_8h_source.htm#l00653">USBD_Init_TypeDef::numberOfStrings</a>, <a class="el" href="em__usb_8h_source.htm#l00652">USBD_Init_TypeDef::stringDescriptors</a>, <a class="el" href="em__usb_8h_source.htm#l00130">USB_ENDPOINT_DESCRIPTOR</a>, <a class="el" href="em__usb_8h_source.htm#l00151">USB_EP0_SIZE</a>, <a class="el" href="em__usb_8h_source.htm#l00165">USB_EPNUM_MASK</a>, <a class="el" href="em__usb_8h_source.htm#l00159">USB_EPTYPE_CTRL</a>, <a class="el" href="dev0680_8h_source.htm#l00253">USB_REMOTEWKUPEN_STATE</a>, <a class="el" href="em__usb_8h_source.htm#l00082">USB_SETUP_DIR_MASK</a>, <a class="el" href="em__usb_8h_source.htm#l00330">USB_STATUS_ILLEGAL</a>, <a class="el" href="em__usb_8h_source.htm#l00326">USB_STATUS_OK</a>, <a class="el" href="em__usb_8h_source.htm#l00364">USBD_STATE_LASTMARKER</a>, <a class="el" href="em__usb_8h_source.htm#l00357">USBD_STATE_NONE</a>, <a class="el" href="group__USB__COMMON.htm#ga21c87b800d87fd731173dd4f48f23c28">USBTIMER_Init()</a>, and <a class="el" href="em__usb_8h_source.htm#l00502">USB_EndpointDescriptor_TypeDef::wMaxPacketSize</a>.</p>

</div>
</div>
<a class="anchor" id="ga9e0a1cf705301d9e035feff27ea41cda"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int USBD_Read </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>epAddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>byteCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__USB__COMMON.htm#ga521fe3060be2a8de6fdd5ee01193958b">USB_XferCompleteCb_TypeDef</a>&#160;</td>
          <td class="paramname"><em>callback</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Start a read (OUT) transfer on an endpoint. </p>
<dl class="section note"><dt>Note</dt><dd>The transfer buffer length must be a multiple of 4 bytes in length and WORD (4 byte) aligned. When allocating the buffer, round buffer length up. If it is possible that the host will send more data than your device expects, round buffer size up to the next multiple of maxpacket size.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">epAddr</td><td>Endpoint address.</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Pointer to transfer data buffer.</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">byteCount</td><td>Transfer length.</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">callback</td><td>Function to be called on transfer completion. Supply NULL if no callback is needed. See <a class="el" href="group__USB__COMMON.htm#ga521fe3060be2a8de6fdd5ee01193958b">USB_XferCompleteCb_TypeDef</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a> on success, else an appropriate error code. </dd></dl>

<p>Definition at line <a class="el" href="em__usbd_8c_source.htm#l00668">668</a> of file <a class="el" href="em__usbd_8c_source.htm">em_usbd.c</a>.</p>

<p>References <a class="el" href="iar_8h_source.htm#l00181">assert</a>, <a class="el" href="platform-common_8h_source.htm#l00218">NULL</a>, <a class="el" href="em__usb_8h_source.htm#l00335">USB_STATUS_DEVICE_UNCONFIGURED</a>, <a class="el" href="em__usb_8h_source.htm#l00328">USB_STATUS_EP_BUSY</a>, <a class="el" href="em__usb_8h_source.htm#l00331">USB_STATUS_EP_STALLED</a>, <a class="el" href="em__usb_8h_source.htm#l00326">USB_STATUS_OK</a>, <a class="el" href="em__usbd_8c_source.htm#l00177">USBD_GetUsbState()</a>, and <a class="el" href="em__usb_8h_source.htm#l00362">USBD_STATE_CONFIGURED</a>.</p>

</div>
</div>
<a class="anchor" id="ga9fb12718f509c578656e4fc08bc40f69"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int USBD_RemoteWakeup </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform a remote wakeup signalling sequence. </p>
<dl class="section note"><dt>Note</dt><dd>It is the responsibility of the application to ensure that remote wakeup is not attempted before the device has been suspended for at least 5 miliseconds. This function should not be called from within an interrupt handler.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a> on success, else an appropriate error code. </dd></dl>

<p>Definition at line <a class="el" href="em__usbd_8c_source.htm#l00785">785</a> of file <a class="el" href="em__usbd_8c_source.htm">em_usbd.c</a>.</p>

<p>References <a class="el" href="platform-common_8h_source.htm#l00361">elapsedTimeInt16u</a>, <a class="el" href="group__system__timer.htm#gaa4ce0f9db9c950bd2272a9e743e77b2a">halCommonGetInt16uMillisecondTick()</a>, <a class="el" href="em__usb_8h_source.htm#l00330">USB_STATUS_ILLEGAL</a>, <a class="el" href="em__usb_8h_source.htm#l00326">USB_STATUS_OK</a>, <a class="el" href="em__usb_8h_source.htm#l00338">USB_STATUS_TIMEOUT</a>, and <a class="el" href="em__usb_8h_source.htm#l00363">USBD_STATE_SUSPENDED</a>.</p>

</div>
</div>
<a class="anchor" id="ga958a83c23eaa9fd51672808ac7c3fa65"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool USBD_SafeToEnterEM2 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ga9bf435e62169bfb3ee0a43ef0e9d009d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int USBD_StallEp </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>epAddr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set an endpoint in the stalled (halted) state. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">epAddr</td><td>The address of the endpoint to stall.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a> on success, else an appropriate error code. </dd></dl>

<p>Definition at line <a class="el" href="em__usbd_8c_source.htm#l00236">236</a> of file <a class="el" href="em__usbd_8c_source.htm">em_usbd.c</a>.</p>

<p>References <a class="el" href="iar_8h_source.htm#l00181">assert</a>, <a class="el" href="platform-common_8h_source.htm#l00218">NULL</a>, <a class="el" href="em__usb_8h_source.htm#l00330">USB_STATUS_ILLEGAL</a>, and <a class="el" href="em__usb_8h_source.htm#l00326">USB_STATUS_OK</a>.</p>

</div>
</div>
<a class="anchor" id="gae26fedf61e90eb1e50ae5d24cd65d0b8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_Stop </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Stop USB device stack operation. </p>
<p>The data-line pullup resistor is turned off, USB interrupts are disabled, and finally the USB pins are disabled. </p>

<p>Definition at line <a class="el" href="em__usbd_8c_source.htm#l00323">323</a> of file <a class="el" href="em__usbd_8c_source.htm">em_usbd.c</a>.</p>

<p>References <a class="el" href="em__usbd_8c_source.htm#l00141">USBD_Disconnect()</a>, and <a class="el" href="em__usb_8h_source.htm#l00357">USBD_STATE_NONE</a>.</p>

</div>
</div>
<a class="anchor" id="gacb0ed1c21fd4aecfe96060ea87a617a8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int USBD_UnStallEp </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>epAddr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reset stall state on a stalled (halted) endpoint. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">epAddr</td><td>The address of the endpoint to un-stall.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a> on success, else an appropriate error code. </dd></dl>

<p>Definition at line <a class="el" href="em__usbd_8c_source.htm#l00281">281</a> of file <a class="el" href="em__usbd_8c_source.htm">em_usbd.c</a>.</p>

<p>References <a class="el" href="iar_8h_source.htm#l00181">assert</a>, <a class="el" href="platform-common_8h_source.htm#l00218">NULL</a>, <a class="el" href="em__usb_8h_source.htm#l00330">USB_STATUS_ILLEGAL</a>, and <a class="el" href="em__usb_8h_source.htm#l00326">USB_STATUS_OK</a>.</p>

</div>
</div>
<a class="anchor" id="ga656c8d2935af97156bc0babdc43c32ee"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int USBD_Write </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>epAddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>byteCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__USB__COMMON.htm#ga521fe3060be2a8de6fdd5ee01193958b">USB_XferCompleteCb_TypeDef</a>&#160;</td>
          <td class="paramname"><em>callback</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Start a write (IN) transfer on an endpoint. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">epAddr</td><td>Endpoint address.</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Pointer to transfer data buffer. This buffer must be WORD (4 byte) aligned.</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">byteCount</td><td>Transfer length.</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">callback</td><td>Function to be called on transfer completion. Supply NULL if no callback is needed. See <a class="el" href="group__USB__COMMON.htm#ga521fe3060be2a8de6fdd5ee01193958b">USB_XferCompleteCb_TypeDef</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a> on success, else an appropriate error code. </dd></dl>

<p>Definition at line <a class="el" href="em__usbd_8c_source.htm#l00549">549</a> of file <a class="el" href="em__usbd_8c_source.htm">em_usbd.c</a>.</p>

<p>References <a class="el" href="iar_8h_source.htm#l00181">assert</a>, <a class="el" href="platform-common_8h_source.htm#l00218">NULL</a>, <a class="el" href="em__usb_8h_source.htm#l00335">USB_STATUS_DEVICE_UNCONFIGURED</a>, <a class="el" href="em__usb_8h_source.htm#l00328">USB_STATUS_EP_BUSY</a>, <a class="el" href="em__usb_8h_source.htm#l00331">USB_STATUS_EP_STALLED</a>, <a class="el" href="em__usb_8h_source.htm#l00330">USB_STATUS_ILLEGAL</a>, <a class="el" href="em__usb_8h_source.htm#l00326">USB_STATUS_OK</a>, <a class="el" href="em__usbd_8c_source.htm#l00177">USBD_GetUsbState()</a>, and <a class="el" href="em__usb_8h_source.htm#l00362">USBD_STATE_CONFIGURED</a>.</p>

</div>
</div>
<a class="anchor" id="ga0e896f37e57c345c199d6e955b946c15"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usbSuspendDsr </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>USB suspend delayed service routine. </p>
<p>This function keeps the device in a low power state in order to meet USB specification during USB suspend state. </p>

<p>Definition at line <a class="el" href="em__usbd_8c_source.htm#l00754">754</a> of file <a class="el" href="em__usbd_8c_source.htm">em_usbd.c</a>.</p>

<p>References <a class="el" href="group__micro.htm#ga6d05736655f1a012dc969d1d912e835b">halSleep()</a>, <a class="el" href="micro-common_8h_source.htm#l00105">SLEEPMODE_IDLE</a>, and <a class="el" href="em__usb_8h_source.htm#l00363">USBD_STATE_SUSPENDED</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<hr size="1">
<table border="0" cellspacing="0" cellpadding="0" width=100%>
<tr>
<td><address><small>
Ember ZigBee RF4CE API Reference: For the EM35x SoC Platform. EmberZNet 5.9.2.0.
</small></address>
</td>
<td align="right">
<address><small>
</small></address>
</td>
</tr>
</table>
</body>
</html>
