<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>EmberZNet API Reference: For the EM35x SoC Platform</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
</head>
<body>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td><img src="SiliconLabsLogo_Black.jpg" style="padding: 10px;width:40%;height:40%;" /></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">EmberZNet API Reference: For the EM35x SoC Platform
   &#160;<span id="projectnumber">EmberZNet 5.9.2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.2 -->
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__fragment.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Message Fragmentation</div>  </div>
<div class="ingroups"><a class="el" href="group__apputil.htm">Application Utilities API Reference</a></div></div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Transmitting</h2></td></tr>
<tr class="memitem:ga3ad038362a5628df4db6dfe557c28bef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#ga3ad038362a5628df4db6dfe557c28bef">emberFragmentSendUnicast</a> (<a class="el" href="group__ember__types.htm#gab77dd07ca7af23a832974d3cc20c94f3">EmberOutgoingMessageType</a> type, uint16_t indexOrDestination, <a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *apsFrame, <a class="el" href="group__ember__types.htm#gad8cef59e716103f3996ce6cb7e10b017">EmberMessageBuffer</a> payload, uint8_t maxFragmentSize)</td></tr>
<tr class="separator:ga3ad038362a5628df4db6dfe557c28bef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga60fd83d241ecae27769f4c9a698dc01d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#ga60fd83d241ecae27769f4c9a698dc01d">emberFragmentMessageSent</a> (<a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *apsFrame, <a class="el" href="group__ember__types.htm#gad8cef59e716103f3996ce6cb7e10b017">EmberMessageBuffer</a> buffer, <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> status)</td></tr>
<tr class="separator:ga60fd83d241ecae27769f4c9a698dc01d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8196e416039a353f7113dbb461c70dbd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#ga8196e416039a353f7113dbb461c70dbd">emberFragmentMessageSentHandler</a> (<a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> status)</td></tr>
<tr class="separator:ga8196e416039a353f7113dbb461c70dbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Receiving</h2></td></tr>
<tr class="memitem:gaf25f660263091d317b4ba9541a960765"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#gaf25f660263091d317b4ba9541a960765">emberFragmentIncomingMessage</a> (<a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *apsFrame, <a class="el" href="group__ember__types.htm#gad8cef59e716103f3996ce6cb7e10b017">EmberMessageBuffer</a> payload)</td></tr>
<tr class="separator:gaf25f660263091d317b4ba9541a960765"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadc40b62e9ca7e9c7803c2fbfa176773c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#gadc40b62e9ca7e9c7803c2fbfa176773c">emberFragmentTick</a> (void)</td></tr>
<tr class="separator:gadc40b62e9ca7e9c7803c2fbfa176773c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Initialization</h2></td></tr>
<tr class="memitem:gab9de723ae06ecacaa72b0d0cbae54fee"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#gab9de723ae06ecacaa72b0d0cbae54fee">ezspFragmentInit</a> (uint16_t receiveBufferLength, uint8_t *receiveBuffer)</td></tr>
<tr class="separator:gab9de723ae06ecacaa72b0d0cbae54fee"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Transmitting</h2></td></tr>
<tr class="memitem:ga3b49c042b088eaea9863e44ee8e63f73"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#ga3b49c042b088eaea9863e44ee8e63f73">ezspFragmentSendUnicast</a> (<a class="el" href="group__ember__types.htm#gab77dd07ca7af23a832974d3cc20c94f3">EmberOutgoingMessageType</a> type, uint16_t indexOrDestination, <a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *apsFrame, uint8_t maxFragmentSize, uint16_t messageLength, uint8_t *messageContents)</td></tr>
<tr class="separator:ga3b49c042b088eaea9863e44ee8e63f73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3adf91095f1f9f83cc2c1135457bce5f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#ga3adf91095f1f9f83cc2c1135457bce5f">ezspFragmentSourceRouteHandler</a> (void)</td></tr>
<tr class="separator:ga3adf91095f1f9f83cc2c1135457bce5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga309fe138308719f17d5a79a773996bd6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#ga309fe138308719f17d5a79a773996bd6">ezspFragmentMessageSent</a> (<a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *apsFrame, <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> status)</td></tr>
<tr class="separator:ga309fe138308719f17d5a79a773996bd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e2b6e3d9deb29daa915cb4f1190f25c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#ga1e2b6e3d9deb29daa915cb4f1190f25c">ezspFragmentMessageSentHandler</a> (<a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> status)</td></tr>
<tr class="separator:ga1e2b6e3d9deb29daa915cb4f1190f25c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Receiving</h2></td></tr>
<tr class="memitem:ga859f61dd06530e79b83ed8ec57309d92"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#ga859f61dd06530e79b83ed8ec57309d92">ezspFragmentIncomingMessage</a> (<a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *apsFrame, <a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a> sender, uint16_t *messageLength, uint8_t **messageContents)</td></tr>
<tr class="separator:ga859f61dd06530e79b83ed8ec57309d92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadabc497ce059720314e4b878475a2009"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#gadabc497ce059720314e4b878475a2009">ezspFragmentTick</a> (void)</td></tr>
<tr class="separator:gadabc497ce059720314e4b878475a2009"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Splits long messages into smaller blocks for transmission and reassembles received blocks. See <a class="el" href="fragment_8h.htm" title="Splits long messages into smaller blocks for transmission and reassembles received blocks...">fragment.h</a> for source code.</p>
<p><a class="el" href="group__configuration.htm#gaed235dc9ba4ca33fa3a28b9ea17327c0" title="The number of blocks of a fragmented message that can be sent in a single window. The maximum is EMBE...">EMBER_FRAGMENT_WINDOW_SIZE</a> controls how many blocks are sent at a time. <a class="el" href="group__configuration.htm#ga0d2c010603c2d4cb2f6360ca379bbb62" title="The time the stack will wait (in milliseconds) between sending blocks of a fragmented message...">EMBER_FRAGMENT_DELAY_MS</a> controls the spacing between blocks.</p>
<p>To send a long message, the application calls <a class="el" href="group__fragment.htm#ga3ad038362a5628df4db6dfe557c28bef">emberFragmentSendUnicast()</a>. The application must add a call to <a class="el" href="group__fragment.htm#ga60fd83d241ecae27769f4c9a698dc01d">emberFragmentMessageSent()</a> at the start of its <a class="el" href="group__message.htm#gabf132904d585ce31f4697ed5904b31d4" title="A callback invoked by the stack when it has completed sending a message.">emberMessageSentHandler()</a>. If <a class="el" href="group__fragment.htm#ga60fd83d241ecae27769f4c9a698dc01d">emberFragmentMessageSent()</a> returns true, the fragmentation code has handled the event and the application must not process it further. The fragmentation code calls the application-defined <a class="el" href="group__fragment.htm#ga8196e416039a353f7113dbb461c70dbd">emberFragmentMessageSentHandler()</a> when it has finished sending the long message.</p>
<p>To receive a long message, the application must add a call to <a class="el" href="group__fragment.htm#gaf25f660263091d317b4ba9541a960765">emberFragmentIncomingMessage()</a> at the start of its <a class="el" href="group__message.htm#ga9c58e72b74314b649ad0662fa4f0afef" title="A callback invoked by the EmberZNet stack when a message is received.">emberIncomingMessageHandler()</a>. If <a class="el" href="group__fragment.htm#gaf25f660263091d317b4ba9541a960765">emberFragmentIncomingMessage()</a> returns true, the fragmentation code has handled the message and the application must not process it further. The application must also call <a class="el" href="group__fragment.htm#gadc40b62e9ca7e9c7803c2fbfa176773c">emberFragmentTick()</a> regularly.</p>
<p>Fragmented message support for EZSP Hosts. Splits long messages into smaller blocks for transmission and reassembles received blocks. See fragment-host.c for source code.</p>
<p>::EZSP_CONFIG_FRAGMENT_WINDOW_SIZE controls how many blocks are sent at a time. ::EZSP_CONFIG_FRAGMENT_DELAY_MS controls the spacing between blocks.</p>
<p>Before calling any of the other functions listed here, the application must call <a class="el" href="group__fragment.htm#gab9de723ae06ecacaa72b0d0cbae54fee" title="Initialize variables and buffers used for sending and receiving long messages. This functions reads t...">ezspFragmentInit()</a>.</p>
<p>To send a long message, the application calls <a class="el" href="group__fragment.htm#ga3b49c042b088eaea9863e44ee8e63f73" title="Sends a long message by splitting it into blocks. Only one long message can be sent at a time...">ezspFragmentSendUnicast()</a>. The application must add a call to <a class="el" href="group__fragment.htm#ga309fe138308719f17d5a79a773996bd6" title="The application must call this function at the start of its ezspMessageSentHandler(). If it returns true, the fragmentation code has handled the event and the application must not process it further.">ezspFragmentMessageSent()</a> at the start of its ezspMessageSentHandler(). If <a class="el" href="group__fragment.htm#ga309fe138308719f17d5a79a773996bd6" title="The application must call this function at the start of its ezspMessageSentHandler(). If it returns true, the fragmentation code has handled the event and the application must not process it further.">ezspFragmentMessageSent()</a> returns true, the fragmentation code has handled the event and the application must not process it further. The fragmentation code calls the application-defined <a class="el" href="group__fragment.htm#ga1e2b6e3d9deb29daa915cb4f1190f25c" title="The fragmentation code calls this application-defined handler when it finishes sending a long message...">ezspFragmentMessageSentHandler()</a> when it has finished sending the long message.</p>
<p>To receive a long message, the application must add a call to <a class="el" href="group__fragment.htm#ga859f61dd06530e79b83ed8ec57309d92" title="The application must call this function at the start of its ezspIncomingMessageHandler(). If it returns true, the fragmentation code has handled the message and the application must not process it further. When the final block of a long message is received, this function replaces the message with the reassembled long message and returns false so that the application processes it.">ezspFragmentIncomingMessage()</a> at the start of its ezspIncomingMessageHandler(). If <a class="el" href="group__fragment.htm#ga859f61dd06530e79b83ed8ec57309d92" title="The application must call this function at the start of its ezspIncomingMessageHandler(). If it returns true, the fragmentation code has handled the message and the application must not process it further. When the final block of a long message is received, this function replaces the message with the reassembled long message and returns false so that the application processes it.">ezspFragmentIncomingMessage()</a> returns true, the fragmentation code has handled the message and the application must not process it further. The application must also call <a class="el" href="group__fragment.htm#gadabc497ce059720314e4b878475a2009" title="Used by the fragmentation code to time incoming blocks. The application must call this function regul...">ezspFragmentTick()</a> regularly. </p>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga3ad038362a5628df4db6dfe557c28bef"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberFragmentSendUnicast </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gab77dd07ca7af23a832974d3cc20c94f3">EmberOutgoingMessageType</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>indexOrDestination</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *&#160;</td>
          <td class="paramname"><em>apsFrame</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gad8cef59e716103f3996ce6cb7e10b017">EmberMessageBuffer</a>&#160;</td>
          <td class="paramname"><em>payload</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>maxFragmentSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sends a long message by splitting it into blocks. Only one long message can be sent at a time. Calling this function a second time aborts the first message.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">type</td><td>Specifies the outgoing message type. Must be one of <a class="el" href="group__ember__types.htm#ggab77dd07ca7af23a832974d3cc20c94f3a9bd7967c8235081475a36b4a60a18a89">EMBER_OUTGOING_DIRECT</a>, <a class="el" href="group__ember__types.htm#ggab77dd07ca7af23a832974d3cc20c94f3a59161f2c9f34e259c6bacccfc1ff501a">EMBER_OUTGOING_VIA_ADDRESS_TABLE</a>, or <a class="el" href="group__ember__types.htm#ggab77dd07ca7af23a832974d3cc20c94f3accd0c60ca71d623a164a538224c9b86f">EMBER_OUTGOING_VIA_BINDING</a>. </td></tr>
    <tr><td class="paramname">indexOrDestination</td><td>Depending on the type of addressing used, this is either the EmberNodeId of the destination, an index into the address table, or an index into the binding table. </td></tr>
    <tr><td class="paramname">apsFrame</td><td>The APS frame for the message. </td></tr>
    <tr><td class="paramname">payload</td><td>The long message to be sent. </td></tr>
    <tr><td class="paramname">maxFragmentSize</td><td>The message will be broken into blocks no larger than this.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An EmberStatus value.<ul>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a></li>
<li><a class="el" href="group__status__codes.htm#ga2c5a9e09abbc3380a24f613e20e1b4ef" title="The message to be transmitted is too big to fit into a single over-the-air packet.">EMBER_MESSAGE_TOO_LONG</a></li>
<li><a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a></li>
<li><a class="el" href="group__status__codes.htm#gadf8c20e0884530dcb19bd659378efd79" title="The network is not operating.">EMBER_NETWORK_DOWN</a></li>
<li><a class="el" href="group__status__codes.htm#ga5ce8e37f4d09ae79a4e644fecc4d5df5" title="A message cannot be sent because the network is currently overloaded.">EMBER_NETWORK_BUSY</a></li>
<li><a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> is returned if the payload length is zero or if the window size (<a class="el" href="group__configuration.htm#gaed235dc9ba4ca33fa3a28b9ea17327c0" title="The number of blocks of a fragmented message that can be sent in a single window. The maximum is EMBE...">EMBER_FRAGMENT_WINDOW_SIZE</a>) is zero. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga60fd83d241ecae27769f4c9a698dc01d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberFragmentMessageSent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *&#160;</td>
          <td class="paramname"><em>apsFrame</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gad8cef59e716103f3996ce6cb7e10b017">EmberMessageBuffer</a>&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td>
          <td class="paramname"><em>status</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The application must call this function at the start of its <a class="el" href="group__message.htm#gabf132904d585ce31f4697ed5904b31d4" title="A callback invoked by the stack when it has completed sending a message.">emberMessageSentHandler()</a>. If it returns true, the fragmentation code has handled the event and the application must not process it further.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">apsFrame</td><td>The APS frame passed to <a class="el" href="group__message.htm#gabf132904d585ce31f4697ed5904b31d4" title="A callback invoked by the stack when it has completed sending a message.">emberMessageSentHandler()</a>. </td></tr>
    <tr><td class="paramname">buffer</td><td>The buffer passed to <a class="el" href="group__message.htm#gabf132904d585ce31f4697ed5904b31d4" title="A callback invoked by the stack when it has completed sending a message.">emberMessageSentHandler()</a>. </td></tr>
    <tr><td class="paramname">status</td><td>The status passed to <a class="el" href="group__message.htm#gabf132904d585ce31f4697ed5904b31d4" title="A callback invoked by the stack when it has completed sending a message.">emberMessageSentHandler()</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the sent message was a block of a long message. The fragmentation code has handled the event so the application must return immediately from its <a class="el" href="group__message.htm#gabf132904d585ce31f4697ed5904b31d4" title="A callback invoked by the stack when it has completed sending a message.">emberMessageSentHandler()</a>. Returns false otherwise. The fragmentation code has not handled the event so the application must continue to process it. </dd></dl>

</div>
</div>
<a class="anchor" id="ga8196e416039a353f7113dbb461c70dbd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberFragmentMessageSentHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td>
          <td class="paramname"><em>status</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The fragmentation code calls this application-defined handler when it finishes sending a long message.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">status</td><td><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if all the blocks of the long message were delivered to the destination, otherwise <a class="el" href="group__status__codes.htm#ga3149c5a575bba8685e7cf7ea15d5c89a" title="The APS layer attempted to send or deliver a message, but it failed.">EMBER_DELIVERY_FAILED</a>, <a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a>, <a class="el" href="group__status__codes.htm#gadf8c20e0884530dcb19bd659378efd79" title="The network is not operating.">EMBER_NETWORK_DOWN</a> or <a class="el" href="group__status__codes.htm#ga5ce8e37f4d09ae79a4e644fecc4d5df5" title="A message cannot be sent because the network is currently overloaded.">EMBER_NETWORK_BUSY</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaf25f660263091d317b4ba9541a960765"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberFragmentIncomingMessage </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *&#160;</td>
          <td class="paramname"><em>apsFrame</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gad8cef59e716103f3996ce6cb7e10b017">EmberMessageBuffer</a>&#160;</td>
          <td class="paramname"><em>payload</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The application must call this function at the start of its <a class="el" href="group__message.htm#ga9c58e72b74314b649ad0662fa4f0afef" title="A callback invoked by the EmberZNet stack when a message is received.">emberIncomingMessageHandler()</a>. If it returns true, the fragmentation code has handled the message and the application must not process it further. When the final block of a long message is received, this function replaces the message with the reassembled long message and returns false so that the application processes it.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">apsFrame</td><td>The APS frame passed to <a class="el" href="group__message.htm#ga9c58e72b74314b649ad0662fa4f0afef" title="A callback invoked by the EmberZNet stack when a message is received.">emberIncomingMessageHandler()</a>. </td></tr>
    <tr><td class="paramname">payload</td><td>The payload passed to <a class="el" href="group__message.htm#ga9c58e72b74314b649ad0662fa4f0afef" title="A callback invoked by the EmberZNet stack when a message is received.">emberIncomingMessageHandler()</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the incoming message was a block of an incomplete long message. The fragmentation code has handled the message so the application must return immediately from its <a class="el" href="group__message.htm#ga9c58e72b74314b649ad0662fa4f0afef" title="A callback invoked by the EmberZNet stack when a message is received.">emberIncomingMessageHandler()</a>. Returns false if the incoming message was not part of a long message. The fragmentation code has not handled the message so the application must continue to process it. Returns false if the incoming message was a block that completed a long message. The fragmentation code replaces the message with the reassembled long message so the application must continue to process it. </dd></dl>

</div>
</div>
<a class="anchor" id="gadc40b62e9ca7e9c7803c2fbfa176773c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberFragmentTick </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Used by the fragmentation code to time incoming blocks. The application must call this function regularly. </p>

</div>
</div>
<a class="anchor" id="gab9de723ae06ecacaa72b0d0cbae54fee"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezspFragmentInit </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>receiveBufferLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>receiveBuffer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize variables and buffers used for sending and receiving long messages. This functions reads the values of ::EZSP_CONFIG_MAX_HOPS and ::EZSP_CONFIG_FRAGMENT_WINDOW_SIZE. The application must set these values before calling this function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">receiveBufferLength</td><td>The length of receiveBuffer. Incoming messages longer than this will be dropped. </td></tr>
    <tr><td class="paramname">receiveBuffer</td><td>The buffer used to reassemble incoming long messages. Once the message is complete, this buffer will be passed back to the application by <a class="el" href="group__fragment.htm#ga859f61dd06530e79b83ed8ec57309d92" title="The application must call this function at the start of its ezspIncomingMessageHandler(). If it returns true, the fragmentation code has handled the message and the application must not process it further. When the final block of a long message is received, this function replaces the message with the reassembled long message and returns false so that the application processes it.">ezspFragmentIncomingMessage()</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga3b49c042b088eaea9863e44ee8e63f73"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> ezspFragmentSendUnicast </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gab77dd07ca7af23a832974d3cc20c94f3">EmberOutgoingMessageType</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>indexOrDestination</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *&#160;</td>
          <td class="paramname"><em>apsFrame</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>maxFragmentSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>messageLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>messageContents</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sends a long message by splitting it into blocks. Only one long message can be sent at a time. Calling this function a second time aborts the first message. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">type</td><td>Specifies the outgoing message type. Must be one of <a class="el" href="group__ember__types.htm#ggab77dd07ca7af23a832974d3cc20c94f3a9bd7967c8235081475a36b4a60a18a89">EMBER_OUTGOING_DIRECT</a>, <a class="el" href="group__ember__types.htm#ggab77dd07ca7af23a832974d3cc20c94f3a59161f2c9f34e259c6bacccfc1ff501a">EMBER_OUTGOING_VIA_ADDRESS_TABLE</a>, or <a class="el" href="group__ember__types.htm#ggab77dd07ca7af23a832974d3cc20c94f3accd0c60ca71d623a164a538224c9b86f">EMBER_OUTGOING_VIA_BINDING</a>. </td></tr>
    <tr><td class="paramname">indexOrDestination</td><td>Depending on the type of addressing used, this is either the EmberNodeId of the destination, an index into the address table, or an index into the binding table. </td></tr>
    <tr><td class="paramname">apsFrame</td><td>The APS frame for the message. </td></tr>
    <tr><td class="paramname">maxFragmentSize</td><td>The message will be broken into blocks no larger than this. </td></tr>
    <tr><td class="paramname">messageLength</td><td>The length of the messageContents parameter in bytes. </td></tr>
    <tr><td class="paramname">messageContents</td><td>The long message to be sent.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An EmberStatus value.<ul>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a></li>
<li><a class="el" href="group__status__codes.htm#ga2c5a9e09abbc3380a24f613e20e1b4ef" title="The message to be transmitted is too big to fit into a single over-the-air packet.">EMBER_MESSAGE_TOO_LONG</a></li>
<li><a class="el" href="group__status__codes.htm#gadf8c20e0884530dcb19bd659378efd79" title="The network is not operating.">EMBER_NETWORK_DOWN</a></li>
<li><a class="el" href="group__status__codes.htm#ga5ce8e37f4d09ae79a4e644fecc4d5df5" title="A message cannot be sent because the network is currently overloaded.">EMBER_NETWORK_BUSY</a></li>
<li><a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> is returned if messageLength is zero or if the window size (::EZSP_CONFIG_FRAGMENT_WINDOW_SIZE) is zero. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga3adf91095f1f9f83cc2c1135457bce5f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> ezspFragmentSourceRouteHandler </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A callback invoked just before each block of the current long message is sent. If the message is to be source routed, the application must define this callback and call ezspSetSourceRoute() in it. </p>
<p>The application must define EZSP_APPLICATION_HAS_FRAGMENT_SOURCE_ROUTE_HANDLER in its configuration header if it defines this callback.</p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the source route has been set. Any other value will abort transmission of the current long message. </dd></dl>

</div>
</div>
<a class="anchor" id="ga309fe138308719f17d5a79a773996bd6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ezspFragmentMessageSent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *&#160;</td>
          <td class="paramname"><em>apsFrame</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td>
          <td class="paramname"><em>status</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The application must call this function at the start of its ezspMessageSentHandler(). If it returns true, the fragmentation code has handled the event and the application must not process it further. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">apsFrame</td><td>The APS frame passed to ezspMessageSentHandler(). </td></tr>
    <tr><td class="paramname">status</td><td>The status passed to ezspMessageSentHandler().</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the sent message was a block of a long message. The fragmentation code has handled the event so the application must return immediately from its ezspMessageSentHandler(). Returns false otherwise. The fragmentation code has not handled the event so the application must continue to process it. </dd></dl>

</div>
</div>
<a class="anchor" id="ga1e2b6e3d9deb29daa915cb4f1190f25c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezspFragmentMessageSentHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td>
          <td class="paramname"><em>status</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The fragmentation code calls this application-defined handler when it finishes sending a long message. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">status</td><td><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if all the blocks of the long message were delivered to the destination, otherwise <a class="el" href="group__status__codes.htm#ga3149c5a575bba8685e7cf7ea15d5c89a" title="The APS layer attempted to send or deliver a message, but it failed.">EMBER_DELIVERY_FAILED</a>, <a class="el" href="group__status__codes.htm#gadf8c20e0884530dcb19bd659378efd79" title="The network is not operating.">EMBER_NETWORK_DOWN</a> or <a class="el" href="group__status__codes.htm#ga5ce8e37f4d09ae79a4e644fecc4d5df5" title="A message cannot be sent because the network is currently overloaded.">EMBER_NETWORK_BUSY</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga859f61dd06530e79b83ed8ec57309d92"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ezspFragmentIncomingMessage </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *&#160;</td>
          <td class="paramname"><em>apsFrame</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a>&#160;</td>
          <td class="paramname"><em>sender</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t *&#160;</td>
          <td class="paramname"><em>messageLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t **&#160;</td>
          <td class="paramname"><em>messageContents</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The application must call this function at the start of its ezspIncomingMessageHandler(). If it returns true, the fragmentation code has handled the message and the application must not process it further. When the final block of a long message is received, this function replaces the message with the reassembled long message and returns false so that the application processes it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">apsFrame</td><td>The APS frame passed to ezspIncomingMessageHandler(). </td></tr>
    <tr><td class="paramname">sender</td><td>The sender passed to ezspIncomingMessageHandler(). </td></tr>
    <tr><td class="paramname">messageLength</td><td>A pointer to the message length passed to ezspIncomingMessageHandler(). </td></tr>
    <tr><td class="paramname">messageContents</td><td>A pointer to the message contents passed to ezspIncomingMessageHandler().</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the incoming message was a block of an incomplete long message. The fragmentation code has handled the message so the application must return immediately from its ezspIncomingMessageHandler(). Returns false if the incoming message was not part of a long message. The fragmentation code has not handled the message so the application must continue to process it. Returns false if the incoming message was a block that completed a long message. The fragmentation code replaces the message with the reassembled long message so the application must continue to process it. </dd></dl>

</div>
</div>
<a class="anchor" id="gadabc497ce059720314e4b878475a2009"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezspFragmentTick </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Used by the fragmentation code to time incoming blocks. The application must call this function regularly. </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<hr size="1">
<table border="0" cellspacing="0" cellpadding="0" width=100%>
<tr>
<td><address><small>
EmberZNet API Reference: For the EM35x SoC Platform. EmberZNet 5.9.2.0.
</small></address>
</td>
<td align="right">
<address><small>
</small></address>
</td>
</tr>
</table>
</body>
</html>
