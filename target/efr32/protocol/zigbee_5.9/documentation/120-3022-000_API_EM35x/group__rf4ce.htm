<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>EmberZNet API Reference: For the EM35x SoC Platform</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
</head>
<body>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td><img src="SiliconLabsLogo_Black.jpg" style="padding: 10px;width:40%;height:40%;" /></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">EmberZNet API Reference: For the EM35x SoC Platform
   &#160;<span id="projectnumber">EmberZNet 5.9.2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.2 -->
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__rf4ce.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Ember ZigBee RF4CE APIs and Handlers</div>  </div>
<div class="ingroups"><a class="el" href="group__ember__rf4ce.htm">Ember ZigBee RF4CE Stack API Reference</a></div></div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga4ffde6512cb585375f56c70cad0c4e6e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#ga4ffde6512cb585375f56c70cad0c4e6e">emberRf4ceSetPairingTableEntry</a> (uint8_t pairingIndex, <a class="el" href="structEmberRf4cePairingTableEntry.htm">EmberRf4cePairingTableEntry</a> *entry)</td></tr>
<tr class="separator:ga4ffde6512cb585375f56c70cad0c4e6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad955bec8c854d90b36e3a64f36838f90"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#gad955bec8c854d90b36e3a64f36838f90">emberRf4ceGetPairingTableEntry</a> (uint8_t pairingIndex, <a class="el" href="structEmberRf4cePairingTableEntry.htm">EmberRf4cePairingTableEntry</a> *entry)</td></tr>
<tr class="separator:gad955bec8c854d90b36e3a64f36838f90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga460b9253f031dffe71c4847a655644f6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#ga460b9253f031dffe71c4847a655644f6">emberRf4ceSetApplicationInfo</a> (<a class="el" href="structEmberRf4ceApplicationInfo.htm">EmberRf4ceApplicationInfo</a> *appInfo)</td></tr>
<tr class="separator:ga460b9253f031dffe71c4847a655644f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga26d20a9ed09fa583ab9066f6b5aba745"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#ga26d20a9ed09fa583ab9066f6b5aba745">emberRf4ceGetApplicationInfo</a> (<a class="el" href="structEmberRf4ceApplicationInfo.htm">EmberRf4ceApplicationInfo</a> *appInfo)</td></tr>
<tr class="separator:ga26d20a9ed09fa583ab9066f6b5aba745"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5856c3f50aaa8354efb30880bc7eb19a"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#ga5856c3f50aaa8354efb30880bc7eb19a">emberRf4ceGetBaseChannel</a> (void)</td></tr>
<tr class="separator:ga5856c3f50aaa8354efb30880bc7eb19a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga527eb348063af7f2abab14371db7e488"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#ga527eb348063af7f2abab14371db7e488">emberRf4ceKeyUpdate</a> (uint8_t pairingIndex, <a class="el" href="structEmberKeyData.htm">EmberKeyData</a> *key)</td></tr>
<tr class="separator:ga527eb348063af7f2abab14371db7e488"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gada7947de1780c6fa99246fdd298ad9ca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#gada7947de1780c6fa99246fdd298ad9ca">emberRf4ceSend</a> (uint8_t pairingIndex, uint8_t profileId, uint16_t vendorId, <a class="el" href="group__rf4ce__types.htm#ga4cb1c0fc2ef7cacf63e6a921ba5fe82c">EmberRf4ceTxOption</a> txOptions, uint8_t messageTag, uint8_t messageLength, uint8_t *message)</td></tr>
<tr class="separator:gada7947de1780c6fa99246fdd298ad9ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf43356d00f5e3808e00b656d0051dded"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#gaf43356d00f5e3808e00b656d0051dded">emberRf4ceMessageSentHandler</a> (<a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> status, uint8_t pairingIndex, <a class="el" href="group__rf4ce__types.htm#ga4cb1c0fc2ef7cacf63e6a921ba5fe82c">EmberRf4ceTxOption</a> txOptions, uint8_t profileId, uint16_t vendorId, uint8_t messageTag, uint8_t messageLength, uint8_t *message)</td></tr>
<tr class="separator:gaf43356d00f5e3808e00b656d0051dded"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga00d5c55dcb03b75fba60d1e1e33671db"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#ga00d5c55dcb03b75fba60d1e1e33671db">emberRf4ceIncomingMessageHandler</a> (uint8_t pairingIndex, uint8_t profileId, uint16_t vendorId, <a class="el" href="group__rf4ce__types.htm#ga4cb1c0fc2ef7cacf63e6a921ba5fe82c">EmberRf4ceTxOption</a> txOptions, uint8_t messageLength, uint8_t *message)</td></tr>
<tr class="separator:ga00d5c55dcb03b75fba60d1e1e33671db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa1418af6306cedf3a06b4155356d4f5c"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#gaa1418af6306cedf3a06b4155356d4f5c">emberRf4ceGetMaxPayload</a> (uint8_t pairingIndex, <a class="el" href="group__rf4ce__types.htm#ga4cb1c0fc2ef7cacf63e6a921ba5fe82c">EmberRf4ceTxOption</a> txOptions)</td></tr>
<tr class="separator:gaa1418af6306cedf3a06b4155356d4f5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga25cc6213d70854bce7ffbf384dcf2a3d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#ga25cc6213d70854bce7ffbf384dcf2a3d">emberRf4ceStart</a> (<a class="el" href="group__rf4ce__types.htm#gaa5d4409c3aebab681c4e856cca7a7ad4">EmberRf4ceNodeCapabilities</a> capabilities, <a class="el" href="structEmberRf4ceVendorInfo.htm">EmberRf4ceVendorInfo</a> *vendorInfo, int8_t power)</td></tr>
<tr class="separator:ga25cc6213d70854bce7ffbf384dcf2a3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac174af0d2df28f31ea4ae44fcc84a916"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#gac174af0d2df28f31ea4ae44fcc84a916">emberRf4ceStop</a> (void)</td></tr>
<tr class="separator:gac174af0d2df28f31ea4ae44fcc84a916"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae2d740cae29f40f598d47d4fc6919799"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#gae2d740cae29f40f598d47d4fc6919799">emberRf4ceDiscovery</a> (<a class="el" href="group__ember__types.htm#ga5d4c51573517c485740b1a0cc43427cf">EmberPanId</a> panId, <a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a> nodeId, uint8_t searchDevType, uint16_t discDuration, uint8_t maxDiscRepetitions, uint8_t discProfileIdListLength, uint8_t *discProfileIdList)</td></tr>
<tr class="separator:gae2d740cae29f40f598d47d4fc6919799"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga47fc0bcf318b1bd28473fb8d83546dc5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#ga47fc0bcf318b1bd28473fb8d83546dc5">emberRf4ceDiscoveryCompleteHandler</a> (<a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> status)</td></tr>
<tr class="separator:ga47fc0bcf318b1bd28473fb8d83546dc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5123e721e0a52e82688620873e4251e3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#ga5123e721e0a52e82688620873e4251e3">emberRf4ceDiscoveryRequestHandler</a> (<a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a> srcIeeeAddr, uint8_t nodeCapabilities, <a class="el" href="structEmberRf4ceVendorInfo.htm">EmberRf4ceVendorInfo</a> *vendorInfo, <a class="el" href="structEmberRf4ceApplicationInfo.htm">EmberRf4ceApplicationInfo</a> *appInfo, uint8_t searchDevType, uint8_t rxLinkQuality)</td></tr>
<tr class="separator:ga5123e721e0a52e82688620873e4251e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga665b10b498cc54d7b67b43ce5e087efb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#ga665b10b498cc54d7b67b43ce5e087efb">emberRf4ceDiscoveryResponseHandler</a> (bool atCapacity, uint8_t channel, <a class="el" href="group__ember__types.htm#ga5d4c51573517c485740b1a0cc43427cf">EmberPanId</a> panId, <a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a> srcIeeeAddr, uint8_t nodeCapabilities, <a class="el" href="structEmberRf4ceVendorInfo.htm">EmberRf4ceVendorInfo</a> *vendorInfo, <a class="el" href="structEmberRf4ceApplicationInfo.htm">EmberRf4ceApplicationInfo</a> *appInfo, uint8_t rxLinkQuality, uint8_t discRequestLqi)</td></tr>
<tr class="separator:ga665b10b498cc54d7b67b43ce5e087efb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga180e9a08a835b7c6d27904c1e6a6cb0f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#ga180e9a08a835b7c6d27904c1e6a6cb0f">emberRf4ceEnableAutoDiscoveryResponse</a> (uint16_t duration)</td></tr>
<tr class="separator:ga180e9a08a835b7c6d27904c1e6a6cb0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaebb5ebce7a595ca603c5c6e3d7372fc6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#gaebb5ebce7a595ca603c5c6e3d7372fc6">emberRf4ceAutoDiscoveryResponseCompleteHandler</a> (<a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> status, <a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a> srcIeeeAddr, uint8_t nodeCapabilities, <a class="el" href="structEmberRf4ceVendorInfo.htm">EmberRf4ceVendorInfo</a> *vendorInfo, <a class="el" href="structEmberRf4ceApplicationInfo.htm">EmberRf4ceApplicationInfo</a> *appInfo, uint8_t searchDevType)</td></tr>
<tr class="separator:gaebb5ebce7a595ca603c5c6e3d7372fc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7bd9a1087216bdd79cc6ec3f319eeaf8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#ga7bd9a1087216bdd79cc6ec3f319eeaf8">emberRf4cePair</a> (uint8_t channel, <a class="el" href="group__ember__types.htm#ga5d4c51573517c485740b1a0cc43427cf">EmberPanId</a> panId, <a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a> ieeeAddr, uint8_t keyExchangeTransferCount)</td></tr>
<tr class="separator:ga7bd9a1087216bdd79cc6ec3f319eeaf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac14073d041b4f72618d036427cef77a5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#gac14073d041b4f72618d036427cef77a5">emberRf4cePairCompleteHandler</a> (<a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> status, uint8_t pairingIndex, <a class="el" href="structEmberRf4ceVendorInfo.htm">EmberRf4ceVendorInfo</a> *vendorInfo, <a class="el" href="structEmberRf4ceApplicationInfo.htm">EmberRf4ceApplicationInfo</a> *appInfo)</td></tr>
<tr class="separator:gac14073d041b4f72618d036427cef77a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga359197c8b79844d731bf50751f282619"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#ga359197c8b79844d731bf50751f282619">emberRf4cePairRequestHandler</a> (<a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> status, uint8_t pairingIndex, <a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a> srcIeeeAddr, uint8_t nodeCapabilities, <a class="el" href="structEmberRf4ceVendorInfo.htm">EmberRf4ceVendorInfo</a> *vendorInfo, <a class="el" href="structEmberRf4ceApplicationInfo.htm">EmberRf4ceApplicationInfo</a> *appInfo, uint8_t keyExchangeTransferCount)</td></tr>
<tr class="separator:ga359197c8b79844d731bf50751f282619"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae074d521322290bcb440d1f8eca8bb62"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#gae074d521322290bcb440d1f8eca8bb62">emberRf4ceUnpair</a> (uint8_t pairingIndex)</td></tr>
<tr class="separator:gae074d521322290bcb440d1f8eca8bb62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae92282ed864997e5e795934d20285e8b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#gae92282ed864997e5e795934d20285e8b">emberRf4ceUnpairHandler</a> (uint8_t pairingIndex)</td></tr>
<tr class="separator:gae92282ed864997e5e795934d20285e8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab12796e41c18118c6f1e8ecf27be80b1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#gab12796e41c18118c6f1e8ecf27be80b1">emberRf4ceUnpairCompleteHandler</a> (uint8_t pairingIndex)</td></tr>
<tr class="separator:gab12796e41c18118c6f1e8ecf27be80b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7c936ac63c5289931aff812d76427ae3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#ga7c936ac63c5289931aff812d76427ae3">emberRf4ceSetPowerSavingParameters</a> (uint32_t dutyCycle, uint32_t activePeriod)</td></tr>
<tr class="separator:ga7c936ac63c5289931aff812d76427ae3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafd0168ea227160f41047d62874c5530e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#gafd0168ea227160f41047d62874c5530e">emberRf4ceSetFrequencyAgilityParameters</a> (uint8_t rssiWindowSize, uint8_t channelChangeReads, int8_t rssiThreshold, uint16_t readInterval, uint8_t readDuration)</td></tr>
<tr class="separator:gafd0168ea227160f41047d62874c5530e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0298f5125f25df3cbd02ac787afcdeb4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__rf4ce.htm#ga0298f5125f25df3cbd02ac787afcdeb4">emberRf4ceSetDiscoveryLqiThreshold</a> (uint8_t threshold)</td></tr>
<tr class="separator:ga0298f5125f25df3cbd02ac787afcdeb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>See <a class="el" href="rf4ce-api_8h.htm" title="ZigBee RF4CE stack APIs and callbacks. See Ember ZigBee RF4CE APIs and Handlers for documentation...">rf4ce-api.h</a> for source code. </p>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga4ffde6512cb585375f56c70cad0c4e6e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberRf4ceSetPairingTableEntry </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>pairingIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberRf4cePairingTableEntry.htm">EmberRf4cePairingTableEntry</a> *&#160;</td>
          <td class="paramname"><em>entry</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the pairing table entry corresponding to the passed index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pairingIndex</td><td>The index of the pairing table entry to be set.</td></tr>
    <tr><td class="paramname">entry</td><td>A pointer to an <a class="el" href="structEmberRf4cePairingTableEntry.htm" title="The internal representation of a pairing table entry.">EmberRf4cePairingTableEntry</a> struct to be copied into the pairing table at the passed index. If the passed pointer is NULL, the stack will delete the entry stored at the passed pairing index.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the pairing table entry was successfully set. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> if the current network is not an RF4CE network, or the node hasn't been started, or the node is currently busy performing some discovery or pairing process. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga94e4571b0d51de18901d714ecdad8f46" title="An index was passed into the function that was larger than the valid range.">EMBER_INDEX_OUT_OF_RANGE</a> if the specified index is outside the valid range. </dd></dl>

</div>
</div>
<a class="anchor" id="gad955bec8c854d90b36e3a64f36838f90"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberRf4ceGetPairingTableEntry </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>pairingIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberRf4cePairingTableEntry.htm">EmberRf4cePairingTableEntry</a> *&#160;</td>
          <td class="paramname"><em>entry</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Retrieves the pairing table entry stored at the passed index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pairingIndex</td><td>The index of the requested pairing table entry.</td></tr>
    <tr><td class="paramname">entry</td><td>A pointer to an <a class="el" href="structEmberRf4cePairingTableEntry.htm" title="The internal representation of a pairing table entry.">EmberRf4cePairingTableEntry</a> struct where the requested pairing table entry will be copied.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the requested entry was successfully copied in the passed <a class="el" href="structEmberRf4cePairingTableEntry.htm" title="The internal representation of a pairing table entry.">EmberRf4cePairingTableEntry</a> struct. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> if the current network is not an RF4CE network, or the node hasn't been started or the node is currently busy performing some discovery or pairing process. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga94e4571b0d51de18901d714ecdad8f46" title="An index was passed into the function that was larger than the valid range.">EMBER_INDEX_OUT_OF_RANGE</a> if the specified index is outside the valid range. </dd></dl>

</div>
</div>
<a class="anchor" id="ga460b9253f031dffe71c4847a655644f6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberRf4ceSetApplicationInfo </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberRf4ceApplicationInfo.htm">EmberRf4ceApplicationInfo</a> *&#160;</td>
          <td class="paramname"><em>appInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the application information of the node. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">appInfo</td><td>A pointer to an <a class="el" href="structEmberRf4ceApplicationInfo.htm" title="Defines the application information block (see section 3.3.1, Figure 17).">EmberRf4ceApplicationInfo</a> containing the application information to be set at the node.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the application information was successfully set. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> if the stack failed to set the application information. This API can be called before and after the node has been started. </dd></dl>

</div>
</div>
<a class="anchor" id="ga26d20a9ed09fa583ab9066f6b5aba745"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberRf4ceGetApplicationInfo </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberRf4ceApplicationInfo.htm">EmberRf4ceApplicationInfo</a> *&#160;</td>
          <td class="paramname"><em>appInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Retrieves the application information of the node. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">appInfo</td><td>A pointer to an <a class="el" href="structEmberRf4ceApplicationInfo.htm" title="Defines the application information block (see section 3.3.1, Figure 17).">EmberRf4ceApplicationInfo</a> where the stack will copy the application information of the node.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the application information was successfully retrieved. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> if the stack failed to retrieve the application information. </dd></dl>

</div>
</div>
<a class="anchor" id="ga5856c3f50aaa8354efb30880bc7eb19a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t emberRf4ceGetBaseChannel </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Retrieves the device base channel as specified in the RF4CE specs. </p>
<dl class="section return"><dt>Returns</dt><dd>The base channel of the device. </dd></dl>

</div>
</div>
<a class="anchor" id="ga527eb348063af7f2abab14371db7e488"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberRf4ceKeyUpdate </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>pairingIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberKeyData.htm">EmberKeyData</a> *&#160;</td>
          <td class="paramname"><em>key</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>An API for updating the link key of a pairing table entry. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pairingIndex</td><td>The index of the pairing table entry to be updated.</td></tr>
    <tr><td class="paramname">key</td><td>A pointer to an <a class="el" href="structEmberKeyData.htm" title="This data structure contains the key data that is passed into various other functions.">EmberKeyData</a> struct containing the new key.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_SUCCESS if the pairing table entry was successfully updated. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_INDEX_OUT_OF_RANGE if the specified index is outside the valid range. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_INVALID_CALL if the current network is not an RF4CE network, or the node hasn't been started, or the node is currently busy performing some discovery or pairing process, or if the passed pairing index does not correspond to an active secured pairing link and/or the node does not support security. </dd></dl>

</div>
</div>
<a class="anchor" id="gada7947de1780c6fa99246fdd298ad9ca"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberRf4ceSend </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>pairingIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>profileId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>vendorId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__rf4ce__types.htm#ga4cb1c0fc2ef7cacf63e6a921ba5fe82c">EmberRf4ceTxOption</a>&#160;</td>
          <td class="paramname"><em>txOptions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>messageTag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>messageLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>message</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sends a message as per the ZigBee RF4CE specification. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pairingIndex</td><td>The index of the entry in the pairing table to be used to transmit the packet. this parameter is ignored if broadcast bit is set in the txOptions bitmask.</td></tr>
    <tr><td class="paramname">profileId</td><td>The profile ID to be included in the RF4CE network header of the outgoing RF4CE network DATA frame.</td></tr>
    <tr><td class="paramname">vendorId</td><td>The vendor ID to be included in the RF4CE network header of the outgoing RF4CE network DATA frame. This field is meaningful only if the EMBER_RF4CE_TX_OPTIONS_VENDOR_SPECIFIC_BIT is set in the txOptions bitmask.</td></tr>
    <tr><td class="paramname">txOptions</td><td>7-bit transmission options bitmask as per ZigBee RF4CE specification (see Table 2, section 3.1.1.1.1).</td></tr>
    <tr><td class="paramname">messageTag</td><td>A value chosen by the application. This value will be passed in the corresponding <a class="el" href="group__rf4ce.htm#gaf43356d00f5e3808e00b656d0051dded" title="A callback invoked by the ZigBee RF4CE stack when it has completed sending a message.">emberRf4ceMessageSentHandler()</a> call.</td></tr>
    <tr><td class="paramname">messageLength</td><td>The length in bytes of the message to be sent.</td></tr>
    <tr><td class="paramname">message</td><td>A pointer to the message to be sent.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value. For any result other than <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a>, the message will not be sent.<ul>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> - The message has been submitted for transmission.</li>
<li><a class="el" href="group__status__codes.htm#ga94e4571b0d51de18901d714ecdad8f46" title="An index was passed into the function that was larger than the valid range.">EMBER_INDEX_OUT_OF_RANGE</a> - If the application requested a unicast transmission and the passed pairingIndex parameter is an invalid index.</li>
<li>:: EMBER_MESSAGE_TOO_LONG - If the passed message is too long. Notice that the maximum payload allowed for a certain combination of pairing index and TX options can be retrieved using the <a class="el" href="group__rf4ce.htm#gaa1418af6306cedf3a06b4155356d4f5c" title="An API that returns the maximum payload of an RF4CE network DATA frame according to the passed pairin...">emberRf4ceGetMaxPayload()</a> API.</li>
<li><a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> - If at least one of the following requirements are not met.<ul>
<li>The current network is an RF4CE network.</li>
<li>The current network is up and running.</li>
<li>The node is busy performing some discovery or pairing process.</li>
<li>Unicast transmissions require that the passed pairingIndex corresponds to an active pairing entry.</li>
<li>Broadcast transmissions can not be acked, encrypted or use long addressing.</li>
<li>Secured transmissions can only be unicast and require a secured pairing entry.</li>
<li>If channel designator is to be included in the packet, the transmission must be acked, the node must be a target and the destination must support channel normalization.</li>
</ul>
</li>
<li><a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a> - The message was not sent because of RAM shortage.</li>
<li><a class="el" href="group__status__codes.htm#ga3149c5a575bba8685e7cf7ea15d5c89a" title="The APS layer attempted to send or deliver a message, but it failed.">EMBER_DELIVERY_FAILED</a> - The message was rejected by the Network or MAC layers. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gaf43356d00f5e3808e00b656d0051dded"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberRf4ceMessageSentHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td>
          <td class="paramname"><em>status</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>pairingIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__rf4ce__types.htm#ga4cb1c0fc2ef7cacf63e6a921ba5fe82c">EmberRf4ceTxOption</a>&#160;</td>
          <td class="paramname"><em>txOptions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>profileId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>vendorId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>messageTag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>messageLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>message</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A callback invoked by the ZigBee RF4CE stack when it has completed sending a message. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">status</td><td>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of:<ul>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> - The message was successfully delivered.</li>
<li><a class="el" href="group__status__codes.htm#ga3149c5a575bba8685e7cf7ea15d5c89a" title="The APS layer attempted to send or deliver a message, but it failed.">EMBER_DELIVERY_FAILED</a> - The message was not delivered.</li>
</ul>
</td></tr>
    <tr><td class="paramname">pairingIndex</td><td>The index of the entry in the pairing table used to transmit the message.</td></tr>
    <tr><td class="paramname">txOptions</td><td>The TX options bitmask as per ZigBee RF4CE specification used for transmitting the packet.</td></tr>
    <tr><td class="paramname">profileId</td><td>The profile ID included in the message.</td></tr>
    <tr><td class="paramname">vendorId</td><td>The vendor ID included in the message, if any.</td></tr>
    <tr><td class="paramname">messageTag</td><td>The tag value that was originally passed by the application in the <a class="el" href="group__rf4ce.htm#gada7947de1780c6fa99246fdd298ad9ca" title="Sends a message as per the ZigBee RF4CE specification.">emberRf4ceSend()</a> API.</td></tr>
    <tr><td class="paramname">messageLength</td><td>The length in bytes of the message.</td></tr>
    <tr><td class="paramname">message</td><td>A pointer to the payload of the message that was sent. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga00d5c55dcb03b75fba60d1e1e33671db"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberRf4ceIncomingMessageHandler </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>pairingIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>profileId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>vendorId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__rf4ce__types.htm#ga4cb1c0fc2ef7cacf63e6a921ba5fe82c">EmberRf4ceTxOption</a>&#160;</td>
          <td class="paramname"><em>txOptions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>messageLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>message</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A callback invoked by the ZigBee RF4CE stack when a message is received. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pairingIndex</td><td>The index of the entry in the pairing table corresponding to the PAN on which the message was received.</td></tr>
    <tr><td class="paramname">profileId</td><td>The profile ID included in the message.</td></tr>
    <tr><td class="paramname">vendorId</td><td>The vendor ID included in the message, if any.</td></tr>
    <tr><td class="paramname">txOptions</td><td>The TX options used by the source node to transmit the received message.</td></tr>
    <tr><td class="paramname">messageLength</td><td>The length in bytes of the received message.</td></tr>
    <tr><td class="paramname">message</td><td>A pointer to the payload of the received message. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaa1418af6306cedf3a06b4155356d4f5c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t emberRf4ceGetMaxPayload </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>pairingIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__rf4ce__types.htm#ga4cb1c0fc2ef7cacf63e6a921ba5fe82c">EmberRf4ceTxOption</a>&#160;</td>
          <td class="paramname"><em>txOptions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>An API that returns the maximum payload of an RF4CE network DATA frame according to the passed pairing index and TX options. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pairingIndex</td><td>The index of the pairing table entry a packet shall be sent to. This parameter is meaningful only if the EMBER_RF4CE_TX_OPTIONS_BROADCAST_BIT bit in the passed TX options is not set.</td></tr>
    <tr><td class="paramname">txOptions</td><td>The TX options bitmask.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The maximum allowed payload in bytes according to the passed pairing index and TX options. Notice that if the EMBER_RF4CE_TX_OPTIONS_BROADCAST_BIT bit is not set in the TX options bitmask and the passed pairing index is not valid, 0 is returned. </dd></dl>

</div>
</div>
<a class="anchor" id="ga25cc6213d70854bce7ffbf384dcf2a3d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberRf4ceStart </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__rf4ce__types.htm#gaa5d4409c3aebab681c4e856cca7a7ad4">EmberRf4ceNodeCapabilities</a>&#160;</td>
          <td class="paramname"><em>capabilities</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberRf4ceVendorInfo.htm">EmberRf4ceVendorInfo</a> *&#160;</td>
          <td class="paramname"><em>vendorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t&#160;</td>
          <td class="paramname"><em>power</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The node starts the network operations. If the node is started as target, it will attempt to form a new RF4CE PAN by performing an energy scan for determining the best channel, by performing an active scan to determine an unique pan ID and unique network address. Once all these steps are successfully completed, the node starts normal network operations as RF4CE target. If the node is started as controller, no scanning will be performed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">capabilities</td><td>An <a class="el" href="group__rf4ce__types.htm#gaa5d4409c3aebab681c4e856cca7a7ad4" title="RF4CE node capabilities.">EmberRf4ceNodeCapabilities</a> that specifies the node capabilities as described in section 3.4.2.4.</td></tr>
    <tr><td class="paramname">vendorInfo</td><td>A pointer to an <a class="el" href="structEmberRf4ceVendorInfo.htm" title="Defines the vendor information block (see section 3.3.1, Figure 16).">EmberRf4ceVendorInfo</a> struct containing the vendor information of the node.</td></tr>
    <tr><td class="paramname">power</td><td>The radio power the node should use in transmission.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the starting network operations are successfully initiated, <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> if one or more passed parameters are invalid, or the current network is already up, or the node is already up as "always on" node on another network (an "always on" node is a non-sleepy ZigBee PRO node or a ZigBee RF4CE node). The application can set the application information using the <a class="el" href="group__rf4ce.htm#ga460b9253f031dffe71c4847a655644f6" title="Sets the application information of the node.">emberRf4ceSetApplicationInfo()</a> API. </dd></dl>

</div>
</div>
<a class="anchor" id="gac174af0d2df28f31ea4ae44fcc84a916"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberRf4ceStop </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="gae2d740cae29f40f598d47d4fc6919799"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberRf4ceDiscovery </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga5d4c51573517c485740b1a0cc43427cf">EmberPanId</a>&#160;</td>
          <td class="paramname"><em>panId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a>&#160;</td>
          <td class="paramname"><em>nodeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>searchDevType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>discDuration</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>maxDiscRepetitions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>discProfileIdListLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>discProfileIdList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The node performs a discovery of ZigBee RF4CE nodes that matches the requirements specified in the passed parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">panId</td><td>The PAN ID of the destination device for the discovery. This value can be set to EMBER_RF4CE_BROADCAST_PAN_ID to indicate a wildcard.</td></tr>
    <tr><td class="paramname">nodeId</td><td>The network address of the destination device for the discovery. This value can be set to EMBER_RF4CE_BROADCAST_ADDRESS to indicate a wildcard.</td></tr>
    <tr><td class="paramname">searchDevType</td><td>The device type to discover. This value can be set to 0xFF to indicate a wildcard.</td></tr>
    <tr><td class="paramname">discDuration</td><td>The time (in milliseconds) to wait for discovery responses to be sent back from potential target nodes on each channel.</td></tr>
    <tr><td class="paramname">maxDiscRepetitions</td><td>The maximum number of discovery trials. A discovery trial is defined as the transmission of a discovery request command frame on all available channels.</td></tr>
    <tr><td class="paramname">discProfileIdListLength</td><td>The length of the discovery profile ID list. The stack supports up to 7 profile ID entries.</td></tr>
    <tr><td class="paramname">discProfileIdList</td><td>The list of profile IDs against which profile IDs contained in received discovery response command frames will be matched for acceptance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the discovery process started successfully, <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> if the node is down (either the node was not cold started with the <a class="el" href="group__rf4ce.htm#ga25cc6213d70854bce7ffbf384dcf2a3d" title="The node starts the network operations. If the node is started as target, it will attempt to form a n...">emberRf4ceStart()</a> or warm started with ::emberRf4ceNetworkInit()), or the current network is not an RF4CE network, or the node is already in the middle of a discovery or pairing process, or another <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating the error occurred. </dd></dl>

</div>
</div>
<a class="anchor" id="ga47fc0bcf318b1bd28473fb8d83546dc5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberRf4ceDiscoveryCompleteHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td>
          <td class="paramname"><em>status</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A callback invoked by the ZigBee RF4CE stack when it has completed the discovery process. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">status</td><td>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if discovery has been correctly performed over the three RF4CE channels and at least a valid discovery response was received. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of <a class="el" href="group__status__codes.htm#ga4071acf77f584d36ae56f5a7b22adf92" title="The node has timed out during auto discovery response mode.">EMBER_DISCOVERY_TIMEOUT</a> if the discovery process completed and no valid discovery response was received. Otherwise, another <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating the error occurred. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga5123e721e0a52e82688620873e4251e3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberRf4ceDiscoveryRequestHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a>&#160;</td>
          <td class="paramname"><em>srcIeeeAddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>nodeCapabilities</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberRf4ceVendorInfo.htm">EmberRf4ceVendorInfo</a> *&#160;</td>
          <td class="paramname"><em>vendorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberRf4ceApplicationInfo.htm">EmberRf4ceApplicationInfo</a> *&#160;</td>
          <td class="paramname"><em>appInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>searchDevType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>rxLinkQuality</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A callback invoked by the ZigBee RF4CE stack when a discovery request is received. If the callback returns true, the stack shall respond with a discovery response, otherwise it will silently discard the discovery request message. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">srcIeeeAddr</td><td>The IEEE address of the node that issued the discovery request.</td></tr>
    <tr><td class="paramname">nodeCapabilities</td><td>The node capabilities of the node that issued the discovery request.</td></tr>
    <tr><td class="paramname">vendorInfo</td><td>A pointer to an <a class="el" href="structEmberRf4ceVendorInfo.htm" title="Defines the vendor information block (see section 3.3.1, Figure 16).">EmberRf4ceVendorInfo</a> struct containing the vendor information of the node that issued the discovery request.</td></tr>
    <tr><td class="paramname">appInfo</td><td>A pointer to an <a class="el" href="structEmberRf4ceApplicationInfo.htm" title="Defines the application information block (see section 3.3.1, Figure 17).">EmberRf4ceApplicationInfo</a> struct containing the application information of the node that issued the discovery request.</td></tr>
    <tr><td class="paramname">searchDevType</td><td>The device type being discovered. If this is 0xFF, any type is being requested.</td></tr>
    <tr><td class="paramname">rxLinkQuality</td><td>LQI value, as passed via the MAC sub-layer, of the discovery request command frame.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>false if the discovery request should be discarded. Return true if the application wants to respond to the discovery request. The application can set the application information of the discovery response within this callback using the <a class="el" href="group__rf4ce.htm#ga460b9253f031dffe71c4847a655644f6" title="Sets the application information of the node.">emberRf4ceSetApplicationInfo()</a> API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga665b10b498cc54d7b67b43ce5e087efb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberRf4ceDiscoveryResponseHandler </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>atCapacity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga5d4c51573517c485740b1a0cc43427cf">EmberPanId</a>&#160;</td>
          <td class="paramname"><em>panId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a>&#160;</td>
          <td class="paramname"><em>srcIeeeAddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>nodeCapabilities</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberRf4ceVendorInfo.htm">EmberRf4ceVendorInfo</a> *&#160;</td>
          <td class="paramname"><em>vendorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberRf4ceApplicationInfo.htm">EmberRf4ceApplicationInfo</a> *&#160;</td>
          <td class="paramname"><em>appInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>rxLinkQuality</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>discRequestLqi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A callback invoked by the ZigBee RF4CE stack when a discovery response is received. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">atCapacity</td><td>A bool set to true if the node sending the discovery response has no free entry in its pairing table, false otherwise.</td></tr>
    <tr><td class="paramname">channel</td><td>The channel on which the discovery response was received.</td></tr>
    <tr><td class="paramname">panId</td><td>The PAN identifier of the responding device.</td></tr>
    <tr><td class="paramname">srcIeeeAddr</td><td>The IEEE address of the responding device.</td></tr>
    <tr><td class="paramname">nodeCapabilities</td><td>The capabilities of the responding node.</td></tr>
    <tr><td class="paramname">vendorInfo</td><td>The vendor information of the responding device.</td></tr>
    <tr><td class="paramname">appInfo</td><td>The application information of the responding device.</td></tr>
    <tr><td class="paramname">rxLinkQuality</td><td>LQI value, as passed via the MAC sub-layer, of the discovery response command frame.</td></tr>
    <tr><td class="paramname">discRequestLqi</td><td>The LQI of the discovery request command frame reported by the responding device.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>If this callback returns true the stack will continue the discovery process. If this callback returns false, the discovery process will end at the end of the current discovery trial. A discovery trial is defined as the transmission of a discovery request command frame on all available channels. </dd></dl>

</div>
</div>
<a class="anchor" id="ga180e9a08a835b7c6d27904c1e6a6cb0f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberRf4ceEnableAutoDiscoveryResponse </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>duration</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The node automatically handles the receipt of discovery request command frames. Note that during this auto discovery response mode, the stack does not inform the application of the arrival of discovery request command frames. Furthermore, during this mode, if the node receives a command frame that is not a discovery request command frame, it will be discarded. At the end of the auto discovery response mode, the stack will call the <a class="el" href="group__rf4ce.htm#gaebb5ebce7a595ca603c5c6e3d7372fc6" title="A callback invoked by the ZigBee RF4CE stack when it has completed the requested auto discovery respo...">emberRf4ceAutoDiscoveryResponseCompleteHandler()</a> callback. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">duration</td><td>The maximum duration, in milliseconds, while the node will be in auto discovery response mode.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_SUCCESS if the node successfully entered in auto discovery response mode. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_INVALID_CALL if the node has not been started, or the current network is not an RF4CE network, or the node is already in the middle of another discovery or pairing process. The application can set the application information used during the auto discovery process using the <a class="el" href="group__rf4ce.htm#ga460b9253f031dffe71c4847a655644f6" title="Sets the application information of the node.">emberRf4ceSetApplicationInfo()</a> API. </dd></dl>

</div>
</div>
<a class="anchor" id="gaebb5ebce7a595ca603c5c6e3d7372fc6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberRf4ceAutoDiscoveryResponseCompleteHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td>
          <td class="paramname"><em>status</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a>&#160;</td>
          <td class="paramname"><em>srcIeeeAddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>nodeCapabilities</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberRf4ceVendorInfo.htm">EmberRf4ceVendorInfo</a> *&#160;</td>
          <td class="paramname"><em>vendorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberRf4ceApplicationInfo.htm">EmberRf4ceApplicationInfo</a> *&#160;</td>
          <td class="paramname"><em>appInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>searchDevType</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A callback invoked by the ZigBee RF4CE stack when it has completed the requested auto discovery response phase. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">status</td><td>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_SUCCESS indicating that it successfully received a discovery request frame twice from the same node with IEEE address specified by the scrIeeeAddr parameter. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_DISCOVERY_TIMEOUT if the node has not received the two discovery request frame within the auto discovery response duration interval. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_DISCOVERY_ERROR if the node has received two valid discovery request command frames from two different nodes. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_NO_BUFFERS if the node could not respond because of RAM shortage. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_ERR_FATAL if the MAC layer rejected the discovery response.</td></tr>
    <tr><td class="paramname">srcIeeeAddr</td><td>An <a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050" title="EUI 64-bit ID (an IEEE address).">EmberEUI64</a> value indicating the IEEE address from which the discovery request command frame was received. This parameter is non-NULL only if the status parameter is EMBER_SUCCESS.</td></tr>
    <tr><td class="paramname">nodeCapabilities</td><td>The node capabilities of the node that issued the discovery request. This parameter is meaningful only if the status parameter is EMBER_SUCCESS.</td></tr>
    <tr><td class="paramname">vendorInfo</td><td>A pointer to an <a class="el" href="structEmberRf4ceVendorInfo.htm" title="Defines the vendor information block (see section 3.3.1, Figure 16).">EmberRf4ceVendorInfo</a> struct containing the vendor information of the node that issued the discovery request. This parameter is non-NULL only if the status parameter is EMBER_SUCCESS.</td></tr>
    <tr><td class="paramname">appInfo</td><td>A pointer to an <a class="el" href="structEmberRf4ceApplicationInfo.htm" title="Defines the application information block (see section 3.3.1, Figure 17).">EmberRf4ceApplicationInfo</a> struct containing the application information of the node that issued the discovery request. This parameter is non-NULL only if the status parameter is EMBER_SUCCESS.</td></tr>
    <tr><td class="paramname">searchDevType</td><td>The device type being discovered. If this is 0xFF, any type is being requested. This parameter is meaningful only if the status parameter is EMBER_SUCCESS. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga7bd9a1087216bdd79cc6ec3f319eeaf8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberRf4cePair </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga5d4c51573517c485740b1a0cc43427cf">EmberPanId</a>&#160;</td>
          <td class="paramname"><em>panId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a>&#160;</td>
          <td class="paramname"><em>ieeeAddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>keyExchangeTransferCount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The node initiates the Rf4CE pairing process according to the specified parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channel</td><td>The logical channel of the device with which to pair.</td></tr>
    <tr><td class="paramname">panId</td><td>The PAN identifier of the device with which to pair.</td></tr>
    <tr><td class="paramname">ieeeAddr</td><td>The IEEE address of the device with which to pair.</td></tr>
    <tr><td class="paramname">keyExchangeTransferCount</td><td>The number of transfers the target should use to exchange the link key with the pairing originator.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_SUCCESS if the pairing process was successfully initiated and an unused pairing entry will be created for the new pairing. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_DUPLICATE_ENTRY if the pairing process was successfully initiated and an existing pairing entry will be updated. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_INVALID_CALL if the node has not been started, or the current network is not an RF4CE network, or the node is already in the middle of another discovery or pairing process. Another <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating the specific error occurred otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="gac14073d041b4f72618d036427cef77a5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberRf4cePairCompleteHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td>
          <td class="paramname"><em>status</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>pairingIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberRf4ceVendorInfo.htm">EmberRf4ceVendorInfo</a> *&#160;</td>
          <td class="paramname"><em>vendorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberRf4ceApplicationInfo.htm">EmberRf4ceApplicationInfo</a> *&#160;</td>
          <td class="paramname"><em>appInfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A callback invoked by the ZigBee RF4CE stack when the originator or the recipient node has completed the pairing process. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">status</td><td>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_SUCCESS if the pairing process succeeded and a pairing link has been established. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_NO_RESPONSE if the originator has timed out waiting for the pair response or for the ping response during the link key exchange procedure. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_TABLE_FULL if a pair response was received at the originator indicating that the recipient device has no available entry in its pairing table. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_NOT_PERMITTED if a pair response was received at the originator indicating that the recipient device did not accept the pair request. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_SECURITY_TIMEOUT if the node has timed out during the link key exchange or recovery procedures. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_SECURITY_FAILURE if some other error occurred during the link key exchange or recovery procedures. Another <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating the specific reason why the originator or the recipient node failed to deliver a command frame.</td></tr>
    <tr><td class="paramname">pairingIndex</td><td>The index of the pairing table entry corresponding to the pairing link that was established during the pairing process. This field is meaningful only if the status parameter is EMBER_SUCCESS or EMBER_DUPLICATE_ENTRY.</td></tr>
    <tr><td class="paramname">vendorInfo</td><td>A pointer to an <a class="el" href="structEmberRf4ceVendorInfo.htm" title="Defines the vendor information block (see section 3.3.1, Figure 16).">EmberRf4ceVendorInfo</a> struct containing the vendor information of the peer node. This parameter is non-NULL only if the status parameter is EMBER_SUCCESS or EMBER_DUPLICATE_ENTRY.</td></tr>
    <tr><td class="paramname">appInfo</td><td>A pointer to an <a class="el" href="structEmberRf4ceApplicationInfo.htm" title="Defines the application information block (see section 3.3.1, Figure 17).">EmberRf4ceApplicationInfo</a> struct containing the application information of the peer node. This parameter is non-NULL only if the status parameter is EMBER_SUCCESS or EMBER_DUPLICATE_ENTRY. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga359197c8b79844d731bf50751f282619"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberRf4cePairRequestHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td>
          <td class="paramname"><em>status</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>pairingIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a>&#160;</td>
          <td class="paramname"><em>srcIeeeAddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>nodeCapabilities</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberRf4ceVendorInfo.htm">EmberRf4ceVendorInfo</a> *&#160;</td>
          <td class="paramname"><em>vendorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberRf4ceApplicationInfo.htm">EmberRf4ceApplicationInfo</a> *&#160;</td>
          <td class="paramname"><em>appInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>keyExchangeTransferCount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A callback invoked by the ZigBee RF4CE stack when a pair request has been received. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">status</td><td>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_SUCCESS if the request pairing is not a duplicate pairing and an unused entry in the pairing table is available. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_TABLE_FULL if the request pairing is not a duplicate pairing and the pairing table is full. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_DUPLICATE_ENTRY if the request pairing is a duplicate pairing. In this case, the stack will update the entry indicated by the pairingIndex parameter.</td></tr>
    <tr><td class="paramname">pairingIndex</td><td>The index of the entry that will be used by the stack for the pairing link. If the status parameter is EMBER_TABLE_FULL this parameter is meaningless.</td></tr>
    <tr><td class="paramname">srcIeeeAddr</td><td>An <a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050" title="EUI 64-bit ID (an IEEE address).">EmberEUI64</a> value indicating the source IEEE address of the incoming pair request command.</td></tr>
    <tr><td class="paramname">nodeCapabilities</td><td>The node capabilities of requesting device.</td></tr>
    <tr><td class="paramname">vendorInfo</td><td>The vendor information of the requesting device.</td></tr>
    <tr><td class="paramname">appInfo</td><td>The application information of the requesting device.</td></tr>
    <tr><td class="paramname">keyExchangeTransferCount</td><td>The number of transfers to be used to exchange the link key with the pairing originator, indicated in the incoming pair request command.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the application accepts the pair, false otherwise. The application can set the application information of the pair response within this callback using the <a class="el" href="group__rf4ce.htm#ga460b9253f031dffe71c4847a655644f6" title="Sets the application information of the node.">emberRf4ceSetApplicationInfo()</a> API. </dd></dl>

</div>
</div>
<a class="anchor" id="gae074d521322290bcb440d1f8eca8bb62"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberRf4ceUnpair </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>pairingIndex</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The node attempts to remove the specified pairing link. If successful, the node transmit an unpair request command frame to the peer node. The pairing link will be then removed regardless on whether the peer node has acknowledged the unpair request command frame. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pairingIndex</td><td>The index of the pairing link to be removed.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_SUCCESS if the unpairing process has successfully started. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_INVALID_CALL if the node has not been started, or the current network is not an RF4CE network, or if the node is in the middle of a discovery or pairing process or if the passed index does not correspond to an active pairing link. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_NO_BUFFERS if the unpair request command frame was not sent because of RAM shortage. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_ERR_FATAL if the MAC layer rejected the unpair request command frame. </dd></dl>

</div>
</div>
<a class="anchor" id="gae92282ed864997e5e795934d20285e8b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberRf4ceUnpairHandler </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>pairingIndex</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A callback invoked by the ZigBee RF4CE stack when an unpair command frame has been received. The stack will remove the pairing link indicated by the passed index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pairingIndex</td><td>The index of the pairing link to be removed.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_SUCCESS if the unpairing process was successfully initiated. Another <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating the specific error occurred otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="gab12796e41c18118c6f1e8ecf27be80b1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberRf4ceUnpairCompleteHandler </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>pairingIndex</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A callback invoked by the ZigBee RF4CE stack when the unpair procedure has been completed. According to the RF4CE specs, during the unpair procedure, the stack sends an unpair command frame. If the command is not successfully delivered, the stack tries another RF4CE channel until the frame is received or the stack already tried all the RF4CE channels. Either way, at the end of the unpair process the pairing table entry is deleted and this callback is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pairingIndex</td><td>The index of the removed pairing link. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga7c936ac63c5289931aff812d76427ae3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberRf4ceSetPowerSavingParameters </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>dutyCycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>activePeriod</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The node enables or disables RF4CE power saving mode according to the passed parameters. If dutyCycle is 0x000000, power saving mode is disabled and the node radio will be always on listening for incoming packets. If activePeriod is 0x000000 and dutyCycle is &gt; 0 the radio is turned off until further notice. Otherwise, the stack will enable power saving mode and switch the radio on and off according to the passed parameters, whereas the node's radio will be on for activePeriod milliseconds every dutyCycle milliseconds. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dutyCycle</td><td>The duty cycle of a device in milliseconds. A value of 0x000000 disable power saving management at the RF4CE stack and the application must provide this functionality directly. Legal values for this parameter are 0x000000 and any value in the range [nwkcMinActivePeriod=16.8ms, nwkcMaxDutyCycle=1s].</td></tr>
    <tr><td class="paramname">activePeriod</td><td>The active period of a device in milliseconds. Legal values for this parameter fall in the set [nwkcMinActivePeriod=16.8ms, dutyCycle) U {0x000000}. If the dutyCycle parameter is 0, the activePeriod parameter is ignored.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_SUCCESS if the power saving parameters were correctly set. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_INVALID_CALL if the node has not been started yet, or the current network is not an RF4CE network, or the node is currently busy with some discovery or pairing process, or if any of the passed parameters is not in the legal range. </dd></dl>

</div>
</div>
<a class="anchor" id="gafd0168ea227160f41047d62874c5530e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberRf4ceSetFrequencyAgilityParameters </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>rssiWindowSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channelChangeReads</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t&#160;</td>
          <td class="paramname"><em>rssiThreshold</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>readInterval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>readDuration</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Every target node periodically performs an energy scan of the base channel to detect whether the channel becomes compromised. In particular if channelChangeReads RSSI reads out of the last rssiWindowSize RSSI reads are above the rssiThreshold, the target will switch its base channel to the next channel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rssiWindowSize</td><td>Defines the size of the RSSI reads window, that is, the number of the most recent RSSI reads that are taken into consideration to decide whether a channel switch is required or not. Valid values for this parameter fall in the interval [1,32]. Setting this parameter to 0 disables frequency agility at the target. This parameter is set by default to 16.</td></tr>
  </table>
  </dd>
</dl>
<p>channelChangeReads Defines the number of RSSI reads above the RSSI threshold that will trigger a channel switch. Valid values for this parameter fall in the interval [1,rssiWindowSize]. This parameter is set by default to 15.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rssiThreshold</td><td>Defines the RSSI threshold. A RSSI value resulting from the periodic scan that is above this threshold is considered a 'channel congested' read. If the stack detects multiple channel congested reads, it will eventually move the base channel to the next RF4CE channel. This parameter is set by default to the CCA threshold.</td></tr>
    <tr><td class="paramname">readInterval</td><td>The interval length (in seconds) between two consecutive RSSI reads. This parameter is set by default to 10 seconds.</td></tr>
    <tr><td class="paramname">readDuration</td><td>Sets the exponent of the number of scan periods of the RSSI read process, where a scan period is 960 symbols, and a symbol is 16 microseconds. The scan will occur for ((2^duration) + 1) scan periods. The value of duration must be less than 15. The time corresponding to the first few values are as follows: 0 = 31 msec, 1 = 46 msec, 2 = 77 msec, 3 = 138 msec, 4 = 261 msec, 5 = 507 msec, 6 = 998 msec. This parameter is set by default to 0.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_SUCCESS if the frequency agility parameters were correctly set. An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_INVALID_CALL if the node has not been not started yet, or if it has been started as controller, or the current network is not an RF4CE network, or the node is currently busy with some discovery or pairing process, or some of the passed parameters are not valid. </dd></dl>

</div>
</div>
<a class="anchor" id="ga0298f5125f25df3cbd02ac787afcdeb4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberRf4ceSetDiscoveryLqiThreshold </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>threshold</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the discovery LQI threshold parameter. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">threshold</td><td>The LQI threshold below which discovery requests will be rejected.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value of EMBER_SUCCESS if the discovery LQI threshold was successfully set. Another <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating the specific error occurred otherwise. </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<hr size="1">
<table border="0" cellspacing="0" cellpadding="0" width=100%>
<tr>
<td><address><small>
EmberZNet API Reference: For the EM35x SoC Platform. EmberZNet 5.9.2.0.
</small></address>
</td>
<td align="right">
<address><small>
</small></address>
</td>
</tr>
</table>
</body>
</html>
