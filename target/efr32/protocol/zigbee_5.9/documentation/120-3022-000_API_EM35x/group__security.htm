<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>EmberZNet API Reference: For the EM35x SoC Platform</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
</head>
<body>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td><img src="SiliconLabsLogo_Black.jpg" style="padding: 10px;width:40%;height:40%;" /></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">EmberZNet API Reference: For the EM35x SoC Platform
   &#160;<span id="projectnumber">EmberZNet 5.9.2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.2 -->
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__security.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#groups">Modules</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">Security</div>  </div>
<div class="ingroups"><a class="el" href="group__ember.htm">EmberZNet Stack API Reference</a></div></div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="groups"></a>
Modules</h2></td></tr>
<tr class="memitem:group__trust__center"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__trust__center.htm">Trust Center</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga5565ff94a7c51cee298f916a2ed1d785"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga5565ff94a7c51cee298f916a2ed1d785">EMBER_JOIN_NO_PRECONFIG_KEY_BITMASK</a></td></tr>
<tr class="separator:ga5565ff94a7c51cee298f916a2ed1d785"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaee4c00e396136d93e7b4c8683a03b8f6"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#gaee4c00e396136d93e7b4c8683a03b8f6">EMBER_JOIN_PRECONFIG_KEY_BITMASK</a></td></tr>
<tr class="separator:gaee4c00e396136d93e7b4c8683a03b8f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga124d62dd7d3d15d2fcffae92c5bcdda6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga124d62dd7d3d15d2fcffae92c5bcdda6">emberSetInitialSecurityState</a> (<a class="el" href="structEmberInitialSecurityState.htm">EmberInitialSecurityState</a> *state)</td></tr>
<tr class="separator:ga124d62dd7d3d15d2fcffae92c5bcdda6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeb55de1f2d7bba5111d1e721a00e810c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#gaeb55de1f2d7bba5111d1e721a00e810c">emberSetExtendedSecurityBitmask</a> (<a class="el" href="group__ember__types.htm#ga753acda7a446dffa3629ef3cfde83406">EmberExtendedSecurityBitmask</a> mask)</td></tr>
<tr class="separator:gaeb55de1f2d7bba5111d1e721a00e810c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0b4fdd2f16993c8e94c9e1c4ac83abd0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga0b4fdd2f16993c8e94c9e1c4ac83abd0">emberGetExtendedSecurityBitmask</a> (<a class="el" href="group__ember__types.htm#ga753acda7a446dffa3629ef3cfde83406">EmberExtendedSecurityBitmask</a> *mask)</td></tr>
<tr class="separator:ga0b4fdd2f16993c8e94c9e1c4ac83abd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga853ccef64bd231ac153a86f5ba226c3f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga853ccef64bd231ac153a86f5ba226c3f">emberGetCurrentSecurityState</a> (<a class="el" href="structEmberCurrentSecurityState.htm">EmberCurrentSecurityState</a> *state)</td></tr>
<tr class="separator:ga853ccef64bd231ac153a86f5ba226c3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4352dea1936fc63d9dbb01cf1563f627"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga4352dea1936fc63d9dbb01cf1563f627">emberGetKey</a> (<a class="el" href="group__ember__types.htm#ga758a38c1be7657d280aaadd6d0b2b0e7">EmberKeyType</a> type, <a class="el" href="structEmberKeyStruct.htm">EmberKeyStruct</a> *keyStruct)</td></tr>
<tr class="separator:ga4352dea1936fc63d9dbb01cf1563f627"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacf94d746a9fda50d7e252335885112a8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#gacf94d746a9fda50d7e252335885112a8">emberHaveLinkKey</a> (<a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a> remoteDevice)</td></tr>
<tr class="separator:gacf94d746a9fda50d7e252335885112a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad9cc75612b16f5391f86c308cae826ea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#gad9cc75612b16f5391f86c308cae826ea">emberGenerateRandomKey</a> (<a class="el" href="structEmberKeyData.htm">EmberKeyData</a> *keyAddress)</td></tr>
<tr class="separator:gad9cc75612b16f5391f86c308cae826ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga35166d6c14de73e3e9eccc342f49899d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga35166d6c14de73e3e9eccc342f49899d">emberSwitchNetworkKeyHandler</a> (uint8_t sequenceNumber)</td></tr>
<tr class="separator:ga35166d6c14de73e3e9eccc342f49899d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3381d7f9a9ea77d4530a1b3770b692ed"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga3381d7f9a9ea77d4530a1b3770b692ed">emberRequestLinkKey</a> (<a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a> partner)</td></tr>
<tr class="separator:ga3381d7f9a9ea77d4530a1b3770b692ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7e14014ee46c34362cc6b91869a208ef"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga7e14014ee46c34362cc6b91869a208ef">emberZigbeeKeyEstablishmentHandler</a> (<a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a> partner, <a class="el" href="group__ember__types.htm#ga023e020a774781d0819dd1684c9962e1">EmberKeyStatus</a> status)</td></tr>
<tr class="separator:ga7e14014ee46c34362cc6b91869a208ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0192a43313f8fbf18ea01a3e7e152340"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga0192a43313f8fbf18ea01a3e7e152340">emberGetKeyTableEntry</a> (uint8_t index, <a class="el" href="structEmberKeyStruct.htm">EmberKeyStruct</a> *result)</td></tr>
<tr class="separator:ga0192a43313f8fbf18ea01a3e7e152340"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab10970d168444b6fac70c7d45cb198af"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#gab10970d168444b6fac70c7d45cb198af">emberSetKeyTableEntry</a> (uint8_t index, <a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a> address, bool linkKey, <a class="el" href="structEmberKeyData.htm">EmberKeyData</a> *keyData)</td></tr>
<tr class="separator:gab10970d168444b6fac70c7d45cb198af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga142524b9b3f6177e6dab19554d048755"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga142524b9b3f6177e6dab19554d048755">emberAddOrUpdateKeyTableEntry</a> (<a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a> address, bool linkKey, <a class="el" href="structEmberKeyData.htm">EmberKeyData</a> *keyData)</td></tr>
<tr class="separator:ga142524b9b3f6177e6dab19554d048755"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga102bbc4bb8c2ab0e4c42a922e3629448"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga102bbc4bb8c2ab0e4c42a922e3629448">emberFindKeyTableEntry</a> (<a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a> address, bool linkKey)</td></tr>
<tr class="separator:ga102bbc4bb8c2ab0e4c42a922e3629448"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf56219030cac5337be5ee6e54ad355b2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#gaf56219030cac5337be5ee6e54ad355b2">emberEraseKeyTableEntry</a> (uint8_t index)</td></tr>
<tr class="separator:gaf56219030cac5337be5ee6e54ad355b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga696062844e62d39f1b66de050ef668ab"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga696062844e62d39f1b66de050ef668ab">emberClearKeyTable</a> (void)</td></tr>
<tr class="separator:ga696062844e62d39f1b66de050ef668ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga74b8d6a8f9f9b02e8e0fc22d8423691e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga74b8d6a8f9f9b02e8e0fc22d8423691e">emberStopWritingStackTokens</a> (void)</td></tr>
<tr class="separator:ga74b8d6a8f9f9b02e8e0fc22d8423691e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7c55d078535d60435535833d5904503d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga7c55d078535d60435535833d5904503d">emberStartWritingStackTokens</a> (void)</td></tr>
<tr class="separator:ga7c55d078535d60435535833d5904503d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabd236fba398a490900a9ae36b0b9f26d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#gabd236fba398a490900a9ae36b0b9f26d">emberWritingStackTokensEnabled</a> (void)</td></tr>
<tr class="separator:gabd236fba398a490900a9ae36b0b9f26d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6709a05c3b03ecfb1914b4a0e21ddf72"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga6709a05c3b03ecfb1914b4a0e21ddf72">emberApsCryptMessage</a> (bool encrypt, <a class="el" href="group__ember__types.htm#gad8cef59e716103f3996ce6cb7e10b017">EmberMessageBuffer</a> buffer, uint8_t apsHeaderEndIndex, <a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a> remoteEui64)</td></tr>
<tr class="separator:ga6709a05c3b03ecfb1914b4a0e21ddf72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3188bfcc1faeed54a05ce0f5b6d9b26f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga3188bfcc1faeed54a05ce0f5b6d9b26f">emberGetMfgSecurityConfig</a> (<a class="el" href="structEmberMfgSecurityStruct.htm">EmberMfgSecurityStruct</a> *settings)</td></tr>
<tr class="separator:ga3188bfcc1faeed54a05ce0f5b6d9b26f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaab02540e7f12d04e23f6691a7de15687"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#gaab02540e7f12d04e23f6691a7de15687">emberSetMfgSecurityConfig</a> (uint32_t magicNumber, const <a class="el" href="structEmberMfgSecurityStruct.htm">EmberMfgSecurityStruct</a> *settings)</td></tr>
<tr class="separator:gaab02540e7f12d04e23f6691a7de15687"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaed8603abfdd53070fe39880ad50b73c8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#gaed8603abfdd53070fe39880ad50b73c8">emberSetOutgoingNwkFrameCounter</a> (uint32_t desiredValue)</td></tr>
<tr class="separator:gaed8603abfdd53070fe39880ad50b73c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabc394b03f8e4b6d729cc4fce1444ff80"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#gabc394b03f8e4b6d729cc4fce1444ff80">emberSetOutgoingApsFrameCounter</a> (uint32_t desiredValue)</td></tr>
<tr class="separator:gabc394b03f8e4b6d729cc4fce1444ff80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2279f8c3417e59f63e44de94cbae8629"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga2279f8c3417e59f63e44de94cbae8629">emberAddTransientLinkKey</a> (<a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a> partnerEUI64, <a class="el" href="structEmberKeyData.htm">EmberKeyData</a> *key)</td></tr>
<tr class="separator:ga2279f8c3417e59f63e44de94cbae8629"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaec01a95d5514e2264b1a12294255cfe"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#gaaec01a95d5514e2264b1a12294255cfe">emberClearTransientLinkKeys</a> (void)</td></tr>
<tr class="separator:gaaec01a95d5514e2264b1a12294255cfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga66e180afe44e7f8eac1a36a985ee9777"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#ga66e180afe44e7f8eac1a36a985ee9777">emberHmacAesHash</a> (const uint8_t *key, const uint8_t *data, uint8_t dataLength, uint8_t *result)</td></tr>
<tr class="separator:ga66e180afe44e7f8eac1a36a985ee9777"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:gad998db8a61b90cb1d17949f6b0ee4c6c"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__security.htm#gad998db8a61b90cb1d17949f6b0ee4c6c">emberTransientKeyTimeoutS</a></td></tr>
<tr class="separator:gad998db8a61b90cb1d17949f6b0ee4c6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>This file describes the functions necessary to manage security for a regular device. There are three major modes for security and applications should link in the appropriate library:</p>
<ul>
<li>Residential security uses only network keys. This is the only supported option for ZigBee 2006 devices.</li>
<li>Standard security uses network keys with optional link keys. Ember strongly recommends using Link Keys. It is possible for 2006 devices to run on a network that uses Standard Security.</li>
</ul>
<p>See <a class="el" href="security_8h.htm" title="EmberZNet security API. See Security for documentation.">security.h</a> for source code. </p>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a class="anchor" id="ga5565ff94a7c51cee298f916a2ed1d785"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define EMBER_JOIN_NO_PRECONFIG_KEY_BITMASK</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A non-Trust Center Device configuration bitmask example. There is no Preconfigured Link Key, so the NWK key is expected to be sent in-the-clear. The device will request a Trust Center Link key after getting the Network Key. </p>

<p>Definition at line <a class="el" href="security_8h_source.htm#l00091">91</a> of file <a class="el" href="security_8h_source.htm">security.h</a>.</p>

</div>
</div>
<a class="anchor" id="gaee4c00e396136d93e7b4c8683a03b8f6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define EMBER_JOIN_PRECONFIG_KEY_BITMASK</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A non-Trust Center device configuration bitmask example. The device has a Preconfigured Link Key and expects to receive a NWK Key encrypted at the APS Layer. A NWK key sent in-the-clear will be rejected. </p>

<p>Definition at line <a class="el" href="security_8h_source.htm#l00101">101</a> of file <a class="el" href="security_8h_source.htm">security.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga124d62dd7d3d15d2fcffae92c5bcdda6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSetInitialSecurityState </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberInitialSecurityState.htm">EmberInitialSecurityState</a> *&#160;</td>
          <td class="paramname"><em>state</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function sets the initial security state that will be used by the device when it forms or joins a network. If security is enabled then this function <b>must</b> be called prior to forming or joining the network. It must also be called if the device left the network and wishes to form or join another network. </p>
<p>This call <b>should not</b> be used when restoring prior network operation from saved state via <a class="el" href="group__network__formation.htm#ga47f3cf943b5e9890fa016d871943c705" title="Resume network operation after a reboot.">emberNetworkInit</a> as this will cause saved security settings and keys table from the prior network to be erased, resulting in improper keys and/or frame counter values being used, which will prevent proper communication with other devices in the network. Calling <a class="el" href="group__network__formation.htm#ga47f3cf943b5e9890fa016d871943c705" title="Resume network operation after a reboot.">emberNetworkInit</a> is sufficient to restore all saved security settings after a reboot and re-enter the network.</p>
<p>The call may be used by either the Trust Center or non Trust Center devices, the options that are set are different depending on which role the device will assume. See the <a class="el" href="structEmberInitialSecurityState.htm" title="This describes the Initial Security features and requirements that will be used when forming or joini...">EmberInitialSecurityState</a> structure for more explanation about the various security settings.</p>
<p>The function will return <a class="el" href="group__status__codes.htm#gac38d3cd97519cb35737765a0bf8c2138" title="There was an attempt to set a security configuration that is not valid given the other security setti...">EMBER_SECURITY_CONFIGURATION_INVALID</a> in the following cases: </p>
<ul>
<li>
Distributed Trust Center Mode was enabled with Hashed Link Keys. </li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">state</td><td>The security configuration to be set.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value. <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the security state has been set successfully. <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> if the device is not in the <a class="el" href="group__ember__types.htm#gga46491008c24c4c89c2b6c8d28d20b88aa3585607b74367c19bf415df95b4e6a59">EMBER_NO_NETWORK</a> state. The value <a class="el" href="group__status__codes.htm#gac38d3cd97519cb35737765a0bf8c2138" title="There was an attempt to set a security configuration that is not valid given the other security setti...">EMBER_SECURITY_CONFIGURATION_INVALID</a> is returned if the combination of security parameters is not valid. <a class="el" href="group__status__codes.htm#ga67f92b93b6077b03552f5efd3ef3a9f2" title="The passed key data is not valid. A key of all zeros or all F&#39;s are reserved values and cannot be use...">EMBER_KEY_INVALID</a> is returned if a reserved or invalid key value was passed in the key structure for one of the keys. </dd></dl>

</div>
</div>
<a class="anchor" id="gaeb55de1f2d7bba5111d1e721a00e810c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSetExtendedSecurityBitmask </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga753acda7a446dffa3629ef3cfde83406">EmberExtendedSecurityBitmask</a>&#160;</td>
          <td class="paramname"><em>mask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the extended initial security bitmask. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mask</td><td>An object of type <a class="el" href="group__ember__types.htm#ga753acda7a446dffa3629ef3cfde83406" title="This is the Extended Security Bitmask that controls the use of various extended security features...">EmberExtendedSecurityBitmask</a> that indicates what the extended security bitmask should be set to.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the security settings were successfully retrieved. <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="ga0b4fdd2f16993c8e94c9e1c4ac83abd0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberGetExtendedSecurityBitmask </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga753acda7a446dffa3629ef3cfde83406">EmberExtendedSecurityBitmask</a> *&#160;</td>
          <td class="paramname"><em>mask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the extended security bitmask that is being used by a device. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mask</td><td>A pointer to an <a class="el" href="group__ember__types.htm#ga753acda7a446dffa3629ef3cfde83406" title="This is the Extended Security Bitmask that controls the use of various extended security features...">EmberExtendedSecurityBitmask</a> value into which the extended security bitmask will be copied.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the security settings were successfully retrieved. <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="ga853ccef64bd231ac153a86f5ba226c3f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberGetCurrentSecurityState </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberCurrentSecurityState.htm">EmberCurrentSecurityState</a> *&#160;</td>
          <td class="paramname"><em>state</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the security state that is being used by a device joined into the Network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">state</td><td>A pointer to an <a class="el" href="structEmberCurrentSecurityState.htm" title="This describes the security features used by the stack for a joined device.">EmberCurrentSecurityState</a> value into which the security configuration will be copied.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the security settings were successfully retrieved. <a class="el" href="group__status__codes.htm#gaf57eb51e5e4bbe3c83d9eb89c412806a" title="The node has not joined a network.">EMBER_NOT_JOINED</a> if the device is not currently joined in the network. </dd></dl>

</div>
</div>
<a class="anchor" id="ga4352dea1936fc63d9dbb01cf1563f627"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberGetKey </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga758a38c1be7657d280aaadd6d0b2b0e7">EmberKeyType</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberKeyStruct.htm">EmberKeyStruct</a> *&#160;</td>
          <td class="paramname"><em>keyStruct</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the specified key and its associated data. This can retrieve the Trust Center Link Key, Current Network Key, or Next Network Key. On the 35x series chips, the data returned by this call is governed by the security policy set in the manufacturing token for TOKEN_MFG_SECURITY_CONFIG. See the API calls <a class="el" href="group__security.htm#gaab02540e7f12d04e23f6691a7de15687" title="This function will set the security configuration to be stored in manufacturing tokens. It is only available on the 35x series. This API must be called with care. Once set, a manufacturing token CANNOT BE UNSET without using the ISA3 tools and connecting the chip via JTAG. Additionally, a chip with read protection enabled cannot have its configuration changed without a full chip erase. Thus this provides a way to disallow access to the keys at runtime that cannot be undone.">emberSetMfgSecurityConfig()</a> and <a class="el" href="group__security.htm#ga3188bfcc1faeed54a05ce0f5b6d9b26f" title="This function will retrieve the security configuration stored in manufacturing tokens. It is only available on the 35x series. See emberSetMfgSecurityConfig() for more details.">emberGetMfgSecurityConfig()</a> for more information. If the security policy is not set to <a class="el" href="group__ember__types.htm#gga5a6b3d5cf9e5f17a93a16dff19ddc7e5aa070ebafa735aa1d6f5ea0ad2e6651be">EMBER_KEY_PERMISSIONS_READING_ALLOWED</a>, then the actual encryption key value will not be returned. Other meta-data about the key will be returned. The 2xx series chips have no such restrictions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">type</td><td>The Type of key to get (e.g. Trust Center Link or Network). </td></tr>
    <tr><td class="paramname">keyStruct</td><td>A pointer to the <a class="el" href="structEmberKeyStruct.htm" title="This describes a one of several different types of keys and its associated data.">EmberKeyStruct</a> data structure that will be populated with the pertinent information.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the key was retrieved successfully. <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> if an attempt was made to retrieve an <a class="el" href="group__ember__types.htm#gga758a38c1be7657d280aaadd6d0b2b0e7adb8b98fd1b5ea95a96273049b5c6c032">EMBER_APPLICATION_LINK_KEY</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="gacf94d746a9fda50d7e252335885112a8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberHaveLinkKey </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a>&#160;</td>
          <td class="paramname"><em>remoteDevice</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if a link key is available for securing messages sent to the remote device. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">remoteDevice</td><td>The long address of a some other device in the network. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>bool Returns true if a link key is available. </dd></dl>

</div>
</div>
<a class="anchor" id="gad9cc75612b16f5391f86c308cae826ea"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberGenerateRandomKey </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberKeyData.htm">EmberKeyData</a> *&#160;</td>
          <td class="paramname"><em>keyAddress</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Generates a Random Key (link, network, or master) and returns the result. </p>
<p>It copies the key into the array that <code>result</code> points to. This is an time-expensive operation as it needs to obtain truly random numbers.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">keyAddress</td><td>A pointer to the location in which to copy the generated key.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> on success, <a class="el" href="group__status__codes.htm#gacd58c93bc02e2ecc6e36647c61ecf601" title="An attempt to generate random bytes failed because of insufficient random data from the radio...">EMBER_INSUFFICIENT_RANDOM_DATA</a> on failure. </dd></dl>

</div>
</div>
<a class="anchor" id="ga35166d6c14de73e3e9eccc342f49899d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberSwitchNetworkKeyHandler </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>sequenceNumber</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A callback to inform the application that the Network Key has been updated and the node has been switched over to use the new key. The actual key being used is not passed up, but the sequence number is. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sequenceNumber</td><td>The sequence number of the new network key. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga3381d7f9a9ea77d4530a1b3770b692ed"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberRequestLinkKey </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a>&#160;</td>
          <td class="paramname"><em>partner</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A function to request a Link Key from the Trust Center with another device device on the Network (which could be the Trust Center). A Link Key with the Trust Center is possible but the requesting device cannot be the Trust Center. Link Keys are optional in ZigBee Standard Security and thus the stack cannot know whether the other device supports them. </p>
<p>If the partner device is the Trust Center, then only that device needs to request the key. The Trust Center will immediately respond to those requests and send the key back to the device.</p>
<p>If the partner device is not the Trust Center, then both devices must request an Application Link Key with each other. The requests will be sent to the Trust Center for it to answer. The Trust Center will store the first request and wait <a class="el" href="group__configuration.htm#ga6411cab01e0ed019d7202bd0e772ac6d" title="The length of time that the device will wait for an answer to its Application Key Request...">EMBER_REQUEST_KEY_TIMEOUT</a> for the second request to be received. The Trust Center only supports one outstanding Application key request at a time and therefore will ignore other requests that are not associated with the first request.</p>
<p>Sleepy devices should poll at a higher rate until a response is received or the request times out.</p>
<p>The success or failure of the request is returned via <a class="el" href="group__security.htm#ga7e14014ee46c34362cc6b91869a208ef" title="A callback to the application to notify it of the status of the request for a Link Key...">emberZigbeeKeyEstablishmentHandler</a>(...)</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">partner</td><td>The IEEE address of the partner device. If NULL is passed in then the Trust Center IEEE Address is assumed. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>EMBER_SUCCESS if the call succeeds, or EMBER_NO_BUFFERS. </dd></dl>

</div>
</div>
<a class="anchor" id="ga7e14014ee46c34362cc6b91869a208ef"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberZigbeeKeyEstablishmentHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a>&#160;</td>
          <td class="paramname"><em>partner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga023e020a774781d0819dd1684c9962e1">EmberKeyStatus</a>&#160;</td>
          <td class="paramname"><em>status</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A callback to the application to notify it of the status of the request for a Link Key. The application should define EMBER_APPLICATION_HAS_ZIGBEE_KEY_ESTABLISHMENT_HANDLER in order to implement its own handler. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">partner</td><td>The IEEE address of the partner device. Or all zeros if the Key establishment failed. </td></tr>
    <tr><td class="paramname">status</td><td>The status of the key establishment. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga0192a43313f8fbf18ea01a3e7e152340"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberGetKeyTableEntry </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberKeyStruct.htm">EmberKeyStruct</a> *&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A function used to obtain data from the Key Table. On the 35x series chips, the data returned by this call is governed by the security policy set in the manufacturing token for TOKEN_MFG_SECURITY_CONFIG. See the API calls <a class="el" href="group__security.htm#gaab02540e7f12d04e23f6691a7de15687" title="This function will set the security configuration to be stored in manufacturing tokens. It is only available on the 35x series. This API must be called with care. Once set, a manufacturing token CANNOT BE UNSET without using the ISA3 tools and connecting the chip via JTAG. Additionally, a chip with read protection enabled cannot have its configuration changed without a full chip erase. Thus this provides a way to disallow access to the keys at runtime that cannot be undone.">emberSetMfgSecurityConfig()</a> and <a class="el" href="group__security.htm#ga3188bfcc1faeed54a05ce0f5b6d9b26f" title="This function will retrieve the security configuration stored in manufacturing tokens. It is only available on the 35x series. See emberSetMfgSecurityConfig() for more details.">emberGetMfgSecurityConfig()</a> for more information. If the security policy is not set to <a class="el" href="group__ember__types.htm#gga5a6b3d5cf9e5f17a93a16dff19ddc7e5aa070ebafa735aa1d6f5ea0ad2e6651be">EMBER_KEY_PERMISSIONS_READING_ALLOWED</a>, then the actual encryption key value will not be returned. Other meta-data about the key will be returned. The 2xx series chips have no such restrictions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>The index in the key table of the entry to get. </td></tr>
    <tr><td class="paramname">result</td><td>A pointer to the location of an <a class="el" href="structEmberKeyStruct.htm" title="This describes a one of several different types of keys and its associated data.">EmberKeyStruct</a> that will contain the results retrieved by the stack. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga7ccf78c96ac4668948fd39dc0ce6b373" title="The requested table entry has been erased and contains no valid data.">EMBER_TABLE_ENTRY_ERASED</a> if the index is an erased key entry. <a class="el" href="group__status__codes.htm#ga94e4571b0d51de18901d714ecdad8f46" title="An index was passed into the function that was larger than the valid range.">EMBER_INDEX_OUT_OF_RANGE</a> if the passed index is not valid. <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> on success. </dd></dl>

</div>
</div>
<a class="anchor" id="gab10970d168444b6fac70c7d45cb198af"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSetKeyTableEntry </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a>&#160;</td>
          <td class="paramname"><em>address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>linkKey</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberKeyData.htm">EmberKeyData</a> *&#160;</td>
          <td class="paramname"><em>keyData</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A function to set an entry in the key table. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>The index in the key table of the entry to set. </td></tr>
    <tr><td class="paramname">address</td><td>The address of the partner device associated with the key. </td></tr>
    <tr><td class="paramname">keyData</td><td>A pointer to the key data associated with the key entry. </td></tr>
    <tr><td class="paramname">linkKey</td><td>A bool indicating whether this is a Link or Master Key.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga67f92b93b6077b03552f5efd3ef3a9f2" title="The passed key data is not valid. A key of all zeros or all F&#39;s are reserved values and cannot be use...">EMBER_KEY_INVALID</a> if the passed key data is using one of the reserved key values. <a class="el" href="group__status__codes.htm#ga94e4571b0d51de18901d714ecdad8f46" title="An index was passed into the function that was larger than the valid range.">EMBER_INDEX_OUT_OF_RANGE</a> if passed index is not valid. <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> on success. </dd></dl>

</div>
</div>
<a class="anchor" id="ga142524b9b3f6177e6dab19554d048755"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberAddOrUpdateKeyTableEntry </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a>&#160;</td>
          <td class="paramname"><em>address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>linkKey</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberKeyData.htm">EmberKeyData</a> *&#160;</td>
          <td class="paramname"><em>keyData</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function add a new entry in the key table or updates an existing entry with a new key. It first searches the key table for an entry that has a matching EUI64. If it does not find one it searches for the first free entry. If it is successful in either case, it sets the entry with the EUI64, key data, and flag that indicates if it is a Link or Master Key. The Incoming Frame Counter for that key is also reset to 0. If no existing entry was found, and there was not a free entry in the table, then the call will fail. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">address</td><td>The IEEE Address of the partner device that shares the key. </td></tr>
    <tr><td class="paramname">linkKey</td><td>A bool indicating whether this is a Link or Master key. </td></tr>
    <tr><td class="paramname">keyData</td><td>A pointer to the actual key data.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga2ee99ef7a3bcb9636fec4ee42bb2d847" title="There are no empty entries left in the table.">EMBER_TABLE_FULL</a> if no free entry was found to add. <a class="el" href="group__status__codes.htm#ga67f92b93b6077b03552f5efd3ef3a9f2" title="The passed key data is not valid. A key of all zeros or all F&#39;s are reserved values and cannot be use...">EMBER_KEY_INVALID</a> if the passed key was a reserved value. ::EMBER_KEY_TABLE_ADDRESS_NOT_VALID if the passed address is reserved or invalid. <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> on success. </dd></dl>

</div>
</div>
<a class="anchor" id="ga102bbc4bb8c2ab0e4c42a922e3629448"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t emberFindKeyTableEntry </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a>&#160;</td>
          <td class="paramname"><em>address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>linkKey</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A function to search the key table and find an entry matching the specified IEEE address and key type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">address</td><td>The IEEE Address of the partner device that shares the key. To find the first empty entry pass in an address of all zeros. </td></tr>
    <tr><td class="paramname">linkKey</td><td>A bool indicating whether to search for an entry containing a Link or Master Key. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The index that matches the search criteria, or 0xFF if no matching entry was found. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf56219030cac5337be5ee6e54ad355b2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberEraseKeyTableEntry </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A function to clear a single entry in the key table. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>The index in the key table of the entry to erase.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the index is valid and the key data was erased. <a class="el" href="group__status__codes.htm#ga67f92b93b6077b03552f5efd3ef3a9f2" title="The passed key data is not valid. A key of all zeros or all F&#39;s are reserved values and cannot be use...">EMBER_KEY_INVALID</a> if the index is out of range for the size of the key table. </dd></dl>

</div>
</div>
<a class="anchor" id="ga696062844e62d39f1b66de050ef668ab"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberClearKeyTable </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function clears the key table of the current network. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the key table was successfully cleared. <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="ga74b8d6a8f9f9b02e8e0fc22d8423691e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberStopWritingStackTokens </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function suppresses normal write operations of the stack tokens. This is only done in rare circumstances when the device already has network parameters but needs to conditionally rejoin a network in order to perform a security message exchange (i.e. key establishment). If the network is not authenticated properly, it will need to forget any stack data it used and return to the old network. By suppressing writing of the stack tokens the device will not have stored any persistent data about the network and a reboot will clear the RAM copies. The Smart Energy profile feature Trust Center Swap-out uses this in order to securely replace the Trust Center and re-authenticate to it. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if it could allocate temporary buffers to store network information. <a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a> otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="ga7c55d078535d60435535833d5904503d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberStartWritingStackTokens </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function will immediately write the value of stack tokens and then resume normal network operation by writing the stack tokens at appropriate intervals or changes in state. It has no effect unless a previous call was made to <a class="el" href="group__security.htm#ga74b8d6a8f9f9b02e8e0fc22d8423691e" title="This function suppresses normal write operations of the stack tokens. This is only done in rare circu...">emberStopWritingStackTokens()</a>. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if it had previously unwritten tokens from a call to <a class="el" href="group__security.htm#ga74b8d6a8f9f9b02e8e0fc22d8423691e" title="This function suppresses normal write operations of the stack tokens. This is only done in rare circu...">emberStopWritingStackTokens()</a> that it now wrote to the token system. <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="gabd236fba398a490900a9ae36b0b9f26d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberWritingStackTokensEnabled </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function will determine whether stack tokens will be written to persistent storage when they change. By default it is set to true meaning the stack will update its internal tokens via HAL calls when the associated RAM values change. </p>
<dl class="section return"><dt>Returns</dt><dd>true if the device will update the persistent storage for tokens when values in RAM change. false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="ga6709a05c3b03ecfb1914b4a0e21ddf72"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberApsCryptMessage </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>encrypt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gad8cef59e716103f3996ce6cb7e10b017">EmberMessageBuffer</a>&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>apsHeaderEndIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a>&#160;</td>
          <td class="paramname"><em>remoteEui64</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function performs APS encryption/decryption of messages directly. Normally the stack handles all APS encryption/decryption automatically and there is no need to call this function. If APS data is sent or received via some other means (such as over interpan) then APS encryption/decryption must be done manually. If decryption is performed then the Auxiliary security header and MIC will be removed from the message. If encrypting, then the auxiliary header and MIC will be added to the message. This is only available on SOC platforms. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">encrypt</td><td>a bool indicating whether perform encryption (true) or decryption (false).</td></tr>
    <tr><td class="paramname">buffer</td><td>An <a class="el" href="group__ember__types.htm#gad8cef59e716103f3996ce6cb7e10b017" title="Incoming and outgoing messages are stored in buffers. These buffers are allocated and freed as needed...">EmberMessageBuffer</a> containing the APS frame to decrypt or encrypt.</td></tr>
    <tr><td class="paramname">apsHeaderEndIndex</td><td>The index into the buffer where the APS header ends. If encryption is being performed this should point to the APS payload, where an Auxiliary header will be inserted. If decryption is being performed, this should point to the start of the Auxiliary header frame.</td></tr>
    <tr><td class="paramname">remoteEui64</td><td>the <a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050" title="EUI 64-bit ID (an IEEE address).">EmberEUI64</a> of the remote device the message was received from (decryption) or being sent to (encryption).</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if encryption/decryption was performed successfully. An appropriate <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> code on failure. </dd></dl>

</div>
</div>
<a class="anchor" id="ga3188bfcc1faeed54a05ce0f5b6d9b26f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberGetMfgSecurityConfig </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberMfgSecurityStruct.htm">EmberMfgSecurityStruct</a> *&#160;</td>
          <td class="paramname"><em>settings</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function will retrieve the security configuration stored in manufacturing tokens. It is only available on the 35x series. See <a class="el" href="group__security.htm#gaab02540e7f12d04e23f6691a7de15687" title="This function will set the security configuration to be stored in manufacturing tokens. It is only available on the 35x series. This API must be called with care. Once set, a manufacturing token CANNOT BE UNSET without using the ISA3 tools and connecting the chip via JTAG. Additionally, a chip with read protection enabled cannot have its configuration changed without a full chip erase. Thus this provides a way to disallow access to the keys at runtime that cannot be undone.">emberSetMfgSecurityConfig()</a> for more details. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">settings</td><td>A pointer to the <a class="el" href="structEmberMfgSecurityStruct.htm" title="This structure is used to get/set the security config that is stored in manufacturing tokens...">EmberMfgSecurityStruct</a> variable that will contain the returned data.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the tokens were successfully read. <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> error code otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="gaab02540e7f12d04e23f6691a7de15687"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSetMfgSecurityConfig </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>magicNumber</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structEmberMfgSecurityStruct.htm">EmberMfgSecurityStruct</a> *&#160;</td>
          <td class="paramname"><em>settings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function will set the security configuration to be stored in manufacturing tokens. It is only available on the 35x series. This API must be called with care. Once set, a manufacturing token CANNOT BE UNSET without using the ISA3 tools and connecting the chip via JTAG. Additionally, a chip with read protection enabled cannot have its configuration changed without a full chip erase. Thus this provides a way to disallow access to the keys at runtime that cannot be undone. </p>
<p>To call this API the magic number must be passed in corresponding to <a class="el" href="group__ember__types.htm#ga27ec996c94884dc101b4fe9e1ef0cd4f" title="This magic number prevents accidentally changing the key settings. The emberSetMfgSecurityConfig() AP...">EMBER_MFG_SECURITY_CONFIG_MAGIC_NUMBER</a>. This prevents accidental calls to this function when <a class="el" href="group__security.htm#ga3188bfcc1faeed54a05ce0f5b6d9b26f" title="This function will retrieve the security configuration stored in manufacturing tokens. It is only available on the 35x series. See emberSetMfgSecurityConfig() for more details.">emberGetMfgSecurityConfig()</a> was actually intended.</p>
<p>This function will disable external access to the actual key data used for decryption/encryption outside the stack. Attempts to call <a class="el" href="group__security.htm#ga4352dea1936fc63d9dbb01cf1563f627" title="Gets the specified key and its associated data. This can retrieve the Trust Center Link Key...">emberGetKey()</a> or <a class="el" href="group__security.htm#ga0192a43313f8fbf18ea01a3e7e152340" title="A function used to obtain data from the Key Table. On the 35x series chips, the data returned by this...">emberGetKeyTableEntry()</a> will return the meta-data (e.g. sequence number, associated EUI64, frame counters) but the key value may be modified, see below.</p>
<p>The stack always has access to the actual key data.</p>
<p>If the <a class="el" href="group__ember__types.htm#ga5a6b3d5cf9e5f17a93a16dff19ddc7e5">EmberKeySettings</a> within the <a class="el" href="structEmberMfgSecurityStruct.htm" title="This structure is used to get/set the security config that is stored in manufacturing tokens...">EmberMfgSecurityStruct</a> are set to <a class="el" href="group__ember__types.htm#gga5a6b3d5cf9e5f17a93a16dff19ddc7e5ab0b6f9f8ec3bd8ae86ad3862421b49ea">EMBER_KEY_PERMISSIONS_NONE</a> then the key value with be set to zero when <a class="el" href="group__security.htm#ga4352dea1936fc63d9dbb01cf1563f627" title="Gets the specified key and its associated data. This can retrieve the Trust Center Link Key...">emberGetKey()</a> or <a class="el" href="group__security.htm#ga0192a43313f8fbf18ea01a3e7e152340" title="A function used to obtain data from the Key Table. On the 35x series chips, the data returned by this...">emberGetKeyTableEntry()</a> is called. If the <a class="el" href="group__ember__types.htm#ga5a6b3d5cf9e5f17a93a16dff19ddc7e5">EmberKeySettings</a> within the <a class="el" href="structEmberMfgSecurityStruct.htm" title="This structure is used to get/set the security config that is stored in manufacturing tokens...">EmberMfgSecurityStruct</a> are set to <a class="el" href="group__ember__types.htm#gga5a6b3d5cf9e5f17a93a16dff19ddc7e5af8750e480ab82c63dcd8fe9161737758">EMBER_KEY_PERMISSIONS_HASHING_ALLOWED</a>, then the AES-MMO hash of the key will replace the actual key data when calls to <a class="el" href="group__security.htm#ga4352dea1936fc63d9dbb01cf1563f627" title="Gets the specified key and its associated data. This can retrieve the Trust Center Link Key...">emberGetKey()</a> or <a class="el" href="group__security.htm#ga0192a43313f8fbf18ea01a3e7e152340" title="A function used to obtain data from the Key Table. On the 35x series chips, the data returned by this...">emberGetKeyTableEntry()</a> are made. If the <a class="el" href="group__ember__types.htm#ga5a6b3d5cf9e5f17a93a16dff19ddc7e5">EmberKeySettings</a> within the <a class="el" href="structEmberMfgSecurityStruct.htm" title="This structure is used to get/set the security config that is stored in manufacturing tokens...">EmberMfgSecurityStruct</a> are set to <a class="el" href="group__ember__types.htm#gga5a6b3d5cf9e5f17a93a16dff19ddc7e5aa070ebafa735aa1d6f5ea0ad2e6651be">EMBER_KEY_PERMISSIONS_READING_ALLOWED</a>, then the actual key data is returned. This is the default value of the token.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">magicNumber</td><td>A 32-bit value that must correspond to <a class="el" href="group__ember__types.htm#ga27ec996c94884dc101b4fe9e1ef0cd4f" title="This magic number prevents accidentally changing the key settings. The emberSetMfgSecurityConfig() AP...">EMBER_MFG_SECURITY_CONFIG_MAGIC_NUMBER</a>, otherwise <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> will be returned.</td></tr>
    <tr><td class="paramname">settings</td><td>The security settings that are intended to be set by the application and written to manufacturing token.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga26be7aa0168f32bbba32155e562cbd12" title="An invalid value was passed as an argument to a function.">EMBER_BAD_ARGUMENT</a> if the passed magic number is invalid. <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> if the chip does not support writing MFG tokens (i.e. em2xx) <a class="el" href="group__status__codes.htm#gac38d3cd97519cb35737765a0bf8c2138" title="There was an attempt to set a security configuration that is not valid given the other security setti...">EMBER_SECURITY_CONFIGURATION_INVALID</a> if there was an attempt to write an unerased manufacturing token (i.e. the token has already been set). </dd></dl>

</div>
</div>
<a class="anchor" id="gaed8603abfdd53070fe39880ad50b73c8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSetOutgoingNwkFrameCounter </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>desiredValue</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to set NWK layer outgoing frame counter (intended for device restoration purposes). Caveats: </p>
<ul>
<li>Can only be called before NetworkInit / FormNetwork / JoinNetwork, when <a class="el" href="group__stack__info.htm#ga79b3b8e6f806d28cb8232f87970796c4" title="Returns the current join status.">emberNetworkState()</a>==EMBER_NO_NETWORK.</li>
<li>This function should be called before <a class="el" href="group__security.htm#ga124d62dd7d3d15d2fcffae92c5bcdda6" title="This function sets the initial security state that will be used by the device when it forms or joins ...">emberSetInitialSecurityState</a>, and the EMBER_NO_FRAME_COUNTER_RESET bitmask should be added to the initial security bitmask when ::emberSetInitialSecuritState is called.</li>
<li>If used in multi-network context, be sure to call <a class="el" href="group__multi__network.htm#ga8cbb6b0d73ecac11e500f909f0c16925" title="Sets the current network.">emberSetCurrentNetwork()</a> prior to calling this function.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">desiredValue</td><td>The desired outgoing NWK frame counter value. This should needs to be less than MAX_INT32U_VALUE to ensure that rollover does not occur on the next encrypted transmission.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if calling context is valid (<a class="el" href="group__stack__info.htm#ga79b3b8e6f806d28cb8232f87970796c4" title="Returns the current join status.">emberNetworkState()</a> == EMBER_NO_NETWORK) and desiredValue &lt; MAX_INT32U_VALUE. Otherwise, <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="gabc394b03f8e4b6d729cc4fce1444ff80"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSetOutgoingApsFrameCounter </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>desiredValue</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to set APS layer outgoing frame counter for Trust Center Link Key (intended for device restoration purposes). Caveats: </p>
<ul>
<li>Can only be called before NetworkInit / FormNetwork / JoinNetwork, when <a class="el" href="group__stack__info.htm#ga79b3b8e6f806d28cb8232f87970796c4" title="Returns the current join status.">emberNetworkState()</a>==EMBER_NO_NETWORK.</li>
<li>This function should be called before <a class="el" href="group__security.htm#ga124d62dd7d3d15d2fcffae92c5bcdda6" title="This function sets the initial security state that will be used by the device when it forms or joins ...">emberSetInitialSecurityState</a>, and the EMBER_NO_FRAME_COUNTER_RESET bitmask should be added to the initial security bitmask when ::emberSetInitialSecuritState is called.</li>
<li>If used in multi-network context, be sure to call <a class="el" href="group__multi__network.htm#ga8cbb6b0d73ecac11e500f909f0c16925" title="Sets the current network.">emberSetCurrentNetwork()</a> prior to calling this function.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">desiredValue</td><td>The desired outgoing APS frame counter value. This should needs to be less than MAX_INT32U_VALUE to ensure that rollover does not occur on the next encrypted transmission.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if calling context is valid (<a class="el" href="group__stack__info.htm#ga79b3b8e6f806d28cb8232f87970796c4" title="Returns the current join status.">emberNetworkState()</a> == EMBER_NO_NETWORK) and desiredValue &lt; MAX_INT32U_VALUE. Otherwise, <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="ga2279f8c3417e59f63e44de94cbae8629"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberAddTransientLinkKey </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga21de0cf5f8f6730bc3be6c7ec2b82050">EmberEUI64</a>&#160;</td>
          <td class="paramname"><em>partnerEUI64</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberKeyData.htm">EmberKeyData</a> *&#160;</td>
          <td class="paramname"><em>key</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a temporary link key for a joining device. The link key will be stored for emberTransientKeyTimeoutS seconds. After that time, the key will be removed. The removed key will need to be added again using this API in order for it to be used by a joining device again. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">partnerEUI64</td><td>The EUI of the joining device. If all FF's are entered for this value, then the key will be able to be used for all joining devices that do not already have transient key table entries.</td></tr>
    <tr><td class="paramname">key</td><td>The temporary link key to the joining device.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the transient key has been added. <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> if the key type is invalid. <a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a> if there are no buffers. </dd></dl>

</div>
</div>
<a class="anchor" id="gaaec01a95d5514e2264b1a12294255cfe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberClearTransientLinkKeys </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Clear all of the transient link keys from RAM. </p>

</div>
</div>
<a class="anchor" id="ga66e180afe44e7f8eac1a36a985ee9777"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberHmacAesHash </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>dataLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a class="anchor" id="gad998db8a61b90cb1d17949f6b0ee4c6c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t emberTransientKeyTimeoutS</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The length of time, in seconds, that a trust center will store a transient link key that a device can use to join its network. A transient key is added with a call to emberAddTransientLinkKey. After the transient key is added, it will be removed once this amount of time has passed. A joining device will not be able to use that key to join until it is added again on the trust center. The default value is 300 seconds, i.e., 5 minutes. </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<hr size="1">
<table border="0" cellspacing="0" cellpadding="0" width=100%>
<tr>
<td><address><small>
EmberZNet API Reference: For the EM35x SoC Platform. EmberZNet 5.9.2.0.
</small></address>
</td>
<td align="right">
<address><small>
</small></address>
</td>
</tr>
</table>
</body>
</html>
