<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>EmberZNet API Reference: For the EM35x SoC Platform</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
</head>
<body>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td><img src="SiliconLabsLogo_Black.jpg" style="padding: 10px;width:40%;height:40%;" /></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">EmberZNet API Reference: For the EM35x SoC Platform
   &#160;<span id="projectnumber">EmberZNet 5.9.2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.2 -->
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('em__usbint_8c_source.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">em_usbint.c</div>  </div>
</div><!--header-->
<div class="contents">
<a href="em__usbint_8c.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**************************************************************************/</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include PLATFORM_HEADER</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="ember_8h.htm" title="The master include file for the EmberZNet API.">stack/include/ember.h</a>&quot;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="hal_8h.htm" title="Generic set of HAL includes for all platforms.">hal/hal.h</a>&quot;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#if defined(CORTEXM3_EM35X_USB)</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor"></span><span class="comment">// Only define this ISR if USB is on and EnergyMicro USB is enabled. When this</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">// function is defined it will cause extra code to be pulled in even if the ISR</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">// will never fire.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="em__usb_8h.htm" title="USB protocol stack library API for EFM32.">em_usb.h</a>&quot;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="em__usbhal_8h.htm" title="USB protocol stack library, low level USB peripheral access.">em_usbhal.h</a>&quot;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="em__usbtypes_8h.htm" title="USB protocol stack library, internal type definitions.">em_usbtypes.h</a>&quot;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="em__usbd_8h.htm" title="USB protocol stack library API for EFM32.">em_usbd.h</a>&quot;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &quot;serial/serial.h&quot;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;USBD_Ep_TypeDef *ep;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keywordtype">void</span> halUsbIsr(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  uint32_t byteCount;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">  #if defined(BOOTLOADER) &amp;&amp; defined (VBUSMON)</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor"></span>  <a class="code" href="group__board.htm#gad4bce00b7ad404681d15a17805fb73ee" title="The interrupt service routine for VBUSMON. Remember that other pieces that might want to use IRQC...">VBUSMON_ISR</a>();</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">  #endif</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  uint32_t status = INT_USBFLAG;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  INT_USBFLAG = status;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="keywordflow">if</span> ( status == 0 )</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  {</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  }</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="comment">//Ensure EP0 IN is not stalled.  Refer to receiving getQualifierDescriptor</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="comment">//for more information.</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  USB_STALLIN &amp;= ~USB_STALLINEP0;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="keywordflow">if</span>(status &amp; INT_USBWAKEUP &amp; INT_USBCFG)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">    #ifdef USB_DEBUG_SUSPEND</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor"></span>      DEBUG_BUFFER += sprintf(DEBUG_BUFFER,<span class="stringliteral">&quot;INT_USBWAKEUP\r\n&quot;</span>);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="comment">//The INT_USBWAKEUP interrupt triggers for a successful remote wakeup</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="comment">//This is essentially a resume only intiated by the device instaed of host</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="comment">//need INT_USBCFG mask to enable turning on/off remote wakeup interrupt</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">    #ifndef BOOTLOADER</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor"></span>      USBD_SetUsbState( dev-&gt;lastState );</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      halResumeCallback();</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor">      #ifndef EMBER_NO_STACK</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor"></span>      <a class="code" href="group__child.htm#gad2a36231590e2bb0ada408e24ed0d3f9" title="Initializes the radio. Typically called coming out of deep sleep.">emberStackPowerUp</a>();</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">      #endif // EMBER_NO_STACK</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor"></span><span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor"></span>  }</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <span class="keywordflow">if</span>(status &amp; INT_USBRESUME)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  {</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">    #ifdef USB_DEBUG_SUSPEND</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor"></span>      DEBUG_BUFFER += sprintf(DEBUG_BUFFER,<span class="stringliteral">&quot;INT_USBRESUME\r\n&quot;</span>);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor"></span>    <span class="comment">//The INT_USBRESUME interrupt pulls us out of suspend while the USB</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="comment">//core auto clears the USBSUSP_CLKSEL bit (used when entering suspend).</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">    #ifndef BOOTLOADER</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor"></span>      USBD_SetUsbState( dev-&gt;lastState );</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      halResumeCallback();</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">      #ifndef EMBER_NO_STACK</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor"></span>      <a class="code" href="group__child.htm#gad2a36231590e2bb0ada408e24ed0d3f9" title="Initializes the radio. Typically called coming out of deep sleep.">emberStackPowerUp</a>();</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">      #endif // EMBER_NO_STACK</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor"></span><span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor"></span>  }</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <span class="keywordflow">if</span>(status &amp; INT_USBSUSPEND)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  {</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">    #ifdef USB_DEBUG_SUSPEND</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor"></span>      DEBUG_BUFFER += sprintf(DEBUG_BUFFER,<span class="stringliteral">&quot;INT_USBSUSPEND\r\n&quot;</span>);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor"></span>    <span class="comment">//If suspend if being supported, we now have 7ms to get down to</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">//suspend current.  Setting usb state to USBD_STATE_SUSPENDED will allow</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="comment">//the usbSuspendDsr() function to place us in the appropriate low</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="comment">//power clocking and idle mode.</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment">//NOTE:  The stack and HAL should be shutdown like deep sleeping before</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="comment">//       suspend is entered.  USB sleep involves slowing down peripheral</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">//       clocking, but it does not stop the clocks.  This means</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="comment">//       peripherals will keep running if they&#39;re enabled.  Being at</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">//       a slower clock speed can severely disrupt application behavior</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">//       that depends on clean peripherial behavior at a desired clock</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">//       rate.  For example, problems with the UART would be very obvious.</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor">    #ifndef BOOTLOADER</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor"></span>    USBD_SetUsbState( <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da74e1d49afc6b25e202cc9e42f595f4ed">USBD_STATE_SUSPENDED</a> );</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor"></span>    <span class="comment">//USBTODO- Software needs to remember when INT_USBSUSPEND fires so that</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="comment">//  it can return to suspend if a non-USB event pulls us out of</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="comment">//  the USB sleep mode.  Only INT_USBRESUME is allowed to keep us</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="comment">//  out of suspend.</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <span class="keywordflow">if</span>(status &amp; INT_USBRESET)</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  {</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor">    #ifdef USB_DEBUG_INT</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor"></span>      DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;\r\n\r\nINT_USBRESET\r\n&quot;</span>);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor"></span>    <span class="comment">//When a USB reset occurs it resets the core but not the DMA.  To ensure</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">//transactions after a reset are fresh all buffers (DMA) need to be</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">//cleared.</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    USB_BUFCLR = (USB_BUFCLRINEP6 |</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                  USB_BUFCLRINEP5 |</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                  USB_BUFCLRINEP4 |</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                  USB_BUFCLRINEP3 |</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                  USB_BUFCLRINEP2 |</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                  USB_BUFCLRINEP1 |</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                  USB_BUFCLRINEP0 );</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="comment">/* Setup EP0 to receive SETUP packets */</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    USBDHAL_StartEp0Setup( dev );</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    USBD_Ep_TypeDef *ep;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    ep = &amp;dev-&gt;ep[ 0 ];</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    ep-&gt;state = D_EP_IDLE;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    ep-&gt;remaining = 0;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    ep-&gt;in = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    USBDHAL_UnStallEp( ep );              <span class="comment">/* Stall Ep0 IN                 */</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    ep-&gt;in = <span class="keyword">false</span>;                     <span class="comment">/* OUT for next SETUP           */</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    USBDHAL_UnStallEp( ep );              <span class="comment">/* Stall Ep0 OUT                */</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">if</span> ( dev-&gt;callbacks-&gt;usbReset )</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      dev-&gt;callbacks-&gt;usbReset();</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="comment">// USBD_SetUsbState( USBD_STATE_DEFAULT );</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// USBDHAL_AbortAllTransfers( USB_STATUS_DEVICE_RESET );</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keywordflow">if</span>(USB_RXBUFSIZEEP0A == 0)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    USB_BUFCLR = USB_BUFCLRINEP0;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    USBDHAL_StartEp0Setup( dev );</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    USBD_Ep_TypeDef *ep;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    ep = &amp;dev-&gt;ep[ 0 ];</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    ep-&gt;state = D_EP_IDLE;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    ep-&gt;remaining = 0;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  <span class="comment">//==== RX functionality ====</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  <span class="keywordflow">if</span> (status &amp; INT_USBRXVALID)</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  {</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordtype">int</span> epnum;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    uint16_t epmask;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="comment">// sweep through eps to determine which EP the interrupt is on</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">for</span> ( epnum = 0,                epmask = INT_USBRXVALIDEP0;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;          epnum &lt;= MAX_NUM_OUT_EPS;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;          epnum++,                  epmask &lt;&lt;= 1 )</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    {</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;      <span class="keywordflow">if</span> (status &amp; epmask)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;      {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="comment">// determine how many bytes were received</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keyword">volatile</span> uint32_t *bufsize = EPOUTBUFSIZE[epnum];</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="preprocessor">        #ifdef USB_DEBUG_INT</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="preprocessor"></span><span class="preprocessor">          #ifdef USB_DEBUG_VERBOSE</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor"></span>            DEBUG_BUFFER += sprintf(DEBUG_BUFFER,<span class="stringliteral">&quot;RX%d--&gt;&quot;</span>,epnum);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            uint8_t i;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keywordflow">for</span>(i=0;i&lt;*bufsize;i++)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            {</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;              DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;%02X&quot;</span>, EPOUTBUF[epnum][i]);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;  %d bytes\r\n&quot;</span>, *bufsize);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="preprocessor">          #else</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor"></span>            DEBUG_BUFFER += sprintf(DEBUG_BUFFER,<span class="stringliteral">&quot;RX%d--&gt;%d bytes\r\n&quot;</span>,epnum, *bufsize);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="preprocessor">          #endif</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor"></span><span class="preprocessor">        #endif</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="comment">// update endpoint state</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        ep = USBD_GetEpFromAddr( epnum );</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        byteCount = EFM32_MIN(ep-&gt;remaining,*bufsize);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        ep-&gt;remaining -= byteCount;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        ep-&gt;xferred   += byteCount;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="comment">// #ifdef USB_DEBUG_INT</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="comment">//   DEBUG_BUFFER += sprintf(DEBUG_BUFFER, &quot;  %d remaining, %d xferred\r\n&quot;, ep-&gt;remaining, ep-&gt;xferred);</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="comment">// #endif</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="comment">// copy buffer to endpoint specified buffer location before erasing</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">if</span> (ep-&gt;state == D_EP_RECEIVING)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;          <a class="code" href="group__platform__common.htm#gaf6224544e9b1c56d777bf89948add9a9">MEMMOVE</a>(ep-&gt;buf,EPOUTBUF[ep-&gt;num], *bufsize);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="comment">// dispatch endpoint handler, erase buffer, reenable endpoint RX</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keywordflow">if</span> (epnum ==0)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        {</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;          USBDEP_Ep0Handler( dev );</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        }</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="preprocessor">          #if EM_SERIAL3_ENABLED</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="preprocessor"></span>            <a class="code" href="em__usb_8h.htm#a1e02d0ca49b472002e39bac81fddd782">halInternalUart3RxIsr</a>(EPOUTBUF[ep-&gt;num], *bufsize);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="preprocessor">          #endif //EM_SERIAL3_ENABLED</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;          USBDEP_EpHandler(ep-&gt;addr);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <a class="code" href="group__platform__common.htm#gad7795912037ecd3781859d0895f051a8" title="Friendly convenience macro pointing to the C Stdlib functions.">MEMSET</a>(EPOUTBUF[epnum], 0, *bufsize);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        USB_RXVALID = ((USB_RXVALIDEP0A&lt;&lt;epnum) | (USB_RXVALIDEP0B&lt;&lt;epnum));</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;      }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  }</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  <span class="comment">//==== TX functionality ====</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  <span class="comment">//NOTE: INT_USBTXACTIVEEPx interrupts fire on USB_TXACTIVEEPxy falling edge.</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  <span class="keywordflow">if</span> (status &amp; INT_USBTXACTIVE)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordtype">int</span> epnum;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    uint16_t epmask;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="comment">// sweep through eps to determine which EP the interrupt is on</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">for</span> ( epnum = 0,                epmask = INT_USBTXACTIVEEP0;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;          epnum &lt;= MAX_NUM_OUT_EPS;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;          epnum++,                  epmask &lt;&lt;= 1 )</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    {</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;      <span class="keywordflow">if</span> (status &amp; epmask)</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;      {</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="comment">// determine how many bytes were transmitted</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keyword">volatile</span> uint32_t *bufsize = EPINBUFSIZE[epnum];</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="preprocessor">        #ifdef USB_DEBUG_INT</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="preprocessor"></span>          DEBUG_BUFFER += sprintf(DEBUG_BUFFER,<span class="stringliteral">&quot;TX%d\r\n&quot;</span>,epnum);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="preprocessor">        #endif</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="comment">// update endpoint state</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        ep = USBD_GetEpFromAddr( <a class="code" href="group__USB__COMMON.htm#gaacee2775597edddc9d4ba5dee2024395">USB_SETUP_DIR_MASK</a> | epnum );</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        byteCount = EFM32_MIN(ep-&gt;remaining,*bufsize);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        ep-&gt;remaining -= byteCount;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        ep-&gt;xferred   += byteCount;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="comment">// dispatch endpoint handler</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keywordflow">if</span> (epnum == 0)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;          USBDEP_Ep0Handler( dev );</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        }</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        {</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;          USBDEP_EpHandler(ep-&gt;addr);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;      }</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    }</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="preprocessor">#ifdef VBUSMON</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="preprocessor"></span><span class="keywordtype">void</span> <a class="code" href="group__board.htm#gad4bce00b7ad404681d15a17805fb73ee" title="The interrupt service routine for VBUSMON. Remember that other pieces that might want to use IRQC...">VBUSMON_ISR</a>(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;{</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  <span class="comment">//VBUSMON is used for sensing VBUS indicating if USB is physically connected.</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  <span class="comment">//An IRQ is used to monitor for any edge change on VBUSMON.</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  <span class="comment">//For self-powered devices, VBUS monitoring is required for the EM358 device</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  <span class="comment">//to function cleanly across physical connect/disconnects of the USB.</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  <span class="comment">//The USB specification requires that the pull-up resistor for</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="comment">//enumerating is disconnected if VBUS is not connected.</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;  <span class="comment">//clear int before read to avoid potential of missing interrupt</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  INT_MISS = <a class="code" href="group__board.htm#ga4767b26249ab17587e23a87bb0afe6b4" title="The missed interrupt bit for VBUSMON.">VBUSMON_MISS_BIT</a>;     <span class="comment">//clear missed interrupt flag</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  INT_GPIOFLAG = <a class="code" href="group__board.htm#ga71f8c638fe97ef20aa58cec345d1dc09" title="The interrupt flag bit for VBUSMON.">VBUSMON_FLAG_BIT</a>; <span class="comment">//clear top level interrupt flag</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  <span class="comment">//Because this ISR/IRQ triggers on both edges, usbVbusPresent is used</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  <span class="comment">//to track the state of VBUS.</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  <span class="comment">//Always directly read VBUSMON to ensure this ISR is changing to the correct,</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  <span class="comment">//current state.</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  <span class="comment">//Falling edge: VBUS removed - Must set ENUMCTRL to input-low.</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  <span class="comment">//Rrising edge: VBUS applied - If usbConfigEnumerate() has been called and</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  <span class="comment">//this device is ready to enumerate, set ENUMCTRL to output-high and</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <span class="comment">//perform enumeration.</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  usbVbusPresent = ((<a class="code" href="group__board.htm#ga6b74ebf7985914d2185d28b50539bcb6" title="The GPIO input register for VBUSMON.">VBUSMON_IN</a> &amp; <a class="code" href="group__board.htm#ga66f4f5005a181e92aa001bc44dfa073a" title="The actual GPIO VBUSMON is connected to. Remember that other pieces might want to use PA3...">VBUSMON</a>) == <a class="code" href="group__board.htm#ga66f4f5005a181e92aa001bc44dfa073a" title="The actual GPIO VBUSMON is connected to. Remember that other pieces might want to use PA3...">VBUSMON</a>);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  <span class="keywordflow">if</span>(usbVbusPresent)</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="group__USB__DEVICE.htm#gab4e55bb0aacaa90aab28a79e9b131b0f" title="Get current USB device state.">USBD_GetUsbState</a>()==<a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da44c1920b09ea1062ea4d7ac31a846509">USBD_STATE_CONFIGURED</a>)</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;      <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="comment">//Only attempt enumerate if usbConfigEnumerate has already been called.</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="comment">//Set ENUMCTRL ouput-high to enumerate.</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <a class="code" href="group__board.htm#ga995777714022e4e65da22d7ec78ac8e9" title="Set the GPIO&#39;s configuration to the provided state. The two states used are GPIOCFG_OUT when the devi...">ENUMCTRL_SETCFG</a>(GPIOCFG_OUT);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <a class="code" href="group__board.htm#ga1e5b046d6e18fbf28c8fc14725348cbb" title="When the GPIO used for enumeration is configured as push-pull, this macro makes it easy to set the ou...">ENUMCTRL_SET</a>();</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="comment">// halSetLed(BOARDLED0);</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    USBD_SetUsbState(<a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da978c707d313eb49b70bc62dfae304048">USBD_STATE_DEFAULT</a>);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  }</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  {</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="comment">//Configure ENUMCTRL as an input so the device de-enumurates and</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="comment">//the pin does not put any load on the bus.  (The spec says the</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="comment">//pull-up resistor used for enumeration should be tri-state.  On</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="comment">//EM358 devices the input configuration is the best available choice</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="comment">//since tri-state isn&#39;t possible.)</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="comment">//Clear down ENUMCTRL to be ready for the next time enumerating.</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <a class="code" href="group__board.htm#ga995777714022e4e65da22d7ec78ac8e9" title="Set the GPIO&#39;s configuration to the provided state. The two states used are GPIOCFG_OUT when the devi...">ENUMCTRL_SETCFG</a>(GPIOCFG_IN);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <a class="code" href="group__board.htm#gaf9998c8b423b704f44d640f0c0f95c33" title="When the GPIO used for enumeration is configured as push-pull, this macro makes it easy to clear the ...">ENUMCTRL_CLR</a>();</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="comment">// halClearLed(BOARDLED0);</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    USBD_SetUsbState(<a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da35ca8b56bdc46ce0dd7c39400796ba7c">USBD_STATE_NONE</a>);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;  }</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;}</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="preprocessor">#endif // VBUSMON</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="preprocessor">#endif // CORTEXM3_EM35X_USB</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<hr size="1">
<table border="0" cellspacing="0" cellpadding="0" width=100%>
<tr>
<td><address><small>
EmberZNet API Reference: For the EM35x SoC Platform. EmberZNet 5.9.2.0.
</small></address>
</td>
<td align="right">
<address><small>
</small></address>
</td>
</tr>
</table>
</body>
</html>
