<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>EmberZNet API Reference: For the EM35x SoC Platform</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
</head>
<body>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td><img src="SiliconLabsLogo_Black.jpg" style="padding: 10px;width:40%;height:40%;" /></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">EmberZNet API Reference: For the EM35x SoC Platform
   &#160;<span id="projectnumber">EmberZNet 5.9.2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.2 -->
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('em__usbhal_8c_source.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">em_usbhal.c</div>  </div>
</div><!--header-->
<div class="contents">
<a href="em__usbhal_8c.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**************************************************************************/</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include PLATFORM_HEADER</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="ember_8h.htm" title="The master include file for the EmberZNet API.">stack/include/ember.h</a>&quot;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="hal_8h.htm" title="Generic set of HAL includes for all platforms.">hal/hal.h</a>&quot;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#if defined(CORTEXM3_EM35X_USB)</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="em__usb_8h.htm" title="USB protocol stack library API for EFM32.">em_usb.h</a>&quot;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="em__usbtypes_8h.htm" title="USB protocol stack library, internal type definitions.">em_usbtypes.h</a>&quot;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="em__usbhal_8h.htm" title="USB protocol stack library, low level USB peripheral access.">em_usbhal.h</a>&quot;</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keywordtype">bool</span> usbVbusPresent;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">extern</span> USBD_Device_TypeDef *dev;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<a class="code" href="group__iar.htm#ga54cb903718e9e698f95e6a19c98db412" title="Provide a portable way to align data.">ALIGNMENT</a>(8)</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;EndPointUnion usbBufferA = {0,};</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;uint8_t *EPOUTBUF[7] = {usbBufferA.eps.ep0OUT,</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                    usbBufferA.eps.ep1OUT,</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                    usbBufferA.eps.ep2OUT,</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                    usbBufferA.eps.ep3OUT,</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                    usbBufferA.eps.ep4OUT,</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                    usbBufferA.eps.ep5OUT,</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                    usbBufferA.eps.ep6OUT};</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;uint8_t *EPINBUF[7]  = {usbBufferA.eps.ep0IN,</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                      usbBufferA.eps.ep1IN,</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                      usbBufferA.eps.ep2IN,</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                      usbBufferA.eps.ep3IN,</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                      usbBufferA.eps.ep4IN,</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                      usbBufferA.eps.ep5IN,</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                      usbBufferA.eps.ep6IN};</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">volatile</span> uint32_t *EPOUTBUFSIZE[7] = {&amp;USB_RXBUFSIZEEP0A,</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                                    &amp;USB_RXBUFSIZEEP1A,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                    &amp;USB_RXBUFSIZEEP2A,</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                                    &amp;USB_RXBUFSIZEEP3A,</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                                    &amp;USB_RXBUFSIZEEP4A,</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                                    &amp;USB_RXBUFSIZEEP5A,</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                                    &amp;USB_RXBUFSIZEEP6A};</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">volatile</span> uint32_t *EPINBUFSIZE[7] =  {&amp;USB_TXBUFSIZEEP0A,</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                                    &amp;USB_TXBUFSIZEEP1A,</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                                    &amp;USB_TXBUFSIZEEP2A,</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                                    &amp;USB_TXBUFSIZEEP3A,</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                                    &amp;USB_TXBUFSIZEEP4A,</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                                    &amp;USB_TXBUFSIZEEP5A,</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                                    &amp;USB_TXBUFSIZEEP6A};</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keywordtype">void</span> USBDHAL_Connect( <span class="keywordtype">void</span> )</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">  #if USB_SELFPWRD_STATE==1 &amp;&amp; defined(VBUSMON)</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="comment">//For self-powered devices, The USB specification requires that the pull-up</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  <span class="comment">//resistor is disconnected if VBUS is not connected.</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  vbusMonCfg();</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  <span class="keywordflow">if</span>(usbVbusPresent) {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">//Set ENUMCTRL ouput-high to enumerate.</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="group__board.htm#ga995777714022e4e65da22d7ec78ac8e9" title="Set the GPIO&#39;s configuration to the provided state. The two states used are GPIOCFG_OUT when the devi...">ENUMCTRL_SETCFG</a>(GPIOCFG_OUT);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="group__board.htm#ga1e5b046d6e18fbf28c8fc14725348cbb" title="When the GPIO used for enumeration is configured as push-pull, this macro makes it easy to set the ou...">ENUMCTRL_SET</a>();</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  }</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">  #else // USB_SELFPWRD_STATE==1 &amp;&amp; defined(VBUSMON)</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor"></span>    <span class="comment">//Set ENUMCTRL ouput-high to enumerate.</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="group__board.htm#ga995777714022e4e65da22d7ec78ac8e9" title="Set the GPIO&#39;s configuration to the provided state. The two states used are GPIOCFG_OUT when the devi...">ENUMCTRL_SETCFG</a>(GPIOCFG_OUT);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="group__board.htm#ga1e5b046d6e18fbf28c8fc14725348cbb" title="When the GPIO used for enumeration is configured as push-pull, this macro makes it easy to set the ou...">ENUMCTRL_SET</a>();</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">  #endif // USB_SELFPWRD_STATE==1 &amp;&amp; defined(VBUSMON)</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keywordtype">void</span> USBDHAL_Disconnect( <span class="keywordtype">void</span> )</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <a class="code" href="group__board.htm#ga995777714022e4e65da22d7ec78ac8e9" title="Set the GPIO&#39;s configuration to the provided state. The two states used are GPIOCFG_OUT when the devi...">ENUMCTRL_SETCFG</a>(GPIOCFG_IN);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <a class="code" href="group__board.htm#gaf9998c8b423b704f44d640f0c0f95c33" title="When the GPIO used for enumeration is configured as push-pull, this macro makes it easy to clear the ...">ENUMCTRL_CLR</a>();</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<a class="code" href="group__USB__COMMON.htm#ga889b575b566a663621c33eebf46272c1" title="USB transfer status enumerator.">USB_Status_TypeDef</a> USBDHAL_CoreInit( uint32_t totalRxFifoSize,</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                     uint32_t totalTxFifoSize )</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="comment">//Configure PA0 and PA1 in analog mode for USB</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <a class="code" href="group__iar.htm#ga71a2a6a526f70740ff022af5d0f92b29" title="A convenience macro that makes it easy to change the field of a register to any value.">SET_REG_FIELD</a>(GPIO_PACFGL, PA0_CFG, GPIOCFG_ANALOG);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <a class="code" href="group__iar.htm#ga71a2a6a526f70740ff022af5d0f92b29" title="A convenience macro that makes it easy to change the field of a register to any value.">SET_REG_FIELD</a>(GPIO_PACFGL, PA1_CFG, GPIOCFG_ANALOG);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  USB_BUFBASEA = (uint32_t)usbBufferA.allEps;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <a class="code" href="group__platform__common.htm#gad7795912037ecd3781859d0895f051a8" title="Friendly convenience macro pointing to the C Stdlib functions.">MEMSET</a>(usbBufferA.allEps, 0, USB_BUFFER_SIZE);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  <span class="comment">// Double buffering currently not supported</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="comment">// #ifdef USB_DOUBLE_BUFFER  </span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  <span class="comment">//   USB_BUFBASEB = (uint32_t)usbBufferB.allEps;</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  <span class="comment">//   MEMSET(usbBufferB.allEps, 0, USB_BUFFER_SIZE);</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="comment">//   //Refer to &quot;handle buffer B&quot; in the driveEp3Tx() function above</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="comment">//   //to learn why double buffering is not enabled by default.</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="comment">//   </span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  <span class="comment">//   //Enable double buffering bulk EP3.</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  <span class="comment">//   USB_CTRL |= (USB_ENBUFOUTEP3B | USB_ENBUFINEP3B);</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="comment">// #endif // USB_DOUBLE_BUFFER</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="comment">//Use the SELFPWDRD and REMOTEWKUPEN state defines to set the appropriate</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="comment">//bits in USB_CTRL</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  USB_CTRL = (USB_CTRL &amp; (~(USB_SELFPWRD_MASK | USB_REMOTEWKUPEN_MASK))) |</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;             ((<a class="code" href="group__board.htm#gae6b917c9d9f01ff7389e45454482a57c" title="The USB power state.">USB_SELFPWRD_STATE</a>&lt;&lt;USB_SELFPWRD_BIT) |</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;              (<a class="code" href="group__board.htm#ga647bc93bcc6d8107a4aaccd0da9aa59f" title="USB Remote Wakeup Enable.">USB_REMOTEWKUPEN_STATE</a>&lt;&lt;USB_REMOTEWKUPEN_BIT));</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor">#ifdef  EMBER_EMU_TEST</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor"></span>  <span class="comment">//Select which GPIO output is used for connect/disconnect. Any</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="comment">//value &gt; 47, selects disconnected state.</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  EMU_USB_DISCONNECT = PORTA_PIN(2);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="preprocessor">#endif //EMBER_EMU_TEST</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor"></span>  </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a>;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keywordtype">void</span> USBDHAL_AbortAllTransfers( <a class="code" href="group__USB__COMMON.htm#ga889b575b566a663621c33eebf46272c1" title="USB transfer status enumerator.">USB_Status_TypeDef</a> reason )</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;{</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keywordtype">int</span> i;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  USBD_Ep_TypeDef *ep;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <a class="code" href="group__USB__COMMON.htm#ga521fe3060be2a8de6fdd5ee01193958b" title="USB transfer callback function.">USB_XferCompleteCb_TypeDef</a> callback;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <span class="keywordflow">if</span> ( reason != <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a405b76e741623252f954e353aceaf11b">USB_STATUS_DEVICE_RESET</a> )</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="comment">// unsupported</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="comment">// USBDHAL_AbortAllEps();</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="keywordflow">for</span> ( i = 1; i &lt;= NUM_EP_USED; i++ )</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    ep = &amp;(dev-&gt;ep[i]);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">if</span> ( ep-&gt;state != D_EP_IDLE )</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      ep-&gt;state = D_EP_IDLE;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;      <span class="keywordflow">if</span> ( ep-&gt;xferCompleteCb )</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        callback = ep-&gt;xferCompleteCb;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        ep-&gt;xferCompleteCb = <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordflow">if</span> ( ( dev-&gt;lastState == <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da44c1920b09ea1062ea4d7ac31a846509">USBD_STATE_CONFIGURED</a> ) &amp;&amp;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;             ( dev-&gt;state     == <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da8abe2fca377f950a2a9c95316f5246be">USBD_STATE_ADDRESSED</a>  )    )</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;          USBDHAL_DeactivateEp( ep );</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        }</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        callback( reason, ep-&gt;xferred, ep-&gt;remaining );</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;      }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="preprocessor">#ifdef VBUSMON</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="preprocessor"></span><span class="comment">//Use a selectable IRQ for monitoring VBUS on VBUSMON.</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keywordtype">void</span> vbusMonCfg(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;{</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  <span class="comment">//VBUSMON just needs to be a simple input.</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  <a class="code" href="group__board.htm#ga67d14a8254f229f60e005c595bdde793" title="The GPIO configuration needed for VBUSMON. The configuration needs to be a simple input that will mon...">VBUSMON_SETCFG</a>();</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  <span class="comment">//start from a fresh state, just in case</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <a class="code" href="group__board.htm#ga1bbac8109cb2271d2910e6a99195aa28" title="The interrupt configuration register for VBUSMON.">VBUSMON_INTCFG</a> = 0;              <span class="comment">//disable triggering</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  INT_CFGCLR = <a class="code" href="group__board.htm#ga082f47ed895858746a735168bb0622da" title="The interrupt enable bit for VBUSMON.">VBUSMON_INT_EN_BIT</a>; <span class="comment">//clear top level int enable</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  INT_GPIOFLAG = <a class="code" href="group__board.htm#ga71f8c638fe97ef20aa58cec345d1dc09" title="The interrupt flag bit for VBUSMON.">VBUSMON_FLAG_BIT</a>; <span class="comment">//clear stale interrupt</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  INT_MISS = <a class="code" href="group__board.htm#ga4767b26249ab17587e23a87bb0afe6b4" title="The missed interrupt bit for VBUSMON.">VBUSMON_MISS_BIT</a>;     <span class="comment">//clear stale missed interrupt</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  <span class="comment">//configure</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <a class="code" href="group__board.htm#ga56afc19439641d9c87f395b9fc113e7c" title="Point the proper IRQ at the desired pin for VBUSMON. Remember that other pieces that might want to us...">VBUSMON_SEL</a>();             <span class="comment">//point IRQ at the desired pin</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  <a class="code" href="group__board.htm#ga1bbac8109cb2271d2910e6a99195aa28" title="The interrupt configuration register for VBUSMON.">VBUSMON_INTCFG</a>  = ((0 &lt;&lt; GPIO_INTFILT_BIT) | <span class="comment">//no filter</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                     (3 &lt;&lt; GPIO_INTMOD_BIT));  <span class="comment">//3 = both edges</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  usbVbusPresent = ((<a class="code" href="group__board.htm#ga6b74ebf7985914d2185d28b50539bcb6" title="The GPIO input register for VBUSMON.">VBUSMON_IN</a> &amp; <a class="code" href="group__board.htm#ga66f4f5005a181e92aa001bc44dfa073a" title="The actual GPIO VBUSMON is connected to. Remember that other pieces might want to use PA3...">VBUSMON</a>) == <a class="code" href="group__board.htm#ga66f4f5005a181e92aa001bc44dfa073a" title="The actual GPIO VBUSMON is connected to. Remember that other pieces might want to use PA3...">VBUSMON</a>);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  INT_CFGSET = <a class="code" href="group__board.htm#ga082f47ed895858746a735168bb0622da" title="The interrupt enable bit for VBUSMON.">VBUSMON_INT_EN_BIT</a>; <span class="comment">//set top level interrupt enable</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor">#endif //VBUSMON</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="preprocessor">#ifndef EMBER_APPLICATION_HAS_CUSTOM_SUSPEND_CALLBACK</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="preprocessor"></span>  uint32_t savedPeripheralReg;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <span class="keywordtype">void</span> halSuspendCallback(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  {</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="group__micro.htm#ga20bc9158aea3cd3f8ecae04f6c71205b" title="Suspends microcontroller peripherals and board peripherals.">halSuspend</a>();</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    savedPeripheralReg = PERIPHERAL_DISABLE;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    PERIPHERAL_DISABLE |= ((1 &lt;&lt; PERIDIS_ADC_BIT) |   \</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                           (1 &lt;&lt; PERIDIS_TIM2_BIT)|   \</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                           (1 &lt;&lt; PERIDIS_TIM1_BIT)|   \</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                           (1 &lt;&lt; PERIDIS_SC1_BIT) |   \</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                           (1 &lt;&lt; PERIDIS_SC2_BIT));</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  }</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  <span class="keywordtype">void</span> halResumeCallback(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  {</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    PERIPHERAL_DISABLE = savedPeripheralReg;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <a class="code" href="group__micro.htm#ga3828884cc072db5a38d32e46303bd9a9" title="Resumes microcontroller peripherals and board peripherals.">halResume</a>();</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  }</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="preprocessor">#endif // EMBER_APPLICATION_HAS_CUSTOM_SUSPEND_CALLBACK</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="preprocessor">#endif //CORTEXM3_EM35X_USB</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<hr size="1">
<table border="0" cellspacing="0" cellpadding="0" width=100%>
<tr>
<td><address><small>
EmberZNet API Reference: For the EM35x SoC Platform. EmberZNet 5.9.2.0.
</small></address>
</td>
<td align="right">
<address><small>
</small></address>
</td>
</tr>
</table>
</body>
</html>
