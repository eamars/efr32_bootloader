<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>EmberZNet API Reference: For the EM35x SoC Platform</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
</head>
<body>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td><img src="SiliconLabsLogo_Black.jpg" style="padding: 10px;width:40%;height:40%;" /></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">EmberZNet API Reference: For the EM35x SoC Platform
   &#160;<span id="projectnumber">EmberZNet 5.9.2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.2 -->
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__network__formation.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Network Formation</div>  </div>
<div class="ingroups"><a class="el" href="group__ember.htm">EmberZNet Stack API Reference</a></div></div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga988e7038cd4c1bfac8a5c17e58c1da69"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#ga988e7038cd4c1bfac8a5c17e58c1da69">emberInit</a> (void)</td></tr>
<tr class="separator:ga988e7038cd4c1bfac8a5c17e58c1da69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaf3d7cad7b0f03d28eea981561db64d8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#gaaf3d7cad7b0f03d28eea981561db64d8">emberTick</a> (void)</td></tr>
<tr class="separator:gaaf3d7cad7b0f03d28eea981561db64d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga47f3cf943b5e9890fa016d871943c705"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#ga47f3cf943b5e9890fa016d871943c705">emberNetworkInit</a> (void)</td></tr>
<tr class="separator:ga47f3cf943b5e9890fa016d871943c705"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga90f56aba882e387816144e1e21aad1de"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#ga90f56aba882e387816144e1e21aad1de">emberNetworkInitExtended</a> (<a class="el" href="structEmberNetworkInitStruct.htm">EmberNetworkInitStruct</a> *networkInitStruct)</td></tr>
<tr class="separator:ga90f56aba882e387816144e1e21aad1de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf3465df55d552f0c751f338c7c57fc03"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#gaf3465df55d552f0c751f338c7c57fc03">emberFormNetwork</a> (<a class="el" href="structEmberNetworkParameters.htm">EmberNetworkParameters</a> *parameters)</td></tr>
<tr class="separator:gaf3465df55d552f0c751f338c7c57fc03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa92704e81f6767f4c389b07c075e58b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#gaa92704e81f6767f4c389b07c075e58b7">emberPermitJoining</a> (uint8_t duration)</td></tr>
<tr class="separator:gaa92704e81f6767f4c389b07c075e58b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa87bbe048e8e1c8adeb89c9962305f96"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#gaa87bbe048e8e1c8adeb89c9962305f96">emberJoinNetwork</a> (<a class="el" href="group__ember__types.htm#ga32518ff17fd5b898204c3e131077a1ac">EmberNodeType</a> nodeType, <a class="el" href="structEmberNetworkParameters.htm">EmberNetworkParameters</a> *parameters)</td></tr>
<tr class="separator:gaa87bbe048e8e1c8adeb89c9962305f96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf98709947a7228bd18aa980e67ddd1e4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#gaf98709947a7228bd18aa980e67ddd1e4">emberLeaveNetwork</a> (void)</td></tr>
<tr class="separator:gaf98709947a7228bd18aa980e67ddd1e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga29ce6555f07e0df728529400a66851fb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#ga29ce6555f07e0df728529400a66851fb">emberSendZigbeeLeave</a> (<a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a> destination, <a class="el" href="group__ember__types.htm#ga5be13a9999d8301d5cf4424997f62955">EmberLeaveRequestFlags</a> flags)</td></tr>
<tr class="separator:ga29ce6555f07e0df728529400a66851fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga68924e9e55495468439a26ed2dd78308"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#ga68924e9e55495468439a26ed2dd78308">emberFindAndRejoinNetworkWithReason</a> (bool haveCurrentNetworkKey, uint32_t channelMask, <a class="el" href="group__ember__types.htm#ga73d09f0bedcc6b567ddc65b405cbd7e1">EmberRejoinReason</a> reason)</td></tr>
<tr class="separator:ga68924e9e55495468439a26ed2dd78308"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4c47d3185cdae49ad720b5ad8a0ff3ca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#ga4c47d3185cdae49ad720b5ad8a0ff3ca">emberFindAndRejoinNetwork</a> (bool haveCurrentNetworkKey, uint32_t channelMask)</td></tr>
<tr class="separator:ga4c47d3185cdae49ad720b5ad8a0ff3ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab95a0612442d676ba4c74baa1ff20fa3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#gab95a0612442d676ba4c74baa1ff20fa3">emberFindAndRejoinNetworkWithNodeType</a> (bool haveCurrentNetworkKey, uint32_t channelMask, <a class="el" href="group__ember__types.htm#ga32518ff17fd5b898204c3e131077a1ac">EmberNodeType</a> nodeType)</td></tr>
<tr class="separator:gab95a0612442d676ba4c74baa1ff20fa3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5f78b15af49de79bb9e0f2cee0c4bd7e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#ga73d09f0bedcc6b567ddc65b405cbd7e1">EmberRejoinReason</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#ga5f78b15af49de79bb9e0f2cee0c4bd7e">emberGetLastRejoinReason</a> (void)</td></tr>
<tr class="separator:ga5f78b15af49de79bb9e0f2cee0c4bd7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa1b24b009c1e0f6cd9bd2cbed09ae6de"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#gaa1b24b009c1e0f6cd9bd2cbed09ae6de">emberRejoinNetwork</a> (bool haveCurrentNetworkKey)</td></tr>
<tr class="separator:gaa1b24b009c1e0f6cd9bd2cbed09ae6de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga37f582e89c899451224eb0055b3f8543"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#ga37f582e89c899451224eb0055b3f8543">emberStartScan</a> (<a class="el" href="group__ember__types.htm#gadccc961b628c584381f05b0ddad80e1b">EmberNetworkScanType</a> scanType, uint32_t channelMask, uint8_t duration)</td></tr>
<tr class="separator:ga37f582e89c899451224eb0055b3f8543"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga24592e7434ec1d6fec1483b07e19489e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#ga24592e7434ec1d6fec1483b07e19489e">emberStopScan</a> (void)</td></tr>
<tr class="separator:ga24592e7434ec1d6fec1483b07e19489e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf91e84c0a8714a6eb854fb01df145e84"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#gaf91e84c0a8714a6eb854fb01df145e84">emberScanCompleteHandler</a> (uint8_t channel, <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> status)</td></tr>
<tr class="separator:gaf91e84c0a8714a6eb854fb01df145e84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga285706805ac0e9be1c8e0ebc238a7e7b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#ga285706805ac0e9be1c8e0ebc238a7e7b">emberEnergyScanResultHandler</a> (uint8_t channel, int8_t maxRssiValue)</td></tr>
<tr class="separator:ga285706805ac0e9be1c8e0ebc238a7e7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf73a2682fa453a77a9aa2bc8df13dde9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#gaf73a2682fa453a77a9aa2bc8df13dde9">emberNetworkFoundHandler</a> (<a class="el" href="structEmberZigbeeNetwork.htm">EmberZigbeeNetwork</a> *networkFound)</td></tr>
<tr class="separator:gaf73a2682fa453a77a9aa2bc8df13dde9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf4b73159fe540f2fb9d1e84de53a2f05"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#gaf4b73159fe540f2fb9d1e84de53a2f05">emberStackIsPerformingRejoin</a> (void)</td></tr>
<tr class="separator:gaf4b73159fe540f2fb9d1e84de53a2f05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae9682e14873553f8d42e534596cb7899"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#ga0f7ef1b38917e906065d2943df0194b4">EmberLeaveReason</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#gae9682e14873553f8d42e534596cb7899">emberGetLastLeaveReason</a> (<a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a> *returnNodeIdThatSentLeave)</td></tr>
<tr class="separator:gae9682e14873553f8d42e534596cb7899"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8746237e402e3b78321ed46e2681281f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__network__formation.htm#ga8746237e402e3b78321ed46e2681281f">emberGetPermitJoining</a> (void)</td></tr>
<tr class="separator:ga8746237e402e3b78321ed46e2681281f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>EmberZNet API for finding, forming, joining, and leaving ZigBee networks. </p>
<p>See <a class="el" href="network-formation_8h.htm">network-formation.h</a> for source code. </p>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga988e7038cd4c1bfac8a5c17e58c1da69"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberInit </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes the radio and the EmberZNet stack. ) </p>
<p>Device configuration functions must be called before <a class="el" href="group__network__formation.htm#ga988e7038cd4c1bfac8a5c17e58c1da69" title="Initializes the radio and the EmberZNet stack. )">emberInit()</a> is called.</p>
<dl class="section note"><dt>Note</dt><dd>The application must check the return value of this function. If the initialization fails, normal messaging functions will not be available. Some failure modes are not fatal, but the application must follow certain procedures to permit recovery. Ignoring the return code will result in unpredictable radio and API behavior. (In particular, problems with association will occur.)</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating successful initialization or the reason for failure. </dd></dl>

</div>
</div>
<a class="anchor" id="gaaf3d7cad7b0f03d28eea981561db64d8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberTick </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A periodic tick routine that should be called: </p>
<ul>
<li>in the application's main event loop,</li>
<li>as soon as possible after any radio interrupts, and</li>
<li>after <a class="el" href="group__network__formation.htm#ga988e7038cd4c1bfac8a5c17e58c1da69" title="Initializes the radio and the EmberZNet stack. )">emberInit()</a>. </li>
</ul>

</div>
</div>
<a class="anchor" id="ga47f3cf943b5e9890fa016d871943c705"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberNetworkInit </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Resume network operation after a reboot. </p>
<p>It is required that this be called on boot prior to ANY network operations. This will initialize the networking system and attempt to resume the previous network identity and configuration. If the node was not previously this routine should still be called.</p>
<p>If the node was previously joined to a network it will retain its original type (e.g. coordinator, router, end device, etc.)</p>
<p><a class="el" href="group__status__codes.htm#gaf57eb51e5e4bbe3c83d9eb89c412806a" title="The node has not joined a network.">EMBER_NOT_JOINED</a> is returned if the node is not part of a network.</p>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value that indicates one of the following:<ul>
<li>successful initialization,</li>
<li><a class="el" href="group__status__codes.htm#gaf57eb51e5e4bbe3c83d9eb89c412806a" title="The node has not joined a network.">EMBER_NOT_JOINED</a> if the node is not part of a network, or</li>
<li>the reason for failure. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga90f56aba882e387816144e1e21aad1de"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberNetworkInitExtended </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberNetworkInitStruct.htm">EmberNetworkInitStruct</a> *&#160;</td>
          <td class="paramname"><em>networkInitStruct</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Resume network operation based on passed parameters. </p>
<p>This routine behaves similar to <a class="el" href="group__network__formation.htm#ga47f3cf943b5e9890fa016d871943c705" title="Resume network operation after a reboot.">emberNetworkInit()</a> however the caller can control the operation of the initialization. Either this routine or <a class="el" href="group__network__formation.htm#ga47f3cf943b5e9890fa016d871943c705" title="Resume network operation after a reboot.">emberNetworkInit()</a> must be called to initialize the network before any network operations are performed. </p>

</div>
</div>
<a class="anchor" id="gaf3465df55d552f0c751f338c7c57fc03"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberFormNetwork </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberNetworkParameters.htm">EmberNetworkParameters</a> *&#160;</td>
          <td class="paramname"><em>parameters</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Forms a new network by becoming the coordinator. </p>
<dl class="section note"><dt>Note</dt><dd>If using security, the application must call <a class="el" href="group__security.htm#ga124d62dd7d3d15d2fcffae92c5bcdda6" title="This function sets the initial security state that will be used by the device when it forms or joins ...">emberSetInitialSecurityState()</a> prior to joining the network. This also applies when a device leaves a network and wants to form another one.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">parameters</td><td>Specification of the new network.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value that indicates either the successful formation of the new network, or the reason that the network formation failed. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa92704e81f6767f4c389b07c075e58b7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberPermitJoining </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>duration</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tells the stack to allow other nodes to join the network with this node as their parent. Joining is initially disabled by default. This function may only be called after the node is part of a network and the stack is up. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">duration</td><td>A value of 0x00 disables joining. A value of 0xFF enables joining. Any other value enables joining for that number of seconds. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaa87bbe048e8e1c8adeb89c9962305f96"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberJoinNetwork </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga32518ff17fd5b898204c3e131077a1ac">EmberNodeType</a>&#160;</td>
          <td class="paramname"><em>nodeType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberNetworkParameters.htm">EmberNetworkParameters</a> *&#160;</td>
          <td class="paramname"><em>parameters</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Causes the stack to associate with the network using the specified network parameters. It can take several seconds for the stack to associate with the local network. Do not send messages until a call to the <a class="el" href="group__stack__info.htm#gaac4a45063264fe1b8de41b02f6c3570f" title="A callback invoked when the status of the stack changes. If the status parameter equals EMBER_NETWORK...">emberStackStatusHandler()</a> callback informs you that the stack is up. </p>
<dl class="section note"><dt>Note</dt><dd>If using security, the application must call <a class="el" href="group__security.htm#ga124d62dd7d3d15d2fcffae92c5bcdda6" title="This function sets the initial security state that will be used by the device when it forms or joins ...">emberSetInitialSecurityState()</a> prior to joining the network. This also applies when a device leaves a network and wants to join another one.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">nodeType</td><td>Specification of the role that this node will have in the network. This role must not be <a class="el" href="group__ember__types.htm#gga32518ff17fd5b898204c3e131077a1acae75df17542306f3b21ceb51444d49441">EMBER_COORDINATOR</a>. To be a coordinator, call <a class="el" href="group__network__formation.htm#gaf3465df55d552f0c751f338c7c57fc03" title="Forms a new network by becoming the coordinator.">emberFormNetwork()</a>.</td></tr>
    <tr><td class="paramname">parameters</td><td>Specification of the network with which the node should associate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value that indicates either:<ul>
<li>that the association process began successfully, or</li>
<li>the reason for failure. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gaf98709947a7228bd18aa980e67ddd1e4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberLeaveNetwork </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Causes the stack to leave the current network. This generates a call to the <a class="el" href="group__stack__info.htm#gaac4a45063264fe1b8de41b02f6c3570f" title="A callback invoked when the status of the stack changes. If the status parameter equals EMBER_NETWORK...">emberStackStatusHandler()</a> callback to indicate that the network is down. The radio will not be used until after a later call to <a class="el" href="group__network__formation.htm#gaf3465df55d552f0c751f338c7c57fc03" title="Forms a new network by becoming the coordinator.">emberFormNetwork()</a> or <a class="el" href="group__network__formation.htm#gaa87bbe048e8e1c8adeb89c9962305f96" title="Causes the stack to associate with the network using the specified network parameters. It can take several seconds for the stack to associate with the local network. Do not send messages until a call to the emberStackStatusHandler() callback informs you that the stack is up.">emberJoinNetwork()</a>. </p>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating success or reason for failure. A status of <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> indicates that the node is either not joined to a network or is already in the process of leaving. </dd></dl>

</div>
</div>
<a class="anchor" id="ga29ce6555f07e0df728529400a66851fb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSendZigbeeLeave </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a>&#160;</td>
          <td class="paramname"><em>destination</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga5be13a9999d8301d5cf4424997f62955">EmberLeaveRequestFlags</a>&#160;</td>
          <td class="paramname"><em>flags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sends a ZigBee NWK leave command to the specified destination. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">destination</td><td>is the node Id of the device that is being told to leave.</td></tr>
    <tr><td class="paramname">flags</td><td>is an bitmask indicating additional considerations for the leave request. See the <a class="el" href="group__ember__types.htm#ga5be13a9999d8301d5cf4424997f62955" title="EmberReleaseTypeStruct Data that relates release type to the correct string.">EmberLeaveRequestFlags</a> enum for more information. Multiple bits may be set.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating success or reason for failure. A status of <a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> indicates that the node not currently joined to the network, or the destination is the local node. To tell the local device to leave, use the <a class="el" href="group__network__formation.htm#gaf98709947a7228bd18aa980e67ddd1e4" title="Causes the stack to leave the current network. This generates a call to the emberStackStatusHandler()...">emberLeaveNetwork()</a> API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga68924e9e55495468439a26ed2dd78308"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberFindAndRejoinNetworkWithReason </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>haveCurrentNetworkKey</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>channelMask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga73d09f0bedcc6b567ddc65b405cbd7e1">EmberRejoinReason</a>&#160;</td>
          <td class="paramname"><em>reason</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The application may call this function when contact with the network has been lost. The most common usage case is when an end device can no longer communicate with its parent and wishes to find a new one. Another case is when a device has missed a Network Key update and no longer has the current Network Key. </p>
<p>Note that a call to <a class="el" href="group__child.htm#gad2bd44c5fc834bc2a1864d95cc2e67bf" title="Function to request any pending data from the parent node. This function allows an end device to quer...">emberPollForData()</a> on an end device that has lost contact with its parent will automatically call ::emberRejoinNetwork(true).</p>
<p>The stack will call <a class="el" href="group__stack__info.htm#gaac4a45063264fe1b8de41b02f6c3570f" title="A callback invoked when the status of the stack changes. If the status parameter equals EMBER_NETWORK...">emberStackStatusHandler()</a> to indicate that the network is down, then try to re-establish contact with the network by performing an active scan, choosing a network with matching extended pan id, and sending a ZigBee network rejoin request. A second call to the <a class="el" href="group__stack__info.htm#gaac4a45063264fe1b8de41b02f6c3570f" title="A callback invoked when the status of the stack changes. If the status parameter equals EMBER_NETWORK...">emberStackStatusHandler()</a> callback indicates either the success or the failure of the attempt. The process takes approximately 150 milliseconds per channel to complete.</p>
<p>This call replaces the ::emberMobileNodeHasMoved() API from EmberZNet 2.x, which used MAC association and consequently took half a second longer to complete.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">haveCurrentNetworkKey</td><td>This parameter determines whether the request to rejoin the Network is sent encrypted (true) or unencrypted (false). The application should first try to use encryption. If that fails, the application should call this function again and use no encryption. If the unencrypted rejoin is successful then device will be in the joined but unauthenticated state. The Trust Center will be notified of the rejoin and send an updated Network encrypted using the device's Link Key. Sending the rejoin unencrypted is only supported on networks using Standard Security with link keys (i.e. ZigBee 2006 networks do not support it).</td></tr>
    <tr><td class="paramname">channelMask</td><td>A mask indicating the channels to be scanned. See <a class="el" href="group__network__formation.htm#ga37f582e89c899451224eb0055b3f8543" title="This function will start a scan. EMBER_SUCCESS signals that the scan successfully started...">emberStartScan()</a> for format details.</td></tr>
    <tr><td class="paramname">reason</td><td>An enemuration indicating why the rejoin occurred. The stack will set the reason based on the <a class="el" href="group__ember__types.htm#ga73d09f0bedcc6b567ddc65b405cbd7e1" title="Notes the last rejoin reason.">EmberRejoinReason</a>. An application should use one of the APP_EVENT rejoin reasons. The stack will never use these. Only if the function return code is EMBER_SUCCESS will the rejoin reason be set.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value indicating success or reason for failure. </dd></dl>

</div>
</div>
<a class="anchor" id="ga4c47d3185cdae49ad720b5ad8a0ff3ca"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberFindAndRejoinNetwork </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>haveCurrentNetworkKey</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>channelMask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call is the same <a class="el" href="group__network__formation.htm#ga68924e9e55495468439a26ed2dd78308" title="The application may call this function when contact with the network has been lost. The most common usage case is when an end device can no longer communicate with its parent and wishes to find a new one. Another case is when a device has missed a Network Key update and no longer has the current Network Key.">emberFindAndRejoinNetworkWithReason()</a> however the reason is assumed to be ::EMBER_REJOIN_REASON_APP_EVENT_1. </p>

</div>
</div>
<a class="anchor" id="gab95a0612442d676ba4c74baa1ff20fa3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberFindAndRejoinNetworkWithNodeType </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>haveCurrentNetworkKey</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>channelMask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga32518ff17fd5b898204c3e131077a1ac">EmberNodeType</a>&#160;</td>
          <td class="paramname"><em>nodeType</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This call attempts to rejoin the network with a different device type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">haveCurrentNetworkKey</td><td>This parameter determines whether the request to rejoin the Network is sent encrypted (true) or unencrypted (false). The application should first try to use encryption. If that fails, the application should call this function again and use no encryption. If the unencrypted rejoin is successful then device will be in the joined but unauthenticated state. The Trust Center will be notified of the rejoin and send an updated Network encrypted using the device's Link Key. Sending the rejoin unencrypted is only supported on networks using Standard Security with link keys (i.e. ZigBee 2006 networks do not support it).</td></tr>
    <tr><td class="paramname">channelMask</td><td>A mask indicating the channels to be scanned. See <a class="el" href="group__network__formation.htm#ga37f582e89c899451224eb0055b3f8543" title="This function will start a scan. EMBER_SUCCESS signals that the scan successfully started...">emberStartScan()</a> for format details.</td></tr>
    <tr><td class="paramname">nodeType</td><td>An enumeration indicating the device type to rejoin as.The stack only accepts <a class="el" href="group__ember__types.htm#gga32518ff17fd5b898204c3e131077a1aca72f42a3b742eb2c416b6f4d832169713">EMBER_END_DEVICE</a> and <a class="el" href="group__ember__types.htm#gga32518ff17fd5b898204c3e131077a1aca90e6ac7d448453a733071bc017e761de">EMBER_SLEEPY_END_DEVICE</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga5f78b15af49de79bb9e0f2cee0c4bd7e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#ga73d09f0bedcc6b567ddc65b405cbd7e1">EmberRejoinReason</a> emberGetLastRejoinReason </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the enumeration for why a rejoin previously occurred.. </p>

</div>
</div>
<a class="anchor" id="gaa1b24b009c1e0f6cd9bd2cbed09ae6de"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberRejoinNetwork </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>haveCurrentNetworkKey</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A convenience function which calls <a class="el" href="group__network__formation.htm#ga4c47d3185cdae49ad720b5ad8a0ff3ca" title="This call is the same emberFindAndRejoinNetworkWithReason() however the reason is assumed to be ::EMB...">emberFindAndRejoinNetwork()</a> with a channel mask value for scanning only the current channel. Included for back-compatibility. </p>

</div>
</div>
<a class="anchor" id="ga37f582e89c899451224eb0055b3f8543"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberStartScan </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gadccc961b628c584381f05b0ddad80e1b">EmberNetworkScanType</a>&#160;</td>
          <td class="paramname"><em>scanType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>channelMask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>duration</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function will start a scan. <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> signals that the scan successfully started. Note that while a scan can be initiated while the node is currently joined to a network, the node will generally be unable to communication with its PAN during the scan period, so care should be taken when performing scans of any significant duration while presently joined to an existing PAN. </p>
<p>Possible error responses and their meanings:</p>
<ul>
<li><a class="el" href="group__status__codes.htm#ga98020573a58567e05175edee487d7488" title="The MAC can&#39;t complete this task because it is scanning.">EMBER_MAC_SCANNING</a>, we are already scanning.</li>
<li><a class="el" href="group__status__codes.htm#ga25d75e8a622fc9afe3c1e5dc1029d400" title="Scan duration must be 0 to 14 inclusive. Attempt was made to scan with an incorrect duration value...">EMBER_MAC_BAD_SCAN_DURATION</a>, we have set a duration value that is not 0..14 inclusive.</li>
<li><a class="el" href="group__status__codes.htm#ga0f5418ffd4c917153bd522b055ce552f" title="emberStartScan was called with an incorrect scan type.">EMBER_MAC_INCORRECT_SCAN_TYPE</a>, we have requested an undefined scanning type;</li>
<li><a class="el" href="group__status__codes.htm#gaae52d4572e68ff0d2cba6be9f5891df6" title="emberStartScan was called with an invalid channel mask.">EMBER_MAC_INVALID_CHANNEL_MASK</a>, our channel mask did not specify any valid channels on the current platform.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scanType</td><td>Indicates the type of scan to be performed. Possible values: <a class="el" href="group__ember__types.htm#ggadccc961b628c584381f05b0ddad80e1ba5c6498239284647ab60ff05dac461d84">EMBER_ENERGY_SCAN</a>, <a class="el" href="group__ember__types.htm#ggadccc961b628c584381f05b0ddad80e1ba9a92cfc46411db30a4547e64ff814b36">EMBER_ACTIVE_SCAN</a>.</td></tr>
    <tr><td class="paramname">channelMask</td><td>Bits set as 1 indicate that this particular channel should be scanned. Bits set to 0 indicate that this particular channel should not be scanned. For example, a channelMask value of 0x00000001 would indicate that only channel 0 should be scanned. Valid channels range from 11 to 26 inclusive. This translates to a channel mask value of 0x07 FF F8 00. As a convenience, a channelMask of 0 is reinterpreted as the mask for the current channel.</td></tr>
    <tr><td class="paramname">duration</td><td>Sets the exponent of the number of scan periods, where a scan period is 960 symbols, and a symbol is 16 microseconds. The scan will occur for ((2^duration) + 1) scan periods. The value of duration must be less than 15. The time corresponding to the first few values are as follows: 0 = 31 msec, 1 = 46 msec, 2 = 77 msec, 3 = 138 msec, 4 = 261 msec, 5 = 507 msec, 6 = 998 msec. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga24592e7434ec1d6fec1483b07e19489e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberStopScan </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Terminates a scan in progress. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if successful. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf91e84c0a8714a6eb854fb01df145e84"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberScanCompleteHandler </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td>
          <td class="paramname"><em>status</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Indicates the status of the current scan. When the scan has completed the stack will call this function with status set to <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a>. Prior to the scan completing the stack may call this function with other status values. Non-EMBER_SUCCESS status values indicate that the scan failed to start successfully on the channel indicated by the channel parameter. The current scan is ongoing until the stack calls this function with status set to <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channel</td><td>The channel on which the current error occurred. Undefined for the case of <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a>.</td></tr>
    <tr><td class="paramname">status</td><td>The error condition that occurred on the current channel. Value will be <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> when the scan has completed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga285706805ac0e9be1c8e0ebc238a7e7b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberEnergyScanResultHandler </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t&#160;</td>
          <td class="paramname"><em>maxRssiValue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reports the maximum RSSI value measured on the channel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channel</td><td>The 802.15.4 channel number on which the RSSI value was measured.</td></tr>
    <tr><td class="paramname">maxRssiValue</td><td>The maximum RSSI value measured (in units of dBm). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaf73a2682fa453a77a9aa2bc8df13dde9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberNetworkFoundHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberZigbeeNetwork.htm">EmberZigbeeNetwork</a> *&#160;</td>
          <td class="paramname"><em>networkFound</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reports that a network was found, and gives the network parameters useful for deciding which network to join. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">networkFound</td><td>A pointer to a <a class="el" href="structEmberZigbeeNetwork.htm" title="Defines a ZigBee network and the associated parameters.">EmberZigbeeNetwork</a> structure that contains the discovered network and its associated parameters. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaf4b73159fe540f2fb9d1e84de53a2f05"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberStackIsPerformingRejoin </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Indicates whether the stack is in the process of performing a rejoin. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns true if the device is in the process of performing a rejoin. Returns false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="gae9682e14873553f8d42e534596cb7899"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#ga0f7ef1b38917e906065d2943df0194b4">EmberLeaveReason</a> emberGetLastLeaveReason </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga432acdaed32cc9f75e60d8610bab52ce">EmberNodeId</a> *&#160;</td>
          <td class="paramname"><em>returnNodeIdThatSentLeave</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Indicates the reason why the device left the network (if any). This also will return the device that sent the leave message, if the leave was due to an over-the-air message. </p>
<p>If returnNodeIdThatSentLeave is a non-NULL pointer, then the node Id of the device that sent the leave message will be written to the value pointed to be the pointer. If the leave was not due to an over-the-air message (but an internal API call instead) then EMBER_UNKNOWN_NODE_ID is returned.</p>
<dl class="section return"><dt>Returns</dt><dd>Returns EmberLeaveReason enumeration, or EMBER_LEAVE_REASON_NONE if the device has not left the network. </dd></dl>

</div>
</div>
<a class="anchor" id="ga8746237e402e3b78321ed46e2681281f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberGetPermitJoining </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Indicates the state of the permit joining in the MAC. </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<hr size="1">
<table border="0" cellspacing="0" cellpadding="0" width=100%>
<tr>
<td><address><small>
EmberZNet API Reference: For the EM35x SoC Platform. EmberZNet 5.9.2.0.
</small></address>
</td>
<td align="right">
<address><small>
</small></address>
</td>
</tr>
</table>
</body>
</html>
