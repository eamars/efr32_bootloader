#ifndef gecko_bgapi_h
#define gecko_bgapi_h

/*****************************************************************************
 *
 *
 *  !!!!!!!!  THIS IS AUTOGENERATED FILE, DO NOT EDIT !!!!!!!!
 *
 *
 ****************************************************************************/
#include <stdarg.h>
#include "bg_types.h"
#ifdef __cplusplus
extern "C" {
#endif

/* Compability */
#ifndef PACKSTRUCT
/*Default packed configuration*/
#ifdef __GNUC__
#ifdef _WIN32
#define PACKSTRUCT( decl ) decl __attribute__((__packed__,gcc_struct))
#else
#define PACKSTRUCT( decl ) decl __attribute__((__packed__))
#endif
#define ALIGNED __attribute__((aligned(0x4)))
#elif __IAR_SYSTEMS_ICC__

#define PACKSTRUCT( decl ) __packed decl

#define ALIGNED
#elif _MSC_VER  //msvc

#define PACKSTRUCT( decl ) __pragma( pack(push, 1) ) decl __pragma( pack(pop) )
#define ALIGNED
#else 
#define PACKSTRUCT(a) a PACKED 
#endif
#endif


#define BGLIB_MSG_ID(HDR) ((HDR)&0xffff00f8)
#define BGLIB_MSG_HEADER_LEN (4)
#define BGLIB_MSG_LEN(HDR) ((((HDR)&0x7)<<8)|(((HDR)&0xff00)>>8))

void bglib_output(uint8 len1,uint8* data1,uint16 len2,uint8* data2, uint8 type2);

struct gecko_cmd_packet;

struct gecko_header
{
    uint8  type_hilen;
    uint8  lolen;
    uint8  cls;
    uint8  command;
};
#define	gecko_MSG_HDR_MASK                                             0xFFFF00F8
#define	gecko_cmd_dfu_reset_id                                         0x00000020
#define	gecko_cmd_dfu_flash_set_address_id                             0x01000020
#define	gecko_cmd_dfu_flash_upload_id                                  0x02000020
#define	gecko_cmd_dfu_flash_upload_finish_id                           0x03000020
#define	gecko_rsp_dfu_reset_id                                         0x00000020
#define	gecko_rsp_dfu_flash_set_address_id                             0x01000020
#define	gecko_rsp_dfu_flash_upload_id                                  0x02000020
#define	gecko_rsp_dfu_flash_upload_finish_id                           0x03000020
#define	gecko_evt_dfu_boot_id                                          0x000000a0
#define	gecko_evt_dfu_boot_failure_id                                  0x010000a0
#include "bg_errorcodes.h"
PACKSTRUCT(struct gecko_msg_dfu_reset_cmd_t
{
	uint8	dfu;
});

PACKSTRUCT(struct gecko_msg_dfu_flash_set_address_cmd_t
{
	uint32	address;
});

PACKSTRUCT(struct gecko_msg_dfu_flash_set_address_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct gecko_msg_dfu_flash_upload_cmd_t
{
	uint8array	data;
});

PACKSTRUCT(struct gecko_msg_dfu_flash_upload_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct gecko_msg_dfu_flash_upload_finish_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct gecko_msg_dfu_boot_evt_t
{
	uint32	version;
});

PACKSTRUCT(struct gecko_msg_dfu_boot_failure_evt_t
{
	uint16	reason;
});

PACKSTRUCT(
struct gecko_cmd_packet
{
	struct gecko_header header;

union{
	uint8 handle;

	uint8 payload;

	struct gecko_msg_dfu_reset_cmd_t dfu_reset_cmd;

	struct gecko_msg_dfu_flash_set_address_cmd_t dfu_flash_set_address_cmd;

	struct gecko_msg_dfu_flash_set_address_rsp_t dfu_flash_set_address_rsp;

	struct gecko_msg_dfu_flash_upload_cmd_t dfu_flash_upload_cmd;

	struct gecko_msg_dfu_flash_upload_rsp_t dfu_flash_upload_rsp;

	struct gecko_msg_dfu_flash_upload_finish_rsp_t dfu_flash_upload_finish_rsp;

	struct gecko_msg_dfu_boot_evt_t dfu_boot_evt;

	struct gecko_msg_dfu_boot_failure_evt_t dfu_boot_failure_evt;

});

}ALIGNED;
/**After re-booting the local device into DFU mode, this command can be used to define the starting address on the flash to where the new firmware will be written in.**/
#define gecko_rsp_dfu_flash_set_address(_result) \
{\
struct gecko_cmd_packet	MSG;\
MSG.header.type_hilen=0x20;\
MSG.header.lolen=sizeof(struct gecko_msg_dfu_flash_set_address_rsp_t);\
MSG.header.cls=0;\
MSG.header.command=1;\
MSG.dfu_flash_set_address_rsp.result=_result;\
bglib_output(sizeof(struct gecko_header)+MSG.header.lolen,(uint8*)&MSG,0,0,1);\
}
/**This command can be used to upload the whole firmware image file in to the Bluetooth device. The recommended payload size of the command is 128 bytes, so multiple commands need to be issued one after the other until the whole .bin firmware image file is uploaded to the device. The next address of the flash sector in memory to write to is automatically updated by the bootloader after each individual command.**/
#define gecko_rsp_dfu_flash_upload(_result) \
{\
struct gecko_cmd_packet	MSG;\
MSG.header.type_hilen=0x20;\
MSG.header.lolen=sizeof(struct gecko_msg_dfu_flash_upload_rsp_t);\
MSG.header.cls=0;\
MSG.header.command=2;\
MSG.dfu_flash_upload_rsp.result=_result;\
bglib_output(sizeof(struct gecko_header)+MSG.header.lolen,(uint8*)&MSG,0,0,1);\
}
/**This command can be used to tell to the device that the DFU file has been fully uploaded. To return the device back to normal mode the command {a href="#cmd_dfu_reset"}DFU Reset {/a} must be issued next.**/
#define gecko_rsp_dfu_flash_upload_finish(_result) \
{\
struct gecko_cmd_packet	MSG;\
MSG.header.type_hilen=0x20;\
MSG.header.lolen=sizeof(struct gecko_msg_dfu_flash_upload_finish_rsp_t);\
MSG.header.cls=0;\
MSG.header.command=3;\
MSG.dfu_flash_upload_finish_rsp.result=_result;\
bglib_output(sizeof(struct gecko_header)+MSG.header.lolen,(uint8*)&MSG,0,0,1);\
}
/**This event indicates that the device booted into DFU mode, and is now ready to receive commands related to device firmware upgade (DFU).**/
#define gecko_evt_dfu_boot(_version) \
{\
struct gecko_cmd_packet	MSG;\
MSG.header.type_hilen=0xa0;\
MSG.header.lolen=sizeof(struct gecko_msg_dfu_boot_evt_t);\
MSG.header.cls=0;\
MSG.header.command=0;\
MSG.dfu_boot_evt.version=_version;\
bglib_output(sizeof(struct gecko_header)+MSG.header.lolen,(uint8*)&MSG,0,0,1);\
}
/**This event indicates that there has been error in bootloader, which prevents the device from booting.**/
#define gecko_evt_dfu_boot_failure(_reason) \
{\
struct gecko_cmd_packet	MSG;\
MSG.header.type_hilen=0xa0;\
MSG.header.lolen=sizeof(struct gecko_msg_dfu_boot_failure_evt_t);\
MSG.header.cls=0;\
MSG.header.command=1;\
MSG.dfu_boot_failure_evt.reason=_reason;\
bglib_output(sizeof(struct gecko_header)+MSG.header.lolen,(uint8*)&MSG,0,0,1);\
}
#endif
