#ISD afv6
# ISD version: 4.12.0.qualifier

# Application configuration
appId: thread
architecture: em3588
deviceName: client-sleepy
generationDirectory: PATH(ISC_RELATIVE):.

# Devices
device: EM3xx
device: SoC
device: Sleepy End Device

# Plugin configuration
appPlugin: accelerometer-led=false
appPlugin: adc=true
appPlugin: address-configuration-debug=true
appPlugin: antenna=false
appPlugin: antenna-stub=true
appPlugin: ash-v3=false
appPlugin: ash-v3-stub=false
appPlugin: basic-server=false
appPlugin: battery-monitor=false
appPlugin: bootload-cli=false
appPlugin: bulb-pwm-driver=false
appPlugin: bulb-ui=false
appPlugin: button=true
appPlugin: button-interface=false
appPlugin: button-press=false
appPlugin: button-stub=false
appPlugin: buzzer=true
appPlugin: buzzer-stub=false
appPlugin: cjson=false
appPlugin: cli=true
appPlugin: coap-cli=true
appPlugin: coap-debug=false
appPlugin: coap-dispatch=true
appPlugin: coexistence=false
appPlugin: color-control-server=false
appPlugin: command-interpreter2=true
appPlugin: debug-print=true
appPlugin: dhcp-client=true
appPlugin: dhcp-library=true
appPlugin: dhcp-stub-library=false
appPlugin: diagnostic=true
appPlugin: diagnostic-stub=false
appPlugin: end-node-ui=false
appPlugin: ext-device=false
appPlugin: fem-control=false
appPlugin: generic-interrupt-control=false
appPlugin: glib=false
appPlugin: global-address-prefix-debug=true
appPlugin: gpio-sensor=false
appPlugin: groups-server=false
appPlugin: hal-library=true
appPlugin: hal-ncp-library=false
appPlugin: heartbeat=true
appPlugin: heartbeat-node-type=false
appPlugin: host-network-management=false
appPlugin: host-network-management-stub=false
appPlugin: humidity-si7021-stub=false
appPlugin: i2c-driver=false
appPlugin: i2c-driver-stub=false
appPlugin: icmp-cli=true
appPlugin: icmp-debug=true
appPlugin: identify-server=false
appPlugin: idle-sleep=true
appPlugin: illuminance-measurement-server=false
appPlugin: illuminance-si1141-stub=false
appPlugin: infrared-led=false
appPlugin: key-matrix=false
appPlugin: led=true
appPlugin: led-blink=false
appPlugin: led-dim-pwm=false
appPlugin: led-rgb-pwm=false
appPlugin: led-stub=false
appPlugin: led-temp-pwm=false
appPlugin: level-control-server=false
appPlugin: linked-list=false
appPlugin: log-cli=false
appPlugin: main=true
appPlugin: mbedtls-library=true
appPlugin: mfglib-library=true
appPlugin: mfglib-stub-library=false
appPlugin: microphone-codec-msadpcm=false
appPlugin: microphone-imaadpcm=false
appPlugin: mpsi=false
appPlugin: mpsi-ipc=false
appPlugin: mpsi-storage=false
appPlugin: ncp-library=false
appPlugin: ncp-spi-link=false
appPlugin: ncp-uart-link=false
appPlugin: network-management-cli=true
appPlugin: occupancy-pyd1698=false
appPlugin: occupancy-pyd1698-stub=false
appPlugin: occupancy-sensing-server=false
appPlugin: on-off-server=false
appPlugin: paho.mqtt.c=false
appPlugin: poll-control-client=false
appPlugin: poll-control-server=false
appPlugin: polling=true
appPlugin: power-configuration-server=false
appPlugin: psstore=false
appPlugin: rail-library=true
appPlugin: relative-humidity-measurement-server=false
appPlugin: sb1-gesture-sensor=false
appPlugin: scan-debug=true
appPlugin: serial=true
appPlugin: sim-eeprom1=true
appPlugin: sim-eeprom2=false
appPlugin: sim-eeprom2-1to2-upgrade=false
appPlugin: sim-eeprom2-1to2-upgrade-stub=false
appPlugin: slaac-client=true
appPlugin: slot-manager=false
appPlugin: stm32f103ret-library=false
appPlugin: tamper-switch=false
appPlugin: temperature-measurement-server=false
appPlugin: temperature-si7053-stub=false
appPlugin: tftp-bootload-target=true
appPlugin: thread-stack=true
appPlugin: thread-test-harness-cli=false
appPlugin: transport-mqtt=false
appPlugin: udp-cli=true
appPlugin: udp-debug=false
appPlugin: unix-library=false
appPlugin: unix-netif-config=false
appPlugin: version-debug=true
appPlugin: zcl-core=false

# Setup configurations
{setupId:additionalFiles
PATH(ISC_RELATIVE):client-sleepy-implementation.c
}
{setupId:boardHeader
}
{setupId:bookkeeping
}
{setupId:bootloader
}
{setupId:callbackConfiguration
emberAfNetworkStatusCallback:false
emberResumeNetworkReturn:false
emberJoinNetworkReturn:false
emberAttachToNetworkReturn:false
emberResetNetworkStateReturn:false
emberUdpHandler:false
emberVerifyBootloadRequest:false
emberAfPluginIdleSleepOkToSleepCallback:false
halButtonIsr:false
emberAfPluginPollingOkToLongPollCallback:false
}
{setupId:coapDispatch
POST, server/advertise, serverAdvertiseHandler
}
{setupId:commandLineConfiguration
on
join,joinCommand,,unlocked
get-join-key,getJoinKeyCommand,,unlocked
attach,attachCommand,b,unlocked
report,reportCommand,,unlocked
detach,detachCommand,,unlocked
}
{setupId:debugConfiguration
on
area name off
appSerial=1
}
{setupId:eventConfiguration
stateEventControl,stateEventHandler
}
{setupId:genConfig
}
{setupId:halOptions
}
{setupId:hwConfig
active=false
}
{setupId:information
\{key:description
Client/Server Sample Applications

The client and server applications demonstrate basic Thread network functionality for a wireless sensor network.  This client application acts as a data sensor and reports information to a server node that acts as a sink.  The client and server communicate using the Constrained Application Protocol (CoAP) at the application layer, with UDP serving as the transport layer.  CoAP and UDP are provided by the Silicon Labs Thread stack.

At startup, if the node had already joined a network previously, it will simply resume network operations using the network parameters stored in non-volatile memory in the stack.  Otherwise, it will wait for user interaction before joining a network.  Pressing the join button, which is usually BUTTON1 or PB1, will initiate the join procedure.  The "join" CLI command can also be used.

The server sends advertisement messages to the network at regular intervals using multicast transmission.  The advertisements, sent as CoAP POST requests to the "server/advertise" URI, inform clients in the network about the presence of the server.  When a client without a server receives the advertisement, it will begin sending sensor data to the server.  Sensor data are sent as CoAP POST requests to the "client/report" URI, and are unicast directly to the server.  In these examples, the sensor data are the current temperature, as provided by the temperature sensor on the development board of the client nodes.

Before attempting to join the network, the client nodes print their unique join key to the console.  This key must be provided to the commissioner (i.e., the server) before the client will be able to join the network.  For example, when joining, the client will display a message such as:

Joining network "client/server" with EUI64 >0134047823560034 and join key "174F5B07"

In this example, "174F5B07" is the unique join key for the client and 0134047823560034 is the EUI64 of the client.  The join key can be provided to the server and joining can be enabled via the following CLI command:

expect "174F5B07"

If the EUI64 of the client is known, it can be specified in order to further assist in joining the correct node:

expect "174F5B07" \\{0134047823560034\\}

It is important to note that each client will have a different join key.  It is essential that the server be informed of the exact join key used by the client.  If the join key is not provided to the server, or if an incorrect key is provided, the client will not be able to join.

The client sample application will be using a manufacturing token for the purpose of storing the unique join key.  The manufacturer should create a custom random join key at manufacturing time for each device.  The Silicon Labs token for this is TOKEN_MFG_THREAD_JOIN_KEY.  Details on manufacturing tokens can be found in AN710 for EM35x and AN961 for EFR32.  For ease of use, this sample app will create a join key at runtime if the manufacturing token was not previously set.  This is only done for the purpose of the sample application and should not be done in actual production.  The join key will persist as a manufacturing token unless there is a mass erase done on the device.

All application code is contained in the client-sleepy-implementation.c file within the application directory.
\}
}
{setupId:macros
}
{setupId:serial
}
{setupId:template
}
{setupId:token
}
{setupId:zclip
configuredNetwork:type:ZIGBEE_PRO, name:Primary
beginEndpointType:Primary
device:HA-onoff
endEndpointType
configuredEndpoint:ep:1,pi: -1,di:-1,dv:0,ept:Primary,nwk:Primary
}

# Plugin options
