name=ZCL Core
description=ZCL Core
category=ZCL
quality=development

providedApis=zcl-core
api.zcl-core.header=zcl-core.h

requiredApis=buffer-management,buffer-queue,coap,coap-dispatch,event,event-queue,hal,stack,token

cbor-encoder.c
zcl-core-attribute.c
zcl-core-binding.c
zcl-core-cache.c
zcl-core-cli.c
zcl-core-command.c
zcl-core-endpoint.c
zcl-core-ez-mode.c
zcl-core-group.c
zcl-core-message.c
zcl-core-notification.c
zcl-core-reporting.c
zcl-core-uri.c
zcl-core-well-known.c
zcl-core.c
zclip-struct.c

callbacks=callback.info

options=bindingTableSize,cacheTableSize,groupTableSize

bindingTableSize.name=Binding table size
bindingTableSize.description=Maximum count of bindings across all endpoints.
bindingTableSize.type=NUMBER:1,254
bindingTableSize.default=8
bindingTableSize.define=EMBER_ZCL_BINDING_TABLE_SIZE

cacheTableSize.name=Address cache table size
cacheTableSize.description=Maximum count of address cache entries.  The cache size may exceed this limit to accommodate the actual number of active bindings.
cacheTableSize.type=NUMBER:1,254
cacheTableSize.default=8
cacheTableSize.define=EMBER_ZCL_CACHE_TABLE_SIZE

# The table size is limited to 253 due to a qurik in the Get Group Membersip
# response in the Groups cluster.  The capacity field is set to 0 if no groups
# may be added, 0x01 to 0xFD if n groups may be added, 0xFE if at least one
# group may be added but the exact number is unknown, or 0xFF if it is unknown
# if groups can be added.  To ensure the capacity always has a meaningful
# value, the table size can't be 254 (0xFE) or 255 (0xFF).
groupTableSize.name=Group table size
groupTableSize.description=Maximum count of groups across all endpoints.
groupTableSize.type=NUMBER:1,253
groupTableSize.default=8
groupTableSize.define=EMBER_ZCL_GROUP_TABLE_SIZE

setup(bookkeeping) {
  includes=EMBER_AF_API_ZCL_CORE
  provides=preAttributeChange,postAttributeChange,notification

  provides.preAttributeChange=bool emZclPreAttributeChange(EmberZclEndpointId_t endpointId, const EmberZclClusterSpec_t *clusterSpec, EmberZclAttributeId_t attributeId, const void *buffer, size_t bufferLength)
  provides.preAttributeChange.0=emberZclPreAttributeChangeCallback
  provides.preAttributeChange.type=and

  provides.postAttributeChange=void emZclPostAttributeChange(EmberZclEndpointId_t endpointId, const EmberZclClusterSpec_t *clusterSpec, EmberZclAttributeId_t attributeId, const void *buffer, size_t bufferLength)
  provides.postAttributeChange.0=emberZclPostAttributeChangeCallback

  provides.notification=void emZclNotification(const EmberZclNotificationContext_t *context, const EmberZclClusterSpec_t *clusterSpec, EmberZclAttributeId_t attributeId, const void *buffer, size_t bufferLength)
  provides.notification.0=emberZclNotificationCallback

  init=emZclInitHandler
  markApplicationBuffers=emZclCacheMarkApplicationBuffersHandler,emZclReportingMarkApplicationBuffersHandler
  networkStatus=emZclBindingNetworkStatusHandler,emZclCacheNetworkStatusHandler,emZclGroupNetworkStatusHandler,emZclReportingNetworkStatusHandler
  postAttributeChange=emZclReportingPostAttributeChangeHandler
}

setup(commandLineConfiguration) {
  zcl info,                       emZclCliInfoCommand

  zcl attribute print,            emZclCliAttributePrintCommand
  zcl attribute read,             emZclCliAttributeReadCommand,          uuvvv
  zcl attribute write,            emZclCliAttributeWriteCommand,         uuvvvb
  zcl attribute reset,            emZclCliAttributeResetCommand,         u

  zcl attribute remote read,      emZclCliAttributeRemoteReadCommand,    uvvv*
  zcl attribute remote write,     emZclCliAttributeRemoteWriteCommand,   uvvvb

  zcl binding add,                emZclCliBindingAddSetCommand,          uuvvubvuvu
  zcl binding set,                emZclCliBindingAddSetCommand,          uuvvubvuvuu
  zcl binding remove,             emZclCliBindingRemoveCommand,          u
  zcl binding clear,              emZclCliBindingClearCommand
  zcl binding print,              emZclCliBindingPrintCommand

  zcl binding remote add,         emZclCliBindingRemoteAddUpdateCommand, uvvubvuvu
  zcl binding remote update,      emZclCliBindingRemoteAddUpdateCommand, uvvubvuvuu
  zcl binding remote remove,      emZclCliBindingRemoteRemoveCommand,    uvvu

  zcl send binding,               emZclCliSendCommand,                   u
  zcl send endpoint,              emZclCliSendCommand,                   ubu
  zcl send group,                 emZclCliSendCommand,                   bv

  zcl ez-mode start,              emZclCliEzModeStartCommand
  zcl ez-mode stop,               emberZclStopEzMode

  zcl discovery cluster,          emZclCliDiscByClusterIdCommand,        uvv
  zcl discovery endpoint,         emZclCliDiscByEndpointCommand,         uv
  zcl discovery device-type,      emZclCliDiscByDeviceTypeCommand,       v
  zcl discovery uid,              emZclCliDiscByUidCommand,              b
  zcl discovery resource-version, emZclCliDiscByResourceVersionCommand,  v
  zcl discovery cluster-revision, emZclCliDiscByClusterRevisionCommand,  v
  zcl discovery mode,             emZclCliDiscSetModeCommand,            u
  zcl discovery init,             emZclCliDiscInitCommand
  zcl discovery send,             emZclCliDiscSendCommand

  zcl cache clear,                emZclCliCacheClearCommand
  zcl cache add uid-ipv6,         emZclCliCacheAddCommand,               bb
  zcl cache print,                emZclCliCachePrintCommand,             u
  zcl cache remove,               emZclCliCacheRemoveCommand,            v
}

setup(coapDispatch) {
  ANY, zcl/,         emZclHandler
  GET, .well-known/, emZclHandler
}

setup(eventConfiguration) {
  emZclEzModeEventControl, emZclEzModeEventHandler
}

setup(token) {
  files=zcl-core-token.h
}
