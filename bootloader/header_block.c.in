/**
 * @brief Auto generated header block structure
 * @author Ran Ban (ran.bao@wirelessguard.co.nz)
 *
 * TEMPLATE: header_block.c.in
 *
 * DO NOT MODIFY THIS FILE!
 */
#ifdef PLATFORM_HEADER
	#include PLATFORM_HEADER
#endif
#include BOARD_HEADER
#include "application_header.h"
#include "em_device.h"


/**
 * @brief Define necessary build macros
 */
#ifndef VAR_AT_SEGMENT
#define VAR_AT_SEGMENT(__variableDeclaration, __segmentName) \
  __variableDeclaration __attribute__ ((section(__segmentName)))
#endif

#ifndef NO_STRIPPING
#define NO_STRIPPING __attribute__((used))
#endif

#ifndef __AAT__
#define __AAT__ ".aat"                // Application address table
#endif


/**
 * @brief __StackTop is defined in linker script, where being used as a place holder indicating the address of start
 *        address of global stack
 */
extern uint32_t __StackTop;

/**
 * @brief dynamic_vector_table is defined in crt0.c and will be copied into SRAM
 */
extern irq_handler_t dynamic_vector_table[];

/**
 * @brief Generic Application header
 *
 * The header block is placed at .aat, as defined in linker script. The start and end address can be obtained by
 * _AAT_SEGMENT_BEGIN and _AAT_SEGMENT_END
 */
VAR_AT_SEGMENT(NO_STRIPPING const ExtendedApplicationHeaderTable_t static_application_header_table, __AAT__) =
{
        // Silicon Lab's standard application header table
		.basic_application_header_table = {
				.stack_top = &__StackTop,
				.reset_handler = Reset_Handler,
				.nmi_handler = NMI_Handler,
				.hardfault_handler = HardFault_Handler,
				.type = BOOTLOADER_ADDRESS_TABLE_TYPE,
				.version = BASIC_HEADER_VERSION,
				.vector_table = dynamic_vector_table
		},

		 // Basic header table CRC is generated by post process script
        .basic_app_header_table_crc = 0x0UL,

        .ext_header_version = EXTENDED_HEADER_VERSION,

        // The application total size is calculated by post process script
        .app_total_size = 0x0UL,

        // fixed header size, depending on current configuration
        .header_size = sizeof(ExtendedApplicationHeaderTable_t),

        // The application version is determined at compile time by current code revision
        .app_version_major = (uint8_t) ${VERSION_MAJOR},
        .app_version_minor = (uint8_t) ${VERSION_MINOR},
        .app_version_patch = (uint8_t) ${VERSION_PATCH},
        .app_version_build = (uint8_t) ${VERSION_BUILD},

        // The hardware version is determined by board header
        .hw_version_revision = (uint8_t) HATCH_HARDWARE_REV,
        .hw_version_product_id = (uint8_t) HATCH_HARDWARE_PRODUCT_ID,

        // Timestamp is filled by post process script
        .timestamp = 0x0UL
};
