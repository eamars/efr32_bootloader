MESSAGE("ENTER ${CMAKE_CURRENT_SOURCE_DIR}")

# override build flags
SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -mfloat-abi=softfp -Os")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -mfloat-abi=softfp -Os")
SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} --specs=nano.specs -mfloat-abi=softfp -T${TARGET_ROOT_DIRECTORY}/scripts/efr32mg12p_bootloader.ld -Wl,--Map=symbols.map,--gc-sections")

# override executable
SET(HATCH_EXECUTABLE "WG_BOOTLOADER")

# include definitions
ADD_DEFINITIONS(
		-DEFR32MG12P432F1024GL125=1
		-DBTL_CONFIG_FILE="bootloader_config.h"
)

SET(TARGET_SPECIFIC_INCLUDE_DIRECTORY
		"${TARGET_SPECIFIC_INCLUDE_DIRECTORY}"

		${TARGET_ROOT_DIRECTORY}/platform/Device/SiliconLabs/efr32mg12p/Include
		${TARGET_ROOT_DIRECTORY}/platform/bootloader
		${TARGET_ROOT_DIRECTORY}/platform/bootloader/driver
		${TARGET_ROOT_DIRECTORY}/platform/bootloader/api
		${TARGET_ROOT_DIRECTORY}/platform/bootloader/core
		)

# Collect all source file
FILE (GLOB LOCAL_SRC *.c)

SET(EXT_SRC
		${TARGET_ROOT_DIRECTORY}/platform/bootloader/driver/btl_driver_uart.c
		${TARGET_ROOT_DIRECTORY}/platform/bootloader/driver/btl_driver_delay.c
		)

# include configurations from current folder
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

# add dependency
ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/target ${CMAKE_CURRENT_BINARY_DIR}/__target)

# include device specific configurations
INCLUDE_DIRECTORIES(${TARGET_SPECIFIC_INCLUDE_DIRECTORY})

# include board specific configurations
INCLUDE_DIRECTORIES(${BOARD_SPECIFIC_INCLUDE_DIRECTORY})

# include cmsis definitions
INCLUDE_DIRECTORIES(${CMSIS_INCLUDE_DIRECTORY})

# build source code as library
ADD_EXECUTABLE (${HATCH_EXECUTABLE}.${ELF_EXTENSION} ${LOCAL_SRC} ${EXT_SRC})
ADD_DEPENDENCIES(${HATCH_EXECUTABLE}.${ELF_EXTENSION} target)
TARGET_LINK_LIBRARIES(${HATCH_EXECUTABLE}.${ELF_EXTENSION} efr32mg12p common emlib emdrv drivers c)

# include size command
INCLUDE("${PROJECT_SOURCE_DIR}/cmake/size.cmake")

# strip debug info from executable
ADD_CUSTOM_COMMAND(
		TARGET
		${HATCH_EXECUTABLE}.${ELF_EXTENSION}
		POST_BUILD
		COMMAND ${CMAKE_OBJCOPY} -O binary "${EXECUTABLE_OUTPUT_PATH}/${HATCH_EXECUTABLE}.${ELF_EXTENSION}" "${EXECUTABLE_OUTPUT_PATH}/${HATCH_EXECUTABLE}.${BINARY_EXTENSION}"
)

ADD_CUSTOM_COMMAND(
		TARGET
		${HATCH_EXECUTABLE}.${ELF_EXTENSION}
		POST_BUILD
		COMMAND ${CMAKE_OBJCOPY} -O srec "${EXECUTABLE_OUTPUT_PATH}/${HATCH_EXECUTABLE}.${ELF_EXTENSION}" "${EXECUTABLE_OUTPUT_PATH}/${HATCH_EXECUTABLE}.${SREC_EXTENSION}"
)

ADD_CUSTOM_COMMAND(
		TARGET
		${HATCH_EXECUTABLE}.${ELF_EXTENSION}
		POST_BUILD
		COMMAND ${CMAKE_OBJCOPY} -O ihex "${EXECUTABLE_OUTPUT_PATH}/${HATCH_EXECUTABLE}.${ELF_EXTENSION}" "${EXECUTABLE_OUTPUT_PATH}/${HATCH_EXECUTABLE}.${HEX_EXTENSION}"
)
